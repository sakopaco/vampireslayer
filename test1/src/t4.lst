Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2021.08.13 - 18:19:37]

t4.asm
Errors: 0

       1   00:0000                      	OUTPUT	"t4.bin"
       2   00:8000                      	
       3   00:8000                      ;;=====================================================
       4   00:8000                      ;;DEFINICIÓN DE CONSTANTES
       5   00:8000                      ;;=====================================================	
       6   00:8000                      	include "constantes.asm"
       1.  00:8000                      ;;=====================================================
       2.  00:8000                      ;; FICHERO constantes.asm
       3.  00:8000                      ;;=====================================================
       4.  00:8000                      
       5.  00:8000                      ;;ETIQUETAS/CONSTANTES BIOS TECLADO
       6.  00:8000  (00:00D8)           GTTRIG		equ		#00D8	;Returns current trigger status
       7.  00:8000  (00:00D5)           GTSTCK		equ		#00D5	;Returns the joystick/cursors status
       8.  00:8000  (00:F3DB)           CLIKSW		equ		#F3DB	;deshabilita el sonido de clic cuando se pulsa una tecla
       9.  00:8000                      
      10.  00:8000                      ;;ETIQUETAS/CONSTANTES BIOS VDP
      11.  00:8000  (00:013E)           RDVDP		equ		#013E	;lee registro status VDP
      12.  00:8000  (00:0047)           WRTVDP		equ		#0047	;escribe registros del VDP
      13.  00:8000  (00:005C)           LDIRVM		equ		#005C	;RAM/ROM -> VRAM
      14.  00:8000  (00:0059)           LDIRMV		equ		#0059	;VRAM -> RAM
      15.  00:8000  (00:005F)           CHGMOD		equ		#005F	;cambia modo pantalla (screen mode)
      16.  00:8000  (00:0041)           DISSCR  	equ		#0041	;desactiva pantanlla
      17.  00:8000  (00:0044)           ENASCR  	equ		#0044	;activa pantalla
      18.  00:8000  (00:0062)           CHGCLR  	equ		#0062	;cambia color de pantalla (toca A y direcciones)
      19.  00:8000  (00:F3E9)           FORCLR		equ		#F3E9	;zona memoria color foreground
      20.  00:8000  (00:F3EA)           BAKCLR  	equ		#F3EA	;zona memoria color background
      21.  00:8000  (00:F3EB)           BDRCLR 		equ		#F3EB	;zona memoria bordercolor
      22.  00:8000  (00:00C3)           CLS			equ		#00C3	;limpia pantalla (necesita A=0)
      23.  00:8000                      
      24.  00:8000                      ;;ETIQUETAS/CONSTANTES REGISTROS VDP
      25.  00:8000  (00:F3DF)           RG0SAV		equ		#F3DF	;Mirror of VDP register 0 (Basic: VDP(0))
      26.  00:8000  (00:F3E0)           RG1SAV		equ		#F3E0	;Mirror of VDP register 1 (Basic: VDP(1))
      27.  00:8000  (00:F3E1)           RG2SAV		equ		#F3E1	;Mirror of VDP register 2 (Basic: VDP(2))
      28.  00:8000  (00:F3E2)           RG3SAV		equ		#F3E2	;Mirror of VDP register 3 (Basic: VDP(3))
      29.  00:8000  (00:F3E3)           RG4SAV		equ		#F3E3	;Mirror of VDP register 4 (Basic: VDP(4))
      30.  00:8000  (00:F3E4)           RG5SAV		equ		#F3E4	;Mirror of VDP register 5 (Basic: VDP(5))
      31.  00:8000  (00:F3E5)           RG6SAV		equ		#F3E5	;Mirror of VDP register 6 (Basic: VDP(6))
      32.  00:8000  (00:F3E6)           RG7SAV		equ		#F3E6	;Mirror of VDP register 7 (Basic: VDP(7))
      33.  00:8000  (00:F3E7)           STATFL		equ		#F3E7	;Mirror of VDP(8) status register (S#0)
      34.  00:8000                      
      35.  00:8000  (00:0099)           REGEST		equ		#0099	;registro de estado para escribir directamente en VRAM
      36.  00:8000  (00:0098)           REGESCVDP	equ		#0098	;registro donde escribir valor para VRAM
      37.  00:8000                      
      38.  00:8000                      ;;ETIQUETAS/CONSTANTES REGISTROS PSG (PARA JOYSTICK)
      39.  00:8000  (00:00A0)           PSG_A  equ  0a0h  ;reg address
      40.  00:8000  (00:00A1)           PSG_W  equ  0a1h  ;reg data WR
      41.  00:8000  (00:00A2)           PSG_R  equ  0a2h  ;reg data
      42.  00:8000                      
      43.  00:8000                      
      44.  00:8000                      ;;ETIQUETAS DE ZONAS DE MEMORIA DE LA VPD (MSX1)
      45.  00:8000  (00:0000)           CHRTBL		equ		#0000
      46.  00:8000  (00:1800)           TILMAP		equ		#1800
      47.  00:8000  (00:1B00)           SPRART		equ		#1B00
      48.  00:8000  (00:2000)           CLRTBL		equ		#2000
      49.  00:8000  (00:3800)           SPRTBL		equ		#3800
      50.  00:8000                      
      51.  00:8000                      
      52.  00:8000                      ;;ETIQUETAS ESTANDAR PARA DAR MÁS CLARIDAD AL CODIGO
      53.  00:8000  (00:0001)           SI			equ		1
      54.  00:8000  (00:0000)           NO			equ		0
      55.  00:8000                      
      56.  00:8000                      ;;PALETA DE COLORES DEL MSX
      57.  00:8000  (00:0000)           COLTRASP	equ		0
      58.  00:8000  (00:0001)           COLNEGRO	equ		1
      59.  00:8000  (00:0002)           COLVERDE	equ		2
      60.  00:8000  (00:0003)           COLVERCLA	equ		3
      61.  00:8000  (00:0004)           COLAZULOSC	equ		4
      62.  00:8000  (00:0005)           COLAZULLA	equ		5
      63.  00:8000  (00:0006)           COLROJOOSC	equ		6
      64.  00:8000  (00:0007)           COLCYAN		equ		7
      65.  00:8000  (00:0008)           COLROJO		equ		8
      66.  00:8000  (00:0009)           COLROJOCLA	equ		9
      67.  00:8000  (00:000A)           COLAMAROSC	equ		10
      68.  00:8000  (00:000B)           COLAMARCLA	equ		11
      69.  00:8000  (00:000C)           COLVERDOSC	equ		12
      70.  00:8000  (00:000D)           COLMAGENTA	equ		13
      71.  00:8000  (00:000E)           COLGRIS		equ		14
      72.  00:8000  (00:000F)           COLBLANCO	equ		15
      73.  00:8000                      
      74.  00:8000                      
      75.  00:8000                      
      76.  00:8000                      ;;ETIQUETAS ESPECIFICAS PARA DAR MÁS CLARIDAD AL CODIGO (relacionadas con posiciones en mapa vdp)
      77.  00:8000  (00:02F8)           POSMAPLIN1  equ		#02F8
      78.  00:8000  (00:02D8)           POSMAPLIN2  equ		#02D8
      79.  00:8000  (00:02B8)           POSMAPLIN3  equ		#02B8
      80.  00:8000  (00:0298)           POSMAPLIN4  equ		#0298
      81.  00:8000  (00:0278)           POSMAPLIN5  equ		#0278
      82.  00:8000  (00:0258)           POSMAPLIN6  equ		#0258
      83.  00:8000  (00:0238)           POSMAPLIN7  equ		#0238
      84.  00:8000                      
      85.  00:8000  (00:000D)           POSCARAMAP	equ		#000D
      86.  00:8000  (00:0248)           POSVIDAS	equ		#0248
      87.  00:8000  (00:0011)           POSRELIMAP	equ		#0011
      88.  00:8000  (00:02C8)           POSRELIQ	equ		#02C8
      89.  00:8000  (00:0288)           POSENERG	equ		#0288
      90.  00:8000  (00:02B4)           POSNIVEL	equ		#02B4
      91.  00:8000  (00:0238)           POSMAPA		equ 	#0238
      92.  00:8000                      
      93.  00:8000  (00:01EE)           POSPUERABAJ equ		#01EE
      94.  00:8000  (00:008E)           POSPUERARRI equ		#008E
      95.  00:8000  (00:00FC)           POSPUERDERE equ		#00FC
      96.  00:8000  (00:00E1)           POSPUERIZQU equ		#00E1
      97.  00:8000                      
      98.  00:8000                      
      99.  00:8000                      ;;ETIQUETAS ESPECIFICAS PARA DAR MÁS CLARIDAD AL CODIGO (relacionadas con posiciones en en el banco de memoria)
     100.  00:8000  (00:0013)           TILEPROTAM  equ		19		;tile del prota para pintar en mapa
     101.  00:8000  (00:0009)           TILEGRISM	equ		9		;tile gris que representa vacio (por donde el prota va pasando)
     102.  00:8000  (00:0010)           TILEMAPROJO equ		16
     103.  00:8000  (00:000F)           TILEMAPAMAR equ		15
     104.  00:8000  (00:000E)           TILEMAPVERD equ		14
     105.  00:8000                      
     106.  00:8000                      
     107.  00:8000                      ;;ETIQUETAS ESPECIFICAS PARA DAR MÁS CLARIDAD AL CODIGO (generales)
     108.  00:8000  (00:0008)           NMAXVIDREL	equ		8		;el número máximo de vidas y de reliquias es de 8
     109.  00:8000  (00:0007)           NHABNIVEL	equ		7
     110.  00:8000  (00:00F8)           MAXENERGIA  equ		248
     111.  00:8000  (00:00D9)           TILEENERG8  equ		217
     112.  00:8000  (00:00BA)           TILEENERG7  equ		186
     113.  00:8000  (00:009B)           TILEENERG6  equ		155
     114.  00:8000  (00:007C)           TILEENERG5  equ		124
     115.  00:8000  (00:005D)           TILEENERG4  equ		93
     116.  00:8000  (00:003E)           TILEENERG3  equ		62
     117.  00:8000  (00:001F)           TILEENERG2  equ		31
     118.  00:8000  (00:0000)           TILENEGRO	equ		0
     119.  00:8000                      
     120.  00:8000                      ;limites
     121.  00:8000  (00:0000)           LIMPANTIZQ  equ		0
     122.  00:8000  (00:00FF)           LIMPANTDER  equ		255
     123.  00:8000  (00:0000)           LIMPANTARR  equ		0
     124.  00:8000  (00:0080)           LIMPANTABA  equ		128
     125.  00:8000                      
     126.  00:8000                      
     127.  00:8000                      ;matriz de 7x7 empieza en 0, y fila y x col, cuento desde esquina sup izq
     128.  00:8000  (00:0006)           BASEMAPY	equ		6
     129.  00:8000  (00:0003)           BASEMAPX	equ		3
     130.  00:8000                      
     131.  00:8000                      
     132.  00:8000                      
     133.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     134.  00:8000                      ;; CONSTANTES PARA INTERRUPCIONES
     135.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     136.  00:8000  (00:FD9A)           H.KEYI		equ     	#FD9A
     137.  00:8000  (00:FD9F)           H.TIMI	 	equ     	#FD9F
     138.  00:8000                      
     139.  00:8000                      
     140.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     141.  00:8000                      ;; CONSTANTES PARA SONIDO 
     142.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     143.  00:8000                      
     144.  00:8000  (F000)              	map		#f000
     145.  00:8000                      
     146.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER
     147.  00:8000  (00:F000)           PT3_SETUP:		#1	;set bit0 to 1, if you want to play without looping
     148.  00:8000                      					;bit7 is set each time, when loop point is passed
     149.  00:8000  (00:F001)           PT3_MODADDR:	#2
     150.  00:8000  (00:F003)           PT3_CrPsPtr:	#2
     151.  00:8000  (00:F005)           PT3_SAMPTRS:	#2
     152.  00:8000  (00:F007)           PT3_OrnPtrs:	#2
     153.  00:8000  (00:F009)           PT3_PDSP:		#2
     154.  00:8000  (00:F00B)           PT3_CSP:		#2
     155.  00:8000  (00:F00D)           PT3_PSP:		#2
     156.  00:8000  (00:F00F)           PT3_PrNote:		#1
     157.  00:8000  (00:F010)           PT3_PrSlide:	#2
     158.  00:8000  (00:F012)           PT3_AdInPtA:	#2
     159.  00:8000  (00:F014)           PT3_AdInPtB:	#2
     160.  00:8000  (00:F016)           PT3_AdInPtC:	#2
     161.  00:8000  (00:F018)           PT3_LPosPtr:	#2
     162.  00:8000  (00:F01A)           PT3_PatsPtr:	#2
     163.  00:8000  (00:F01C)           PT3_Delay:		#1
     164.  00:8000  (00:F01D)           PT3_AddToEn:	#1
     165.  00:8000  (00:F01E)           PT3_Env_Del:	#1
     166.  00:8000  (00:F01F)           PT3_ESldAdd:	#2
     167.  00:8000  (00:F021)           PT3_NTL3:		#2	; AND A / NOP (note table creator)
     168.  00:8000                      
     169.  00:8000  (00:F023)           VARS:			#0
     170.  00:8000                      
     171.  00:8000  (00:F023)           ChanA:			#29			;CHNPRM_Size
     172.  00:8000  (00:F040)           ChanB:			#29			;CHNPRM_Size
     173.  00:8000  (00:F05D)           ChanC:			#29			;CHNPRM_Size
     174.  00:8000                      
     175.  00:8000                      ;GlobalVars
     176.  00:8000  (00:F07A)           DelyCnt:		#1
     177.  00:8000  (00:F07B)           CurESld:		#2
     178.  00:8000  (00:F07D)           CurEDel:		#1
     179.  00:8000  (00:F07E)           Ns_Base_AddToNs:	#0
     180.  00:8000  (00:F07E)           Ns_Base:		#1
     181.  00:8000  (00:F07F)           AddToNs:		#1
     182.  00:8000                      
     183.  00:8000  (00:F080)           NT_:			#192	; Puntero a/tabla de frecuencias
     184.  00:8000                      
     185.  00:8000  (00:F140)           AYREGS:			#0
     186.  00:8000  (00:F140)           VT_:			#14
     187.  00:8000  (00:F14E)           EnvBase:		#2
     188.  00:8000  (00:F150)           VAR0END:		#0
     189.  00:8000                      
     190.  00:8000  (00:F150)           T1_:			#0		
     191.  00:8000  (00:F150)           T_NEW_1:		#0
     192.  00:8000  (00:F150)           T_OLD_1:		#24
     193.  00:8000  (00:F168)           T_OLD_2:		#24
     194.  00:8000  (00:F180)           T_NEW_3:		#0
     195.  00:8000  (00:F180)           T_OLD_3:		#2
     196.  00:8000  (00:F182)           T_OLD_0:		#0
     197.  00:8000  (00:F182)           T_NEW_0:		#24
     198.  00:8000  (00:F19A)           T_NEW_2:		#166
     199.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER END
     200.  00:8000                      
     201.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ayFX REPLAYER 
     202.  00:8000  (00:F240)           ayFX_MODE:		#1			; ayFX mode
     203.  00:8000  (00:F241)           ayFX_BANK:		#2			; Current ayFX Bank
     204.  00:8000  (00:F243)           ayFX_PRIORITY:	#1			; Current ayFX stream priotity
     205.  00:8000  (00:F244)           ayFX_POINTER:	#2			; Pointer to the current ayFX stream
     206.  00:8000  (00:F246)           ayFX_TONE:		#2			; Current tone of the ayFX stream
     207.  00:8000  (00:F248)           ayFX_NOISE:		#1			; Current noise of the ayFX stream
     208.  00:8000  (00:F249)           ayFX_VOLUME:	#1			; Current volume of the ayFX stream
     209.  00:8000  (00:F24A)           ayFX_CHANNEL:	#1			; PSG channel to play the ayFX stream
     210.  00:8000                      
     211.  00:8000                      	;IF (AYFXRELATIVE == 1 ) 
     212.  00:8000                      ;ayFX_VT:	ds	2			; ayFX relative volume table pointer
     213.  00:8000                      	;ENDIF
     214.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ayFX REPLAYER END
     215.  00:8000                      
     216.  00:8000                      
     217.  00:8000                      
       7   00:8000                      
       8   00:8000                      ;;=====================================================
       9   00:8000                      ;;DEFINICIÓN DE CABECERA DE ARCHIVO BIN
      10   00:8000                      ;;=====================================================		
      11   00:8000                      	include "cabecerabin.asm"
       1.  00:8000                      ;;=====================================================
       2.  00:8000                      ;; FICHERO cabecera.asm
       3.  00:8000                      ;;=====================================================
       4.  00:8000                      
       5.  00:8000                      ;;CABECERA FICHERO BIN
       6.  00:8000  FE                  	DB	#FE
       7.  00:8001  00 80               	DW	START
       8.  00:8003  54 A0               	DW	END
       9.  00:8005  00 80               	DW	START
      10.  00:8007                      
      11.  00:8007                      ;;INICIO CÓDIGO PROGRAMA	
      12.  00:8007                      	ORG	#8000
      13.  00:8000                      	
      12   00:8000                      	
      13   00:8000                      START:	
      14   00:8000                      	;inicializa pantalla y entonrno
      15   00:8000  CD E3 80            	CALL	sub_preparapantalla			;screen 2,2 sin click al pulsar tecla y color 16,1,1
      16   00:8003                      	
      17   00:8003                      	;inicializa variables para parametrizar funciones y que lo que se muestre sea variable (nº vidas, mapa, puertas, pantalla, etc...)
      18   00:8003  CD 36 80            	CALL	inicializa_variables_pruebas
      19   00:8006                      	
      20   00:8006                      	;inicializa los niveles por partida
      21   00:8006  CD 55 80            	CALL	inicializa_niveles			;no es necesario parametrizarlo según el nivel del usuario ya que se cargan todos
      22   00:8009                      	
      23   00:8009                      	;pinta la pantalla (la primera o algunas especiales se pintan completamente)
      24   00:8009  CD 04 81            	CALL	pinta_pantalla_completa 
      25   00:800C                      	
      26   00:800C                      	;carga sprites en memoria (SE HA RETRASADO HASTA PARAMETRIZAR LA CARGA DE PANTALLAS)
      27   00:800C  CD 88 83            	CALL 	carga_patrones_sprites_nivel1
      28   00:800F                      	
      29   00:800F                      	;funciones que modificarian el marcador si se produce un evento cuando toque y cuando se pinta la pantalla ya se mira
      30   00:800F                      	;una variable para ver si el array hay que actualizarlo en pantalla o no
      31   00:800F  CD 5D 81            	CALL	pinta_vidas
      32   00:8012  CD 6C 81            	CALL 	pinta_reliquias
      33   00:8015  CD 7B 81            	CALL	pinta_nivel
      34   00:8018  CD FC 81            	CALL	borra_mapa
      35   00:801B  CD 8A 82            	CALL	pinta_puertas
      36   00:801E                      
      37   00:801E  3E 13               	LD		 A, TILEPROTAM
      38   00:8020  32 9A 9C            	LD		(elemento_pintar_mapa), A
      39   00:8023  CD FC 82            	CALL	posiciona_en_mapa		;se le pasa elemento_pintar_mapa (tile del prota) está el prota y prota.poxx y posy
      40   00:8026                      	
      41   00:8026                      	;incializacion de replayer con interrupciones
      42   00:8026  CD 8B 85            	CALL	inicializa_replayer_efectos_interrupciones
      43   00:8029                      	
      44   00:8029                      loop_principal:
      45   00:8029  76                  	HALT							;espera VBLANK y sincroniza
      46   00:802A                      	
      47   00:802A  CD 59 84            	CALL	render_sprites			;actualiza array de sprites y los pinta en pantalla
      48   00:802D                      	
      49   00:802D  CD ED 81            	CALL	pinta_energia			;pinta la energia en pantalla
      50   00:8030                      
      51   00:8030  CD 9C 84            	CALL	check_player			;MIRA EL CONTROL Y APLICA LA LOGICA DE MOVIMIENTO DEL PROTAGONISTA
      52   00:8033                      	
      53   00:8033  C3 29 80            	JP		loop_principal
      54   00:8036                      fin_programa_principal:
      55   00:8036                      	;RET
      56   00:8036                      
      57   00:8036                      
      58   00:8036                      
      59   00:8036                      
      60   00:8036                      
      61   00:8036                      ;;*******************************************************************
      62   00:8036                      ; sólo para hacer pruebas y pintar la parte de las vidas y demás
      63   00:8036                      inicializa_variables_pruebas:
      64   00:8036  3E 04               	LD		 A, 4
      65   00:8038  32 76 9C            	LD		(prota_vidas),A
      66   00:803B                      
      67   00:803B  3E 04               	LD		 A, 4
      68   00:803D  32 77 9C            	LD		(prota_reliquias), A
      69   00:8040                      
      70   00:8040  3E 64               	LD		 A, 100
      71   00:8042  32 7A 9C            	LD		(prota_energia), A
      72   00:8045                      
      73   00:8045                      	;ubico al prota dentro del nivel para obtener luego las habitaciones y enemigos que aparecerán
      74   00:8045                      	;será igual la posición inicial en todos los niveles
      75   00:8045                      	
      76   00:8045  3E 04               	LD		 A, 4				;los niveles (matrices) son 7 del 0 al 6
      77   00:8047  32 75 9C            	LD		(prota_nivel), A	;nivel empieza en 0 para usar las posiciones ascii
      78   00:804A                      
      79   00:804A  3E 06               	LD		 A, 6				;los subniveles (filas) son 7 del 0 al 6
      80   00:804C  32 79 9C            	LD		(prota_pos_mapy), A	;pos Y dentro del nivel (se empieza en 0)
      81   00:804F                      
      82   00:804F  3E 02               	LD		 A, 2				;columnas 7: del 0 al 6
      83   00:8051  32 78 9C            	LD		(prota_pos_mapx), A	;pos X dentro del nivel (se empieza en 0)
      84   00:8054                      	
      85   00:8054                      fin_inicializa_variables_pruebas:
      86   00:8054  C9                  	RET
      87   00:8055                      ;;************************************************************************
      88   00:8055                      
      89   00:8055                      
      90   00:8055                      
      91   00:8055                      
      92   00:8055                      
      93   00:8055                      
      94   00:8055                      
      95   00:8055                      
      96   00:8055                      
      97   00:8055                      ;;=====================================================
      98   00:8055                      ;;DEFINICIÓN DE SUBRUTINAS
      99   00:8055                      ;;=====================================================
     100   00:8055                      	include "subrutinas.asm"
       1.  00:8055                      ;;=====================================================
       2.  00:8055                      ;;DEFINICIÓN DE SUBRUTINAS
       3.  00:8055                      ;;=====================================================	
       4.  00:8055                      
       5.  00:8055                      
       6.  00:8055                      ;;=====================================================
       7.  00:8055                      ;;INICIALIZA_NIVELES
       8.  00:8055                      ;;=====================================================	
       9.  00:8055                      ; función: 	copia la plantilla de niveles (habitaciones_plantilla) en los niveles de trabajo para el juego (habitaciones_juego)
      10.  00:8055                      ; entrada: 	habitaciones_plantilla
      11.  00:8055                      ; salida: 	habitaciones_juego
      12.  00:8055                      ; toca: 	A
      13.  00:8055                      inicializa_niveles:
      14.  00:8055  D9                  	EXX
      15.  00:8056                      	
      16.  00:8056  AF                  	XOR		 A
      17.  00:8057  06 31               	LD		 B, 49				;7 filas por 7 niveles menos el primero que lo hago diera del buble porque se suma 14 y no 16
      18.  00:8059  21 4C 99            	LD		HL, habitaciones_juego;tambíen puntero al primer nivel
      19.  00:805C  11 0E 00            	LD		DE,14
      20.  00:805F  19                  	ADD		HL,DE
      21.  00:8060  77                  	LD		(HL),A
      22.  00:8061  11 10 00            	LD		DE,16				;desde las col 15 de una fila a la siguiente
      23.  00:8064                      .bucle_borra_hab:
      24.  00:8064  19                  	ADD		HL,DE
      25.  00:8065  77                  	LD		(HL),A
      26.  00:8066  10 FC               	DJNZ	.bucle_borra_hab
      27.  00:8068                      	
      28.  00:8068  D9                  	EXX
      29.  00:8069                      fin_iniciliza_niveles:
      30.  00:8069  C9                  	RET
      31.  00:806A                      
      32.  00:806A                      
      33.  00:806A                      ;;=====================================================
      34.  00:806A                      ;;ACTUALIZA_MARCADOR_VIDAS
      35.  00:806A                      ;;=====================================================	
      36.  00:806A                      ; función:  actualiza el buffer de vidas
      37.  00:806A                      ; entrada: 	prota_vidas
      38.  00:806A                      ; salida: 	array_aux_vidas
      39.  00:806A                      ; toca:		A,B,HL
      40.  00:806A                      actualiza_marcador_vidas:
      41.  00:806A                      	;para no andar restando pongo todos los huecos a negro y luego en otro bucle las caras
      42.  00:806A                      	;1-pinto todo en blanco
      43.  00:806A  21 7B 9C            	LD		HL,array_aux_vidas
      44.  00:806D  06 08               	LD		 B,NMAXVIDREL
      45.  00:806F                      loop_marcador_caras_negro:	;asignar espacios en negro
      46.  00:806F  36 00               	LD		(HL),0			;0 posición mapa tiles para nada (es transparente pero el fondo es negro)
      47.  00:8071  23                  	INC		HL
      48.  00:8072  10 FB               	DJNZ	loop_marcador_caras_negro
      49.  00:8074                      fin_loop_marcador_caras_negro:
      50.  00:8074                      	;2-pinto las caras según el n de vidas
      51.  00:8074  3A 76 9C            	LD		 A, (prota_vidas)
      52.  00:8077  B7                  	OR		 A
      53.  00:8078  C8                  	RET 	 Z
      54.  00:8079  47                  	LD		 B, A
      55.  00:807A  21 7B 9C            	LD		HL, array_aux_vidas
      56.  00:807D                      loop_marcador_caras: ;asignar caras
      57.  00:807D  36 0D               	LD		(HL), POSCARAMAP	;13 posición mapa tiles para cara
      58.  00:807F  23                  	INC		HL
      59.  00:8080  10 FB               	DJNZ	loop_marcador_caras
      60.  00:8082                      fin_loop_marcador_caras:
      61.  00:8082                      
      62.  00:8082                      fin_actualiza_marcador_vidas:
      63.  00:8082  C9                  	RET
      64.  00:8083                      
      65.  00:8083                      
      66.  00:8083                      ;;=====================================================
      67.  00:8083                      ;;ACTUALIZA_BUFFER_RELIQUIAS
      68.  00:8083                      ;;=====================================================	
      69.  00:8083                      ; función: 	actualiza buffer de reliquias
      70.  00:8083                      ; entrada: 	prota_reliquias
      71.  00:8083                      ; salida: 	array_aux_reliquias
      72.  00:8083                      ; toca:		A,B,HL
      73.  00:8083                      actualiza_buffer_reliquias:	
      74.  00:8083                      	;para no andar restando pongo todos los huecos a negro y luego en otro bucle las reliquias
      75.  00:8083                      	;1-pinto todo en blanco
      76.  00:8083  21 83 9C            	LD		HL, array_aux_reliquias
      77.  00:8086  06 08               	LD		 B, NMAXVIDREL
      78.  00:8088  AF                  	XOR		 A
      79.  00:8089                      loop_buffer_reliquias_negro:	;asignar espacios en negro
      80.  00:8089  77                  	LD		(HL), A			;0 posición mapa tiles para nada (es transparente pero el fondo es negro)
      81.  00:808A  23                  	INC		HL
      82.  00:808B  10 FC               	DJNZ	loop_buffer_reliquias_negro
      83.  00:808D                      
      84.  00:808D                      	;2-pinto las cruces según el n de reliquias
      85.  00:808D  21 83 9C            	LD		HL, array_aux_reliquias
      86.  00:8090  3A 77 9C            	LD		 A, (prota_reliquias)
      87.  00:8093  B7                  	OR		 A
      88.  00:8094  C8                  	RET		 Z
      89.  00:8095  47                  	LD		 B, A
      90.  00:8096                      loop_buffer_reliquias: ;asignar reliquias
      91.  00:8096  36 11               	LD		(HL), POSRELIMAP	;17 posición mapa tiles para reliquia
      92.  00:8098  23                  	INC		HL
      93.  00:8099  10 FB               	DJNZ	loop_buffer_reliquias
      94.  00:809B                      fin_actualiza_buffer_reliquias:
      95.  00:809B  C9                  	RET
      96.  00:809C                      
      97.  00:809C                      
      98.  00:809C                      
      99.  00:809C                      ;;=====================================================
     100.  00:809C                      ;;LOCALIZA_INFO_HABITACION
     101.  00:809C                      ;;=====================================================	
     102.  00:809C                      ; función: 	busca las puertas que hay que pintar egún la posición del usuario y las pone en habitacion_actual
     103.  00:809C                      ; entrada: 	prota.pos_mapy, prota.pos_mapx, prota_nivel habitaciones_juego
     104.  00:809C                      ; salida: 	habitacion_actual
     105.  00:809C                      ; toca:		todo
     106.  00:809C                      ;ejemplo: nivel 4, posy 5 y posx 3
     107.  00:809C                      ;3 + 5 x 8 + 4 x 49
     108.  00:809C                      localiza_info_habitacion:
     109.  00:809C                      ;primera posición: me coloco en la columna correcta
     110.  00:809C  21 4C 99            	LD		HL, habitaciones_juego
     111.  00:809F                      .situo_columna:	
     112.  00:809F  3A 78 9C            	LD		 A, (prota_pos_mapx)
     113.  00:80A2  CB 27               	SLA		 A				;multiplico por dos ya que cada habitación va de dos en dos bytes
     114.  00:80A4  06 00               	LD		 B, 0
     115.  00:80A6  4F                  	LD		 C, A
     116.  00:80A7                      
     117.  00:80A7  09                  	ADD 	HL, BC			;sumo a la posición 0 la columnax2 en la que situarme
     118.  00:80A8                      	
     119.  00:80A8                      .situo_fila:
     120.  00:80A8  3A 79 9C            	LD		A, (prota_pos_mapy)
     121.  00:80AB  B7                  	OR	 	A
     122.  00:80AC  CA B9 80            	JP		Z, .situo_nivel	;si la fila es 0 no es necesario seguir operando en fila
     123.  00:80AF                      	
     124.  00:80AF  47                  	LD		B, A
     125.  00:80B0  AF                  	XOR		A
     126.  00:80B1                      .loop_suma_fila:
     127.  00:80B1  C6 10               	ADD		16				;cada fila tiene 16 bytes
     128.  00:80B3  10 FC               	DJNZ	.loop_suma_fila
     129.  00:80B5                      	
     130.  00:80B5  06 00               	LD		 B, 0
     131.  00:80B7  4F                  	LD		 C, A
     132.  00:80B8                      
     133.  00:80B8  09                  	ADD 	HL, BC			;sumo a la columna 16 x filas para situarme en la fila correcta
     134.  00:80B9                      
     135.  00:80B9                      .situo_nivel:
     136.  00:80B9  3A 75 9C            	LD		 A, (prota_nivel)
     137.  00:80BC  B7                  	OR	 	 A
     138.  00:80BD  CA CD 80            	JP		 Z, .actualiza_valiable_habitacion	;si el nivel es 0 al pasar por las anterirores ya estoy situado actualizo la variable y termino
     139.  00:80C0                      	
     140.  00:80C0  E5                  	PUSH	HL				;guardo el resultado intermedio
     141.  00:80C1                      	
     142.  00:80C1  47                  	LD		 B, A			;preparo la varible del bucle
     143.  00:80C2  11 70 00            	LD		DE, 112			;112 = 16x42 son los bytes de cada matriz-nivel
     144.  00:80C5  21 00 00            	LD		HL, 0
     145.  00:80C8                      .loop_suma_nivel:
     146.  00:80C8  19                  	ADD		HL,DE
     147.  00:80C9  10 FD               	DJNZ	.loop_suma_nivel
     148.  00:80CB                      	
     149.  00:80CB  D1                  	POP		DE				;devuelvo el resultado intermedio en DE que ya no lo necesito
     150.  00:80CC                      	
     151.  00:80CC  19                  	ADD		HL,DE			;sumo el resultdo del nivel al resultado intermedio anterior
     152.  00:80CD                      
     153.  00:80CD                      .actualiza_valiable_habitacion
     154.  00:80CD  7E                  	LD		 A, (HL)
     155.  00:80CE  32 4A 99            	LD		(habitacion_actual), A
     156.  00:80D1                      fin_localiza_info_habitacion:
     157.  00:80D1  C9                  	RET
     158.  00:80D2                      
     159.  00:80D2                      
     160.  00:80D2                      
     161.  00:80D2                      
     101   00:80D2                      	
     102   00:80D2                      	include "subr_pintapantalla.asm"
       1.  00:80D2                      ;;=====================================================
       2.  00:80D2                      ;;DEFINICIÓN DE SUBRUTINAS
       3.  00:80D2                      ;;=====================================================	
       4.  00:80D2                      ;relacionadas con pintado en pantalla (y no sprites)
       5.  00:80D2                      
       6.  00:80D2                      
       7.  00:80D2                      ;;=====================================================
       8.  00:80D2                      ;;COLOR_PANTALLA
       9.  00:80D2                      ;;=====================================================	
      10.  00:80D2                      ; función: 	el equivalente en basic a color 15,1,1
      11.  00:80D2                      ; entrada: 	HL	que apunta a un array de bytes con 3 bytes FORCLR, BAKCLR y BDRCLR
      12.  00:80D2                      ; salida: 	-
      13.  00:80D2                      ; toca: 	todo
      14.  00:80D2                      color_pantalla:
      15.  00:80D2  7E                  	LD		 A, (HL)			;FORCLR 
      16.  00:80D3  32 E9 F3            	LD 		(FORCLR),A
      17.  00:80D6  23                  	INC		HL
      18.  00:80D7                      	
      19.  00:80D7  7E                  	LD		 A, (HL)			;BAKCLR
      20.  00:80D8  32 EA F3            	LD 		(BAKCLR),A
      21.  00:80DB  23                  	INC		HL
      22.  00:80DC                      	
      23.  00:80DC  7E                  	LD		 A, (HL)
      24.  00:80DD  32 EB F3            	LD 		(BDRCLR),A			;BDRCLR
      25.  00:80E0  C3 62 00            	JP		CHGCLR 
      26.  00:80E3                      fin_color_pantalla:
      27.  00:80E3                      	;RET
      28.  00:80E3                      
      29.  00:80E3                      
      30.  00:80E3                      ;;=====================================================
      31.  00:80E3                      ;;PREPARAPANTALLA
      32.  00:80E3                      ;;=====================================================	
      33.  00:80E3                      ; función: elimina clic cuando se pulsa tecla, cls, screen 2,2
      34.  00:80E3                      ; entrada: -
      35.  00:80E3                      ; salida: -
      36.  00:80E3                      ; toca: si no son todos los regristros, casi todos
      37.  00:80E3                      sub_preparapantalla:
      38.  00:80E3                      	;toca A y Z
      39.  00:80E3                      elimina_clic;
      40.  00:80E3  AF                  	XOR		 A
      41.  00:80E4  32 DB F3            	LD		(CLIKSW),A
      42.  00:80E7                      fin_elimina_clic:
      43.  00:80E7                      
      44.  00:80E7                      	;toca A
      45.  00:80E7                      limpia_pantalla:
      46.  00:80E7  AF                  	XOR		 A
      47.  00:80E8  CD C3 00            	CALL 	CLS
      48.  00:80EB                      fin_limpia_pantalla:
      49.  00:80EB                      
      50.  00:80EB                      	;toca A y direcciones #F3E9/#F3EA/#F3EB, poner en HL array con 3 valores
      51.  00:80EB  21 5C 9C            	LD		HL, color_base
      52.  00:80EE  CD D2 80            	CALL	color_pantalla
      53.  00:80F1                      	
      54.  00:80F1                      	;cambiamos a SCREEN 2,2 del BASIC
      55.  00:80F1                      	;toca A
      56.  00:80F1                      screen2:
      57.  00:80F1  3E 02               	LD		 A, 2
      58.  00:80F3  CD 5F 00            	CALL	CHGMOD			;selecciona screen 2
      59.  00:80F6                      sprites_16_16:
      60.  00:80F6  3A E0 F3            	LD		 A, (RG1SAV)
      61.  00:80F9  F6 02               	OR		00000010b		;fuerza sprites de 16x16
      62.  00:80FB  32 E0 F3            	LD		(RG1SAV), A		;no lo guardamos en la copia de variables del sistema
      63.  00:80FE  47                  	LD		 B, A
      64.  00:80FF  0E 01               	LD		 C, 1
      65.  00:8101  C3 47 00            	JP		WRTVDP			;opción alternativa de escribir las tres lineas siguientes
      66.  00:8104                      	;~ CALL	WRTVDP			;lo escribe en el registro 1 del VDP
      67.  00:8104                      	;~ RET
      68.  00:8104                      fin_sub_preparapantalla:
      69.  00:8104                      	
      70.  00:8104                      
      71.  00:8104                      ;;=====================================================
      72.  00:8104                      ;;PINTA_PANTALLA_COMPLETA
      73.  00:8104                      ;;=====================================================	
      74.  00:8104                      ; función: pinta el escenario, las 3 partes
      75.  00:8104                      ; entrada: -
      76.  00:8104                      ; salida: -
      77.  00:8104                      ; toca: si no son todos los regristros, casi todos
      78.  00:8104                      pinta_pantalla_completa:
      79.  00:8104  CD 0B 81            	CALL 	pinta_parte_superior_pantalla
      80.  00:8107                      	
      81.  00:8107  CD 42 81            	CALL 	pinta_parte_inferior_pantalla	
      82.  00:810A                      fin_pinta_pantalla_completa:
      83.  00:810A  C9                  	RET
      84.  00:810B                      
      85.  00:810B                      
      86.  00:810B                      ;;=====================================================
      87.  00:810B                      ;;PINTA_PARTE_SUPERIOR_PANTALLA
      88.  00:810B                      ;;=====================================================	
      89.  00:810B                      ; función: pinta el escenario, las 2 partes superiores y actualiza puertas
      90.  00:810B                      ; entrada: -
      91.  00:810B                      ; salida: -
      92.  00:810B                      ; toca: si no son todos los regristros, casi todos
      93.  00:810B                      pinta_parte_superior_pantalla:
      94.  00:810B                      
      95.  00:810B                      ;************** preguntar cómo parametrizar esto **********************************************
      96.  00:810B                      
      97.  00:810B                      	;cangando banco 1
      98.  00:810B                      	;cargamos los patrones
      99.  00:810B  21 EB 9D            	LD		HL, tiles_patrones_pantalla11
     100.  00:810E  11 00 00            	LD		DE, CHRTBL
     101.  00:8111  CD 4A 96            	CALL	depack_VRAM
     102.  00:8114                      	;cargamos mapa de pantalla
     103.  00:8114  21 26 9E            	LD		HL, tiles_mapa_pantalla11
     104.  00:8117  11 00 18            	LD		DE, TILMAP
     105.  00:811A  CD 4A 96            	CALL	depack_VRAM
     106.  00:811D                      	;cargamos los colores de los patrones
     107.  00:811D  21 0E 9E            	LD		HL, tiles_color_pantalla11
     108.  00:8120  11 00 20            	LD		DE, CLRTBL
     109.  00:8123  CD 4A 96            	CALL	depack_VRAM
     110.  00:8126                      	
     111.  00:8126                      	;cangando banco 2
     112.  00:8126                      	;cargamos los patrones
     113.  00:8126  21 EB 9D            	LD		HL, tiles_patrones_pantalla12
     114.  00:8129  11 00 08            	LD		DE, CHRTBL + #0800
     115.  00:812C  CD 4A 96            	CALL	depack_VRAM	
     116.  00:812F                      	;cargamos mapa de pantalla
     117.  00:812F  21 40 9E            	LD		HL, tiles_mapa_pantalla12
     118.  00:8132  11 00 19            	LD		DE, TILMAP + #0100
     119.  00:8135  CD 4A 96            	CALL	depack_VRAM
     120.  00:8138                      	;cargamos los colores de los patrones
     121.  00:8138  21 0E 9E            	LD		HL, tiles_color_pantalla12
     122.  00:813B  11 00 28            	LD		DE, CLRTBL + #0800
     123.  00:813E                      	;JP		depack_VRAM
     124.  00:813E  CD 4A 96            	CALL	depack_VRAM
     125.  00:8141                      fin_pinta_parte_superior_pantalla:
     126.  00:8141  C9                  	RET
     127.  00:8142                      
     128.  00:8142                      
     129.  00:8142                      ;;=====================================================
     130.  00:8142                      ;;PINTA_PARTE_INFERIOR_PANTALLA
     131.  00:8142                      ;;=====================================================	
     132.  00:8142                      ; función: pinta la parte inferior del escenario que es común
     133.  00:8142                      ; entrada: -
     134.  00:8142                      ; salida: -
     135.  00:8142                      ; toca: si no son todos los regristros, casi todos
     136.  00:8142                      pinta_parte_inferior_pantalla:
     137.  00:8142                      	;cangando banco 3
     138.  00:8142                      	;cargamos los patrones
     139.  00:8142  21 6A 9E            	LD		HL,tiles_patrones_pantalla3
     140.  00:8145  11 00 10            	LD		DE,CHRTBL + #1000
     141.  00:8148  CD 4A 96            	CALL	depack_VRAM	
     142.  00:814B                      	;cargamos mapa de pantalla
     143.  00:814B  21 E5 9F            	LD		HL,tiles_mapa_pantalla3
     144.  00:814E  11 00 1A            	LD		DE,TILMAP + #0200
     145.  00:8151  CD 4A 96            	CALL	depack_VRAM
     146.  00:8154                      	;cargamos los colores de los patrones
     147.  00:8154  21 B0 9F            	LD		HL,tiles_color_pantalla3
     148.  00:8157  11 00 30            	LD		DE,CLRTBL + #1000
     149.  00:815A  C3 4A 96            	JP		depack_VRAM
     150.  00:815D                      	;~ CALL	depack_VRAM
     151.  00:815D                      fin_pinta_parte_inferior_pantalla:
     152.  00:815D                      	;~ RET
     153.  00:815D                      
     154.  00:815D                      
     155.  00:815D                      
     156.  00:815D                      ;;=====================================================
     157.  00:815D                      ;;PINTA_VIDAS
     158.  00:815D                      ;;=====================================================	
     159.  00:815D                      ; función: 	actualiza el mapa de tiles para que en el próximo refresco se pinten y actualiza_vidas
     160.  00:815D                      ; entrada: 	array_aux_vidas
     161.  00:815D                      ; salida: 	actualiza_vidas_sn
     162.  00:815D                      ; toca:		todo
     163.  00:815D                      pinta_vidas:
     164.  00:815D  CD 6A 80            	CALL	actualiza_marcador_vidas
     165.  00:8160                      	
     166.  00:8160  21 7B 9C            	LD		HL, array_aux_vidas
     167.  00:8163  11 48 1A            	LD		DE, TILMAP + POSVIDAS 	;inicio posición en el mapa de tiles de las vidas
     168.  00:8166  01 08 00            	LD		BC, NMAXVIDREL			;hay 8 posiciones para vidas/reliquias o espacios en negro si no tiene 8 vidas/reliquias
     169.  00:8169  C3 5C 00            	JP		LDIRVM
     170.  00:816C                      fin_pinta_vidas:
     171.  00:816C                      	;RET
     172.  00:816C                      	
     173.  00:816C                      	
     174.  00:816C                      
     175.  00:816C                      ;;=====================================================
     176.  00:816C                      ;;PINTA_RELIQUIAS
     177.  00:816C                      ;;=====================================================	
     178.  00:816C                      ; función: 	actualiza el mapa de tiles para que en el próximo refresco se pinten y actualiza_reliquias
     179.  00:816C                      ; entrada: 	array_aux_reliquias
     180.  00:816C                      ; salida: 	-
     181.  00:816C                      ; toca:		todo
     182.  00:816C                      pinta_reliquias:
     183.  00:816C  CD 83 80            	CALL	actualiza_buffer_reliquias
     184.  00:816F                      	
     185.  00:816F  21 83 9C            	LD		HL, array_aux_reliquias
     186.  00:8172  11 C8 1A            	LD		DE, TILMAP + POSRELIQ 	;inicio posición en el mapa de tiles de las vidas
     187.  00:8175  01 08 00            	LD		BC, NMAXVIDREL			;hay 8 posiciones para vidas/reliquias o espacios en negro si no tiene 8 vidas/reliquias
     188.  00:8178  C3 5C 00            	JP		LDIRVM
     189.  00:817B                      fin_pinta_reliquias:
     190.  00:817B                      	;RET
     191.  00:817B                      	
     192.  00:817B                      
     193.  00:817B                      
     194.  00:817B                      	
     195.  00:817B                      ;;=====================================================
     196.  00:817B                      ;;PINTA_NIVEL
     197.  00:817B                      ;;=====================================================	
     198.  00:817B                      ; función: 	actualiza el nivel en la parte de puntuación
     199.  00:817B                      ; entrada: 	prota_nivel
     200.  00:817B                      ; salida: 	-
     201.  00:817B                      ; toca:		HL,DE,BC
     202.  00:817B                      pinta_nivel:	
     203.  00:817B                      	;forma más avanzada sin llamada a la bios
     204.  00:817B  01 B4 1A            	LD		BC,TILMAP + POSNIVEL ;posición en el mapa de tiles del tile de nivel
     205.  00:817E  3A 75 9C            	LD		 A, (prota_nivel)	;seleccionando la pos del banco de tiles a poner en el mapa
     206.  00:8181  C6 30               	ADD		'0'	
     207.  00:8183  57                  	LD		 D, A
     208.  00:8184                      	
     209.  00:8184  CD 88 81            	CALL	pinta_tile_suelto	;nota ... un call+ret se debe poder sustiruir por un jp
     210.  00:8187                      fin_pinta_nivel:
     211.  00:8187  C9                  	RET
     212.  00:8188                      
     213.  00:8188                      
     214.  00:8188                      
     215.  00:8188                      ;;=====================================================
     216.  00:8188                      ;;PINTA_TILE_SUELTO
     217.  00:8188                      ;;=====================================================	
     218.  00:8188                      ; función: 	pinta al tile que digamos en D, en la posición BC
     219.  00:8188                      ; entrada: 	BC (posición a pintar en el mapa),D (qué se va a pintar el esa posición)
     220.  00:8188                      ; salida: 	-
     221.  00:8188                      ; toca:		-
     222.  00:8188                      pinta_tile_suelto:
     223.  00:8188  DB 99               	IN		 A,(REGEST)		;leer registro de estado (recomendado)
     224.  00:818A  79                  	LD		 A,C			;primero byte bajo	
     225.  00:818B  D3 99               	OUT		(REGEST),A
     226.  00:818D  78                  	LD		 A,B			;después byte alto  ********************** preguntar a Fernando cómo que byte bajo es B
     227.  00:818E  F6 40               	OR		1000000b		;+64
     228.  00:8190  D3 99               	OUT		(REGEST),A
     229.  00:8192                      	
     230.  00:8192  7A                  	LD		A,D
     231.  00:8193  D3 98               	OUT		(REGESCVDP),A	;escribe A en VRAM en la posición indicada por los dos OUT anteriores
     232.  00:8195                      fin_pinta_tile_suelto:
     233.  00:8195  C9                  	RET
     234.  00:8196                      
     235.  00:8196                      
     236.  00:8196                      
     237.  00:8196                      
     238.  00:8196                      
     239.  00:8196                      ;;=====================================================
     240.  00:8196                      ;;MIRA_PINTA ENERGIA
     241.  00:8196                      ;;=====================================================	
     242.  00:8196                      ; función: 	actualiza el nivel de energia en la parte de puntuación
     243.  00:8196                      ; nota:		el cuadrado más bajo de ejergía siempre estará pintado... se obviará
     244.  00:8196                      ; entrada: 	prota.energia, array_aux_energia
     245.  00:8196                      ; salida: 	-
     246.  00:8196                      ; toca:		ninguno porque usa EXX
     247.  00:8196                      
     248.  00:8196                      ; nota importante... lo mismo interesa hacer esto con un array para comparar y un bucle
     249.  00:8196                      
     250.  00:8196                      
     251.  00:8196                      mira_pinta_energia:
     252.  00:8196  D9                  	EXX							;por si acaso guardo el contenido de HL (si veo que no es necesario guardarlo lo quito) uso esto en vez de push por el nº ciclos
     253.  00:8197                      	
     254.  00:8197  3A 7A 9C            	LD		 A,(prota_energia) 	;para las comparaciones A variable (actual) y B fijo (limites)
     255.  00:819A                      
     256.  00:819A  0E 00               	LD		 C,TILENEGRO		;para agilizar asignaciones en vez de un valor cte uso otro registro
     257.  00:819C                      pinta_ener:
     258.  00:819C                      pinta_ener_tile_8:
     259.  00:819C  21 92 9C            	LD		HL,ultimo_pos_array_aux_energia	;coloco puntero en array e iré decrementando
     260.  00:819F  06 D9               	LD		 B,TILEENERG8
     261.  00:81A1  B8                  	CP		 B
     262.  00:81A2  38 04               	JR		C,pinta_ener_tile_8_negro
     263.  00:81A4  36 0E               	LD		(HL),TILEMAPVERD
     264.  00:81A6  18 01               	JR		pinta_ener_tile_7
     265.  00:81A8                      pinta_ener_tile_8_negro:
     266.  00:81A8  71                  	LD		(HL),C
     267.  00:81A9                      
     268.  00:81A9                      pinta_ener_tile_7:
     269.  00:81A9  2B                  	DEC		HL
     270.  00:81AA  06 BA               	LD		 B,TILEENERG7
     271.  00:81AC  B8                  	CP		 B
     272.  00:81AD  38 04               	JR		C,pinta_ener_tile_7_negro
     273.  00:81AF  36 0E               	LD		(HL),TILEMAPVERD
     274.  00:81B1  18 01               	JR		pinta_ener_tile_6
     275.  00:81B3                      pinta_ener_tile_7_negro:
     276.  00:81B3  71                  	LD		(HL),C
     277.  00:81B4                      
     278.  00:81B4                      pinta_ener_tile_6:
     279.  00:81B4  2B                  	DEC		HL
     280.  00:81B5  06 9B               	LD		 B,TILEENERG6
     281.  00:81B7  B8                  	CP		 B
     282.  00:81B8  38 04               	JR		C,pinta_ener_tile_6_negro
     283.  00:81BA  36 0E               	LD		(HL),14
     284.  00:81BC  18 01               	JR		pinta_ener_tile_5
     285.  00:81BE                      pinta_ener_tile_6_negro:
     286.  00:81BE  71                  	LD		(HL),C
     287.  00:81BF                      
     288.  00:81BF                      pinta_ener_tile_5:
     289.  00:81BF  2B                  	DEC		HL
     290.  00:81C0  06 7C               	LD		 B,TILEENERG5
     291.  00:81C2  B8                  	CP		 B
     292.  00:81C3  38 04               	JR		C,pinta_ener_tile_5_negro
     293.  00:81C5  36 0E               	LD		(HL),TILEMAPVERD
     294.  00:81C7  18 01               	JR		pinta_ener_tile_4
     295.  00:81C9                      pinta_ener_tile_5_negro:
     296.  00:81C9  71                  	LD		(HL),C
     297.  00:81CA                      
     298.  00:81CA                      pinta_ener_tile_4:
     299.  00:81CA  2B                  	DEC		HL
     300.  00:81CB  06 5D               	LD		 B,TILEENERG4
     301.  00:81CD  B8                  	CP		 B
     302.  00:81CE  38 04               	JR		C,pinta_ener_tile_4_negro
     303.  00:81D0  36 0F               	LD		(HL),TILEMAPAMAR
     304.  00:81D2  18 01               	JR		pinta_ener_tile_3
     305.  00:81D4                      pinta_ener_tile_4_negro:
     306.  00:81D4  71                  	LD		(HL),C
     307.  00:81D5                      	
     308.  00:81D5                      pinta_ener_tile_3:
     309.  00:81D5  2B                  	DEC		HL
     310.  00:81D6  06 3E               	LD		 B,TILEENERG3
     311.  00:81D8  B8                  	CP		 B
     312.  00:81D9  38 04               	JR		C,pinta_ener_tile_3_negro
     313.  00:81DB  36 0F               	LD		(HL),TILEMAPAMAR
     314.  00:81DD  18 01               	JR		pinta_ener_tile_2
     315.  00:81DF                      pinta_ener_tile_3_negro:
     316.  00:81DF  71                  	LD		(HL),C
     317.  00:81E0                      
     318.  00:81E0                      pinta_ener_tile_2:
     319.  00:81E0  2B                  	DEC		HL
     320.  00:81E1  06 1F               	LD		 B,TILEENERG2
     321.  00:81E3  B8                  	CP		 B
     322.  00:81E4  38 04               	JR		C,pinta_ener_tile_2_negro
     323.  00:81E6  36 10               	LD		(HL),TILEMAPROJO
     324.  00:81E8  18 01               	JR		fin_mira_pinta_energia		;siempre estará pintado el cuadro mínimo
     325.  00:81EA                      pinta_ener_tile_2_negro:
     326.  00:81EA  71                  	LD		(HL),C
     327.  00:81EB                      
     328.  00:81EB                      fin_mira_pinta_energia:
     329.  00:81EB  D9                  	EXX
     330.  00:81EC  C9                  	RET
     331.  00:81ED                      
     332.  00:81ED                      
     333.  00:81ED                      ;;=====================================================
     334.  00:81ED                      ;;PINTA_ENERGIA
     335.  00:81ED                      ;;=====================================================	
     336.  00:81ED                      ; función: 	actualiza el mapa de tiles para que en el próximo refresco se pinte la barra de energia actual
     337.  00:81ED                      ; entrada: 	array_aux_energia
     338.  00:81ED                      ; toca:		todo
     339.  00:81ED                      pinta_energia:
     340.  00:81ED  CD 96 81            	CALL	mira_pinta_energia
     341.  00:81F0                      	
     342.  00:81F0  21 8B 9C            	LD		HL, array_aux_energia
     343.  00:81F3  11 88 1A            	LD		DE, TILMAP + POSENERG 	;inicio posición en el mapa de tiles de las vidas
     344.  00:81F6  01 08 00            	LD		BC, NMAXVIDREL			;hay 8 posiciones para vidas/reliquias o espacios en negro si no tiene 8 vidas/reliquias
     345.  00:81F9  C3 5C 00            	JP		LDIRVM
     346.  00:81FC                      fin_pinta_energia:
     347.  00:81FC                      	;RET
     348.  00:81FC                      
     349.  00:81FC                      
     350.  00:81FC                      
     351.  00:81FC                      ;;=====================================================
     352.  00:81FC                      ;;BORRA_MAPA
     353.  00:81FC                      ;;=====================================================	
     354.  00:81FC                      ; función: 	pone todas las habitaciones del mapa a negro (los tiles del mapa los rellena con un array a 0 - caracter en negro)
     355.  00:81FC                      ; entrada: 	array_aux_mapa_limpiar
     356.  00:81FC                      ; salida: 	-
     357.  00:81FC                      ; toca:		AF
     358.  00:81FC                      borra_mapa:
     359.  00:81FC  D9                  	EXX
     360.  00:81FD                      	
     361.  00:81FD  21 93 9C            	LD		HL,array_aux_mapa_limpiar
     362.  00:8200  11 F8 1A            	LD		DE,TILMAP + POSMAPLIN1 	;inicio posición en el mapa de tiles de la primera fila del mapa
     363.  00:8203  01 07 00            	LD		BC,NHABNIVEL			;cada nivel son 7 filas con 7 habitaciones "posibles"
     364.  00:8206  CD 5C 00            	CALL	LDIRVM
     365.  00:8209                      	
     366.  00:8209  21 93 9C            	LD		HL,array_aux_mapa_limpiar
     367.  00:820C  11 D8 1A            	LD		DE,TILMAP + POSMAPLIN2
     368.  00:820F  01 07 00            	LD		BC,NHABNIVEL
     369.  00:8212  CD 5C 00            	CALL	LDIRVM
     370.  00:8215                      
     371.  00:8215  21 93 9C            	LD		HL,array_aux_mapa_limpiar
     372.  00:8218  11 B8 1A            	LD		DE,TILMAP + POSMAPLIN3
     373.  00:821B  01 07 00            	LD		BC,NHABNIVEL
     374.  00:821E  CD 5C 00            	CALL	LDIRVM
     375.  00:8221                      
     376.  00:8221  21 93 9C            	LD		HL,array_aux_mapa_limpiar	
     377.  00:8224  11 98 1A            	LD		DE,TILMAP + POSMAPLIN4
     378.  00:8227  01 07 00            	LD		BC,NHABNIVEL
     379.  00:822A  CD 5C 00            	CALL	LDIRVM
     380.  00:822D                      
     381.  00:822D  21 93 9C            	LD		HL,array_aux_mapa_limpiar	
     382.  00:8230  11 78 1A            	LD		DE,TILMAP + POSMAPLIN5
     383.  00:8233  01 07 00            	LD		BC,NHABNIVEL
     384.  00:8236  CD 5C 00            	CALL	LDIRVM
     385.  00:8239                      
     386.  00:8239  21 93 9C            	LD		HL,array_aux_mapa_limpiar	
     387.  00:823C  11 58 1A            	LD		DE,TILMAP + POSMAPLIN6
     388.  00:823F  01 07 00            	LD		BC,NHABNIVEL
     389.  00:8242  CD 5C 00            	CALL	LDIRVM
     390.  00:8245                      
     391.  00:8245  21 93 9C            	LD		HL,array_aux_mapa_limpiar	
     392.  00:8248  11 38 1A            	LD		DE,TILMAP + POSMAPLIN7
     393.  00:824B  01 07 00            	LD		BC,NHABNIVEL
     394.  00:824E  CD 5C 00            	CALL	LDIRVM
     395.  00:8251                      	
     396.  00:8251  D9                  	EXX
     397.  00:8252                      fin_borra_mapa:
     398.  00:8252  C9                  	RET
     399.  00:8253                      
     400.  00:8253                      
     401.  00:8253                      
     402.  00:8253                      
     403.  00:8253                      
     404.  00:8253                      
     405.  00:8253                      
     406.  00:8253                      
     407.  00:8253                      
     408.  00:8253                      ;=====================================================
     409.  00:8253                      ;;PINTA_ARRAY
     410.  00:8253                      ;;=====================================================	
     411.  00:8253                      ;;;funcion:  se le pasa un array con posiciones de tiles y coordenadas x e y y los pinta en screen 2
     412.  00:8253                      ;;entrada:	wordaux1 (pos inicio sc2 donde pintar) y wordaux2 (puntero al array a pintar), BC (posición en tilemap) , D filas y E columnas
     413.  00:8253                      ;;salida:	-
     414.  00:8253                      ;;importante: necesita de una variable wordaux1 tipo WD (wordaux1: 	DW	0)
     415.  00:8253                      ;; ejemplo llamada:
     416.  00:8253                      	;~ LD		HL,array_tiles					;guardo puntero al array a pintar (como psar por referencia)
     417.  00:8253                      	;~ LD		(wordaux2),HL					;en la variable wordaux2
     418.  00:8253                      	;~ LD		HL,SC2MAP + 256 + 32			;calcula posición en tilemap
     419.  00:8253                      	;~ LD		(wordaux1),HL					;guarda valor pos tilemap en wordaux1
     420.  00:8253                      	;~ LD		B,H								;coloca posición tilemap BC
     421.  00:8253                      	;~ LD		C,L
     422.  00:8253                      	;~ LD		D,2								;nº de filas
     423.  00:8253                      	;~ LD		E,3								;nº de columnas
     424.  00:8253                      	;~ CALL	pinta_array
     425.  00:8253                      
     426.  00:8253                      pinta_array:
     427.  00:8253  F5                  	PUSH	AF
     428.  00:8254                      	
     429.  00:8254                      	;contamos con que la posición "global" en el tilemap está ya en BC
     430.  00:8254                      	;y el puntero al array a pintar en wordaux2 y la posición en tilemap sc2 en wordaux1
     431.  00:8254                      	;inicializa
     432.  00:8254  DB 99               	IN		 A,(REGEST)		;leer registro de estado (recomendado)
     433.  00:8256                      	
     434.  00:8256                      	;coloca puntero para pintar tile según BC
     435.  00:8256  79                  	LD		 A,C			;primero byte bajo	
     436.  00:8257  D3 99               	OUT		(REGEST),A
     437.  00:8259  78                  	LD		 A,B			;después byte alto  ********************** preguntar a Fernando cómo que byte bajo es B
     438.  00:825A  F6 40               	OR		1000000b		;+64
     439.  00:825C  D3 99               	OUT		(REGEST),A
     440.  00:825E                      
     441.  00:825E                      	
     442.  00:825E  2A 88 82            	LD		HL,(wordaux2)	;HL es lo que se pintará y le he pasado el puntero del array tilemap a pintar
     443.  00:8261                      .pa_pinta_fila:
     444.  00:8261  43                  	LD		 B,E
     445.  00:8262                      .pa_pinta_columnas: 		;finta la fila (pintando las columnas)
     446.  00:8262  7E                  	LD		 A,(HL)
     447.  00:8263  D3 98               	OUT		(REGESCVDP),A	;escribe A en VRAM en la posición indicada por los dos OUT anteriores
     448.  00:8265  23                  	INC		HL
     449.  00:8266  10 FA               	DJNZ	.pa_pinta_columnas
     450.  00:8268                      	
     451.  00:8268                      	;no es una solución elegante lo de repetir código pero queda claro
     452.  00:8268                      	;por si hay otra fila
     453.  00:8268  E5                  	PUSH	HL
     454.  00:8269  2A 86 82            	LD		HL,(wordaux1)
     455.  00:826C  01 20 00            	LD		BC,32
     456.  00:826F  09                  	ADD		HL,BC
     457.  00:8270  22 86 82            	LD		(wordaux1),HL
     458.  00:8273  44                  	LD		B,H
     459.  00:8274  4D                  	LD		C,L
     460.  00:8275  E1                  	POP		HL
     461.  00:8276                      	
     462.  00:8276  79                  	LD		 A,C			;primero byte bajo	
     463.  00:8277  D3 99               	OUT		(REGEST),A
     464.  00:8279  78                  	LD		 A,B			;después byte alto 
     465.  00:827A  F6 40               	OR		1000000b		;+64
     466.  00:827C  D3 99               	OUT		(REGEST),A
     467.  00:827E                      	
     468.  00:827E                      	;si hay otra fila repite
     469.  00:827E  15                  	DEC		 D
     470.  00:827F  7A                  	LD		 A,D		;¿hay otra fila?
     471.  00:8280  B7                  	OR		 A
     472.  00:8281  C2 61 82            	JP		NZ,.pa_pinta_fila
     473.  00:8284                      	
     474.  00:8284  F1                  	POP		AF
     475.  00:8285                      	
     476.  00:8285                      fin_pinta_array:
     477.  00:8285  C9                  	RET
     478.  00:8286                      ;;variables asocidas a la función (no sé si dejarlo aquí y encapsularlo todo o hacerla reutilizable)
     479.  00:8286                      ;; por de pronto la dejo aquí
     480.  00:8286  00 00               wordaux1:		DW	0	;almacena la posición en el tilemap 0 al 675
     481.  00:8288  00 00               wordaux2:		DW	0	;almacena puntero a array de tiles (posiciones en realidad) a pintar (posiciones repetidas en los 3 bancos)
     482.  00:828A                      
     483.  00:828A                      
     484.  00:828A                      
     485.  00:828A                      
     486.  00:828A                      
     487.  00:828A                      ;;=====================================================
     488.  00:828A                      ;;PINTA_PUERTAS
     489.  00:828A                      ;;=====================================================	
     490.  00:828A                      ; función: 	examina A y mira si tiene que pintar puertas de los lados, arriba o abrajo o las escaleras (o no)
     491.  00:828A                      ; entrada: 	habitacion_actual 1 escalera 1 puerta arriba 1 pu der 1 pu aba 1 pu izq (si es 0 pinta pared)
     492.  00:828A                      ; salida: 	-
     493.  00:828A                      ; toca:		todo
     494.  00:828A                      pinta_puertas:
     495.  00:828A  CD 0B 81            	CALL	pinta_parte_superior_pantalla	;pinta pasillo y paredes
     496.  00:828D                      
     497.  00:828D  CD 9C 80            	CALL	localiza_info_habitacion	;busca qué puertas debe pintar y lo mete en habitación_actual
     498.  00:8290                      	
     499.  00:8290  3A 4A 99            	LD		 A, (habitacion_actual)		;se mete en A porque la función pide A y para no buscar el valor 4 veces
     500.  00:8293                      
     501.  00:8293                      ;	BIT		 4, A
     502.  00:8293                      ;	CALL	nz, pinta_escalera
     503.  00:8293                      
     504.  00:8293  CB 5F               	BIT		 3, A
     505.  00:8295  C4 BD 82            	CALL	nz, pinta_puerta_arr
     506.  00:8298                      
     507.  00:8298  CB 57               	BIT		 2, A
     508.  00:829A  C4 D2 82            	CALL	nz, pinta_puerta_der
     509.  00:829D                      
     510.  00:829D  CB 4F               	BIT		 1, A
     511.  00:829F  C4 A8 82            	CALL	nz, pinta_puerta_aba
     512.  00:82A2                      	
     513.  00:82A2  CB 47               	BIT		 0, A
     514.  00:82A4  C4 E7 82            	CALL	nz, pinta_puerta_izq
     515.  00:82A7                      
     516.  00:82A7                      	;; sustituir el último call por jp *************************************************
     517.  00:82A7                      fin_pinta_puertas:
     518.  00:82A7  C9                  	RET
     519.  00:82A8                      
     520.  00:82A8                      
     521.  00:82A8                      
     522.  00:82A8                      
     523.  00:82A8                      ;;=====================================================
     524.  00:82A8                      ;;PINTA_PUERTA_ABA
     525.  00:82A8                      ;;=====================================================	
     526.  00:82A8                      ; función: 	pinta la puerta de abajo
     527.  00:82A8                      ; entrada: 	array_puerta_abajo, wordaux2, wordaux1
     528.  00:82A8                      ; salida: 	-
     529.  00:82A8                      ; toca:		HL,BC, DE
     530.  00:82A8                      pinta_puerta_aba:
     531.  00:82A8  21 C4 9C            	LD		HL,array_puerta_abajo			;guardo puntero al array a pintar (como psar por referencia)
     532.  00:82AB  22 88 82            	LD		(wordaux2),HL					;en la variable wordaux2
     533.  00:82AE  21 EE 19            	LD		HL,TILMAP + POSPUERABAJ			;calcula posición en tilemap
     534.  00:82B1  22 86 82            	LD		(wordaux1),HL					;guarda valor pos tilemap en wordaux1
     535.  00:82B4  44                  	LD		B,H								;coloca posición tilemap BC
     536.  00:82B5  4D                  	LD		C,L
     537.  00:82B6  16 01               	LD		D,1								;nº de filas
     538.  00:82B8  1E 04               	LD		E,4								;nº de columnas
     539.  00:82BA  C3 53 82            	JP		pinta_array
     540.  00:82BD                      	;~ CALL	pinta_array
     541.  00:82BD                      fin_pinta_puerta_aba:
     542.  00:82BD                      	;~ RET
     543.  00:82BD                      
     544.  00:82BD                      ;;=====================================================
     545.  00:82BD                      ;;PINTA_PUERTA_ARR
     546.  00:82BD                      ;;=====================================================	
     547.  00:82BD                      ; función: 	pinta la puerta de arriba
     548.  00:82BD                      ; entrada: 	array_puerta_arriba, wordaux2, wordaux1
     549.  00:82BD                      ; salida: 	-
     550.  00:82BD                      ; toca:		HL,BC, DE
     551.  00:82BD                      pinta_puerta_arr:
     552.  00:82BD  21 9B 9C            	LD		HL,array_puerta_arriba			;guardo puntero al array a pintar (como psar por referencia)
     553.  00:82C0  22 88 82            	LD		(wordaux2),HL					;en la variable wordaux2
     554.  00:82C3  21 8E 18            	LD		HL,TILMAP + POSPUERARRI			;calcula posición en tilemap
     555.  00:82C6  22 86 82            	LD		(wordaux1),HL					;guarda valor pos tilemap en wordaux1
     556.  00:82C9  44                  	LD		B,H								;coloca posición tilemap BC
     557.  00:82CA  4D                  	LD		C,L
     558.  00:82CB  16 05               	LD		D,5								;nº de filas
     559.  00:82CD  1E 04               	LD		E,4								;nº de columnas
     560.  00:82CF  C3 53 82            	JP		pinta_array
     561.  00:82D2                      	;~ CALL	pinta_array
     562.  00:82D2                      fin_pinta_puerta_arr:
     563.  00:82D2                      	;~ RET
     564.  00:82D2                      
     565.  00:82D2                      ;;=====================================================
     566.  00:82D2                      ;;PINTA_PUERTA_DER
     567.  00:82D2                      ;;=====================================================	
     568.  00:82D2                      ; función: 	pinta la puerta de la derecha
     569.  00:82D2                      ; entrada: 	array_puerta_derecha, wordaux2, wordaux1
     570.  00:82D2                      ; salida: 	-
     571.  00:82D2                      ; toca:		HL,BC, DE
     572.  00:82D2                      pinta_puerta_der:
     573.  00:82D2  21 AF 9C            	LD		HL,array_puerta_derecha			;guardo puntero al array a pintar (como psar por referencia)
     574.  00:82D5  22 88 82            	LD		(wordaux2),HL					;en la variable wordaux2
     575.  00:82D8  21 FC 18            	LD		HL,TILMAP + POSPUERDERE			;calcula posición en tilemap
     576.  00:82DB  22 86 82            	LD		(wordaux1),HL					;guarda valor pos tilemap en wordaux1
     577.  00:82DE  44                  	LD		B,H								;coloca posición tilemap BC
     578.  00:82DF  4D                  	LD		C,L
     579.  00:82E0  16 07               	LD		D,7								;nº de filas
     580.  00:82E2  1E 03               	LD		E,3								;nº de columnas
     581.  00:82E4  C3 53 82            	JP		pinta_array
     582.  00:82E7                      	;~ CALL	pinta_array
     583.  00:82E7                      fin_pinta_puerta_der:
     584.  00:82E7                      	;~ RET
     585.  00:82E7                      	
     586.  00:82E7                      ;;=====================================================
     587.  00:82E7                      ;;PINTA_PUERTA_IZQ
     588.  00:82E7                      ;;=====================================================	
     589.  00:82E7                      ; función: 	pinta la puerta de la izquierda
     590.  00:82E7                      ; entrada: 	array_puerta_izquierda, wordaux2, wordaux1
     591.  00:82E7                      ; salida: 	-
     592.  00:82E7                      ; toca:		HL,BC, DE
     593.  00:82E7                      pinta_puerta_izq:
     594.  00:82E7  21 C8 9C            	LD		HL,array_puerta_izquierda		;guardo puntero al array a pintar (como psar por referencia)
     595.  00:82EA  22 88 82            	LD		(wordaux2),HL					;en la variable wordaux2
     596.  00:82ED  21 E1 18            	LD		HL,TILMAP + POSPUERIZQU			;calcula posición en tilemap
     597.  00:82F0  22 86 82            	LD		(wordaux1),HL					;guarda valor pos tilemap en wordaux1
     598.  00:82F3  44                  	LD		B,H								;coloca posición tilemap BC
     599.  00:82F4  4D                  	LD		C,L
     600.  00:82F5  16 07               	LD		D,7								;nº de filas
     601.  00:82F7  1E 03               	LD		E,3								;nº de columnas
     602.  00:82F9  C3 53 82            	JP		pinta_array
     603.  00:82FC                      	;~ CALL	pinta_array
     604.  00:82FC                      fin_pinta_puerta_izq:
     605.  00:82FC                      	;~ RET
     606.  00:82FC                      
     607.  00:82FC                      
     608.  00:82FC                      
     609.  00:82FC                      
     610.  00:82FC                      
     611.  00:82FC                      ;;=====================================================
     612.  00:82FC                      ;;POSICIONA_EN_MAPA
     613.  00:82FC                      ;;=====================================================	
     614.  00:82FC                      ; función: 	en el mapa de marcadores de la derecha/abajo marca un cuadro en gris o con un muñeco
     615.  00:82FC                      ;			según el valor de prota.posición pinta entrá un muñeco y por donde vaya pasando el prota
     616.  00:82FC                      ;			quedará en gris
     617.  00:82FC                      ; entrada: 	elemento_pintar_mapa, prota_pos_mapy, prota_pos_mapx
     618.  00:82FC                      ; salida: 	-
     619.  00:82FC                      ; toca:		todos
     620.  00:82FC                      posiciona_en_mapa:
     621.  00:82FC                      	;#0238 es la posición en mapa de tiles de la esquina superior izquierda del mapa (569 en decimal)
     622.  00:82FC  21 38 1A            	LD		HL, TILMAP + POSMAPA;pos inicial
     623.  00:82FF                      	
     624.  00:82FF                      	;ahora se le calcula la fila a pintar ya que va de abajo a arriba y no como en el mapa + columna
     625.  00:82FF                      .sumar_fila:
     626.  00:82FF  3A 79 9C            	LD		 A,(prota_pos_mapy)
     627.  00:8302  FE 01               	CP		 1
     628.  00:8304  28 2A               	JR		 Z, .fila_1
     629.  00:8306  3A 79 9C            	LD		 A,(prota_pos_mapy)
     630.  00:8309  FE 02               	CP		 2
     631.  00:830B  28 2A               	JR		 Z, .fila_2
     632.  00:830D  3A 79 9C            	LD		 A,(prota_pos_mapy)
     633.  00:8310  FE 03               	CP		 3
     634.  00:8312  28 2A               	JR		 Z, .fila_3
     635.  00:8314  3A 79 9C            	LD		 A,(prota_pos_mapy)
     636.  00:8317  FE 04               	CP		 4
     637.  00:8319  28 2A               	JR		 Z, .fila_4
     638.  00:831B  3A 79 9C            	LD		 A,(prota_pos_mapy)
     639.  00:831E  FE 05               	CP		 5
     640.  00:8320  28 2A               	JR		 Z, .fila_5
     641.  00:8322  3A 79 9C            	LD		 A,(prota_pos_mapy)
     642.  00:8325  FE 06               	CP		 6
     643.  00:8327  28 2A               	JR		 Z, .sumar_columna
     644.  00:8329                      	;no consulto la 0 porque si no es ninguna de las anteriores es 0 y por tanto sería un jr fila_0
     645.  00:8329                      	
     646.  00:8329                      .fila_0:
     647.  00:8329  11 C0 00            	LD		DE, 192
     648.  00:832C  19                  	ADD		HL, DE			;nota: se que repito el ADD pero la otra opción es inicializar DE y ya tarda mucho la funicón (es por velicidad)
     649.  00:832D  C3 53 83            	JP		.sumar_columna
     650.  00:8330                      .fila_1:
     651.  00:8330  11 A0 00            	LD		DE, 160
     652.  00:8333  19                  	ADD		HL, DE
     653.  00:8334  C3 53 83            	JP		.sumar_columna
     654.  00:8337                      .fila_2:
     655.  00:8337  11 80 00            	LD		DE, 128
     656.  00:833A  19                  	ADD		HL, DE
     657.  00:833B  C3 53 83            	JP		.sumar_columna
     658.  00:833E                      .fila_3:
     659.  00:833E  11 60 00            	LD		DE, 96
     660.  00:8341  19                  	ADD		HL, DE
     661.  00:8342  C3 53 83            	JP		.sumar_columna
     662.  00:8345                      .fila_4:
     663.  00:8345  11 40 00            	LD		DE, 64
     664.  00:8348  19                  	ADD		HL, DE
     665.  00:8349  C3 53 83            	JP		.sumar_columna
     666.  00:834C                      .fila_5:
     667.  00:834C  11 20 00            	LD		DE, 32
     668.  00:834F  19                  	ADD		HL, DE
     669.  00:8350  C3 53 83            	JP		.sumar_columna
     670.  00:8353                      .fila_6:
     671.  00:8353                      	;pongo fila_6 por poner ya que si es la fila 6 equiv. a primera fila del mapa y por tanto no suma fila
     672.  00:8353                      	
     673.  00:8353                      	
     674.  00:8353                      .sumar_columna:
     675.  00:8353  3A 78 9C            	LD 		 A, (prota_pos_mapx) ;POS X
     676.  00:8356  16 00               	LD		 D, 0
     677.  00:8358  5F                  	LD		 E, A
     678.  00:8359  19                  	ADD		HL, DE
     679.  00:835A                      	
     680.  00:835A                      	;resultado en BC para usar en la función pinta_tile_suelto
     681.  00:835A  44                  	LD		 B, H
     682.  00:835B  4D                  	LD		 C, L
     683.  00:835C                      	
     684.  00:835C                      	;terminado de fijar la coordenada recuperamos a para ver el tipo
     685.  00:835C  3A 9A 9C            	LD		 A, (elemento_pintar_mapa)
     686.  00:835F  FE 09               	CP		 TILEGRISM
     687.  00:8361  CA 69 83            	JP		 Z, pinta_pos_mapa_vacio
     688.  00:8364  16 13               	LD		 D, TILEPROTAM
     689.  00:8366  C3 6B 83            	JP		fin_pinta_pos_mapa
     690.  00:8369                      pinta_pos_mapa_vacio:
     691.  00:8369  16 09               	LD		 D, TILEGRISM	
     692.  00:836B                      
     693.  00:836B                      fin_pinta_pos_mapa:
     694.  00:836B  C3 88 81            	JP		pinta_tile_suelto
     695.  00:836E                      fin_posiciona_en_mapa:
     696.  00:836E                      	;~ -CALL/RET
     697.  00:836E                      
     698.  00:836E                      
     699.  00:836E                      
     700.  00:836E                      ;;=====================================================
     701.  00:836E                      ;;EFECTO_IMAGEN_TIRA_RELIQUIA
     702.  00:836E                      ;;=====================================================	
     703.  00:836E                      ; función: 	hace que el fondo de la pantalla parpadee N veces
     704.  00:836E                      ; entrada: 	actualiza_reliquias_sn
     705.  00:836E                      ; salida: 	-
     706.  00:836E                      ; toca: 	todo
     707.  00:836E                      efecto_imagen_tira_reliquia:
     708.  00:836E  3E 14               	LD		 A, 20;RETARDOREL
     709.  00:8370  47                  	LD		 B, A
     710.  00:8371                      
     711.  00:8371                      .parpadea_fondo:
     712.  00:8371  C5                  	PUSH	BC
     713.  00:8372  21 5F 9C            	LD		HL, color_bomba1
     714.  00:8375  CD D2 80            	CALL	color_pantalla
     715.  00:8378                      	
     716.  00:8378                      	;~ PUSH	BC
     717.  00:8378                      	;~ LD		 A, 255
     718.  00:8378                      	;~ LD		 B, A
     719.  00:8378                      ;~ .bucle_de_espera:
     720.  00:8378                      	;~ NOP
     721.  00:8378                      	;~ DJNZ	 .bucle_de_espera
     722.  00:8378                      	;~ POP		BC
     723.  00:8378  76                  	HALT
     724.  00:8379                      
     725.  00:8379                      	
     726.  00:8379  21 62 9C            	LD		HL, color_bomba2
     727.  00:837C  CD D2 80            	CALL	color_pantalla
     728.  00:837F  C1                  	POP		BC
     729.  00:8380  10 EF               	DJNZ	.parpadea_fondo
     730.  00:8382                      	
     731.  00:8382  21 5C 9C            	LD		HL, color_base
     732.  00:8385  C3 D2 80            	JP		color_pantalla
     733.  00:8388                      fin_efecto_imagen_tira_reliquia:
     734.  00:8388                      	;CALL/RET
     735.  00:8388                      
     103   00:8388                      	
     104   00:8388                      	include "subr_sprites.asm"
       1.  00:8388                      
       2.  00:8388                      ;;=====================================================
       3.  00:8388                      ;;SUBRUTINAS ENCARGADAS DE MANEJAR LOS SPRITES
       4.  00:8388                      ;;=====================================================	
       5.  00:8388                      
       6.  00:8388                      
       7.  00:8388                      ;; PREGUNTAR SI A FERNANDO SI ES MEJOR USAR LISTAS O ALGO PARA AHORRAR CÓDIGO
       8.  00:8388                      
       9.  00:8388                      
      10.  00:8388                      ;;=====================================================
      11.  00:8388                      ;;CARGA_PATRONES_SPRITES_NIVEL1
      12.  00:8388                      ;;=====================================================	
      13.  00:8388                      ; función: 	copia los patrones de los sprites que e van a usar en el nivel 1 en vram
      14.  00:8388                      ; entrada: 	-
      15.  00:8388                      ; salida: 	-
      16.  00:8388                      ; toca: 	-
      17.  00:8388                      carga_patrones_sprites_nivel1:
      18.  00:8388  F5                  	PUSH	AF					;guardo copia de AF
      19.  00:8389  D9                  	EXX							;guardo copia de BC,DE y HL
      20.  00:838A                      	
      21.  00:838A                      	;sprite punto de mira		(este no será necesario cargarlo en ningún otro nivel del juego, sólo el primero)
      22.  00:838A  21 2A 97            	LD		HL,sprite_punto_mira_1
      23.  00:838D  11 00 38            	LD		DE,#3800
      24.  00:8390  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      25.  00:8393  CD 5C 00            	CALL	LDIRVM
      26.  00:8396  21 4A 97            	LD		HL,sprite_punto_mira_2
      27.  00:8399  11 20 38            	LD		DE,#3820
      28.  00:839C  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      29.  00:839F  CD 5C 00            	CALL	LDIRVM
      30.  00:83A2                      	
      31.  00:83A2                      	;sprite sprite_punto_mira_1_mejorado
      32.  00:83A2  21 6A 97            	LD		HL,sprite_punto_mira_1_mejorado
      33.  00:83A5  11 40 38            	LD		DE,#3840
      34.  00:83A8  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      35.  00:83AB  CD 5C 00            	CALL	LDIRVM
      36.  00:83AE  21 8A 97            	LD		HL,sprite_punto_mira_2_mejorado
      37.  00:83B1  11 60 38            	LD		DE,#3860
      38.  00:83B4  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      39.  00:83B7  CD 5C 00            	CALL	LDIRVM
      40.  00:83BA                      
      41.  00:83BA                      	;sprite sprite_reliquia
      42.  00:83BA  21 AA 97            	LD		HL,sprite_reliquia
      43.  00:83BD  11 80 38            	LD		DE,#3880
      44.  00:83C0  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      45.  00:83C3  CD 5C 00            	CALL	LDIRVM
      46.  00:83C6                      
      47.  00:83C6                      	;sprite sprite_vida_extra
      48.  00:83C6  21 AA 97            	LD		HL,sprite_reliquia
      49.  00:83C9  11 A0 38            	LD		DE,#38A0
      50.  00:83CC  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      51.  00:83CF  CD 5C 00            	CALL	LDIRVM
      52.  00:83D2                      
      53.  00:83D2                      	;sprite sprite_planta
      54.  00:83D2  21 EA 97            	LD		HL,sprite_planta
      55.  00:83D5  11 C0 38            	LD		DE,#38C0
      56.  00:83D8  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      57.  00:83DB  CD 5C 00            	CALL	LDIRVM
      58.  00:83DE                      	
      59.  00:83DE                      	;sprite sprite_ballesta_mejorada
      60.  00:83DE  21 0A 98            	LD		HL,sprite_ballesta_mejorada
      61.  00:83E1  11 E0 38            	LD		DE,#38E0
      62.  00:83E4  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      63.  00:83E7  CD 5C 00            	CALL	LDIRVM
      64.  00:83EA                      
      65.  00:83EA                      	;sprite sprite_ciempies
      66.  00:83EA  21 2A 98            	LD		HL,sprite_ciempies1
      67.  00:83ED  11 00 39            	LD		DE,#3900
      68.  00:83F0  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      69.  00:83F3  CD 5C 00            	CALL	LDIRVM
      70.  00:83F6  21 4A 98            	LD		HL,sprite_ciempies2
      71.  00:83F9  11 20 39            	LD		DE,#3920
      72.  00:83FC  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      73.  00:83FF  CD 5C 00            	CALL	LDIRVM		
      74.  00:8402                      
      75.  00:8402                      	;sprite sprite_arana
      76.  00:8402  21 6A 98            	LD		HL,sprite_arana1
      77.  00:8405  11 40 39            	LD		DE,#3940
      78.  00:8408  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      79.  00:840B  CD 5C 00            	CALL	LDIRVM
      80.  00:840E  21 8A 98            	LD		HL,sprite_arana2
      81.  00:8411  11 60 39            	LD		DE,#3960
      82.  00:8414  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      83.  00:8417  CD 5C 00            	CALL	LDIRVM	
      84.  00:841A                      
      85.  00:841A                      	;sprite sprite_serpiente
      86.  00:841A  21 AA 98            	LD		HL,sprite_serpiente1
      87.  00:841D  11 80 39            	LD		DE,#3980
      88.  00:8420  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      89.  00:8423  CD 5C 00            	CALL	LDIRVM
      90.  00:8426  21 CA 98            	LD		HL,sprite_serpiente2
      91.  00:8429  11 A0 39            	LD		DE,#39A0
      92.  00:842C  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      93.  00:842F  CD 5C 00            	CALL	LDIRVM	
      94.  00:8432                      
      95.  00:8432                      	;sprite sprite_murcielago
      96.  00:8432  21 EA 98            	LD		HL,sprite_murcielago1
      97.  00:8435  11 C0 39            	LD		DE,#39C0
      98.  00:8438  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      99.  00:843B  CD 5C 00            	CALL	LDIRVM
     100.  00:843E  21 0A 99            	LD		HL,sprite_murcielago2
     101.  00:8441  11 E0 39            	LD		DE,#39E0
     102.  00:8444  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
     103.  00:8447  CD 5C 00            	CALL	LDIRVM
     104.  00:844A                      	
     105.  00:844A                      	;sprite sprite_explosion
     106.  00:844A  21 2A 99            	LD		HL,sprite_explosion
     107.  00:844D  11 20 3A            	LD		DE,#3A20
     108.  00:8450  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
     109.  00:8453  CD 5C 00            	CALL	LDIRVM
     110.  00:8456                      	
     111.  00:8456  D9                  	EXX							;recupero copia de BC,DE y HL
     112.  00:8457  F1                  	POP		AF					;recupero copia de AF
     113.  00:8458                      fin_carga_patrones_sprites:
     114.  00:8458  C9                  	RET
     115.  00:8459                      
     116.  00:8459                      
     117.  00:8459                      ;;=====================================================
     118.  00:8459                      ;;ACTUALIZA_ARRAY_SPRITES_VRAM
     119.  00:8459                      ;;=====================================================	
     120.  00:8459                      ; función: 	copia el array con los valores de los sprites (pos, color, plano) en VRAM
     121.  00:8459                      ; entrada: 	-
     122.  00:8459                      ; salida: 	-
     123.  00:8459                      ; toca: 	todos los registros. Como me interesa la velocidad, si necesito copiar de algo lo hago fuera
     124.  00:8459                      render_sprites:
     125.  00:8459                      	;volcando el array con toda la info de los sprites a la zona de atributos de sprites
     126.  00:8459  21 DD 9C            	LD		HL,array_sprites
     127.  00:845C  11 00 1B            	LD		DE,SPRART
     128.  00:845F  01 80 00            	LD		BC,4 * 32				;32 sprites x 4 bytes controlando el sprite (Y, X, plano, color)
     129.  00:8462  C3 5C 00            	JP		LDIRVM
     130.  00:8465                      	;~ CALL	LDIRVM
     131.  00:8465                      fin_actualiza_array_sprites_vram:
     132.  00:8465                      	;~ RET
     133.  00:8465                      
     134.  00:8465                      
     135.  00:8465                      ;;=====================================================
     136.  00:8465                      ;;VUELCA_RESULTADO_PUNTOMIRA_ARRAY
     137.  00:8465                      ;;=====================================================	
     138.  00:8465                      ; función: 	coloca los valores del punto de mira en la variable array_sprites para ser volcados en VRAM
     139.  00:8465                      ; entrada: 	array_sprites_pm, prota.XXXXX
     140.  00:8465                      ; salida: 	-
     141.  00:8465                      ; toca: 	-
     142.  00:8465                      vuelca_resultado_puntomira_array:
     143.  00:8465  DD 21 DD 9C         	LD		IX, array_sprites_pm
     144.  00:8469                      	;posición y de los dos sprites que conforman el punto de mira
     145.  00:8469  3A 66 9C            	LD		 A, (prota.posy)
     146.  00:846C  DD 77 00            	LD		(IX  ), A
     147.  00:846F  DD 77 04            	LD		(IX+4), A
     148.  00:8472                      	;posición x de los dos sprites que conforman el punto de mira
     149.  00:8472  3A 65 9C            	LD		 A, (prota.posx)
     150.  00:8475  DD 77 01            	LD		(IX+1), A
     151.  00:8478  DD 77 05            	LD		(IX+5), A
     152.  00:847B                      	;plano
     153.  00:847B  DD 36 02 00         	LD		(IX+2), 0
     154.  00:847F  DD 36 06 04         	LD		(IX+6), 4	;al ser sprites de 16x16 hay que ir de 4 en 4
     155.  00:8483                      	;color
     156.  00:8483  3A 67 9C            	LD		 A, (prota.escena)
     157.  00:8486  B7                  	OR		 A
     158.  00:8487  C2 93 84            	JP		NZ,.codigo_color_2
     159.  00:848A                      .codigo_color_1:
     160.  00:848A  DD 36 03 0F         	LD		(IX+3), COLBLANCO
     161.  00:848E  DD 36 07 08         	LD		(IX+7), COLROJO
     162.  00:8492  C9                  	RET
     163.  00:8493                      .codigo_color_2:
     164.  00:8493  DD 36 03 08         	LD		(IX+3), COLROJO
     165.  00:8497  DD 36 07 0F         	LD		(IX+7), COLBLANCO
     166.  00:849B  C9                  	RET
     167.  00:849C                      fin_vuelca_resultado_puntomira_array:
     168.  00:849C                      
     169.  00:849C                      
     170.  00:849C                      ;;=====================================================
     171.  00:849C                      ;;CHECK_PLAYER
     172.  00:849C                      ;;=====================================================	
     173.  00:849C                      ; función: 	MIRA EL CONTROL Y APLICA LA LOGICA DE MOVIMIENTO DEL PROTAGONISTA
     174.  00:849C                      ; entrada: 	-
     175.  00:849C                      ; salida: 	-
     176.  00:849C                      ; toca: 	A
     177.  00:849C                      check_player:
     178.  00:849C  CD 24 85            	CALL	update_controllers_status
     179.  00:849F  B7                  	OR		 A
     180.  00:84A0  C8                  	RET		 Z						;si no se ha pulsado nada no se necesita mirar nada
     181.  00:84A1                      
     182.  00:84A1  CB 1F               	RR		 A
     183.  00:84A3  DC BC 84            	CALL	 C, mueve_arriba
     184.  00:84A6  CB 1F               	RR		 A
     185.  00:84A8  DC D8 84            	CALL	 C, mueve_abajo
     186.  00:84AB  CB 1F               	RR		 A
     187.  00:84AD  DC E7 84            	CALL	 C, mueve_izquierda
     188.  00:84B0  CB 1F               	RR		 A
     189.  00:84B2  DC C9 84            	CALL	 C, mueve_derecha
     190.  00:84B5                      	
     191.  00:84B5                      	;zona para mirar disparo Recibe A que tendrá 0000 0 0 X-letra M X-espacio 
     192.  00:84B5  CD F4 84            	CALL	mira_disparo
     193.  00:84B8                      	
     194.  00:84B8  C3 65 84            	JP		vuelca_resultado_puntomira_array
     195.  00:84BB                      f;in_check_player:
     196.  00:84BB  C9                  	RET
     197.  00:84BC                      
     105   00:84BC                      	
     106   00:84BC                      	include "subr_teclado_joy.asm"
       1.  00:84BC                      ;;=====================================================
       2.  00:84BC                      ;;SUBRUTINAS QUE CAPTURN EL JOYSTICK Y TECLADO Y MUEVEN PUNTO DE MIRA
       3.  00:84BC                      ;;=====================================================
       4.  00:84BC                      
       5.  00:84BC                      ;;=====================================================
       6.  00:84BC                      ;;MUEVE_ARRIBA
       7.  00:84BC                      ;;=====================================================	
       8.  00:84BC                      ; función: 	decrementa y si se no sale de los límites el valor del punto de mira a la derecha
       9.  00:84BC                      ; entrada: 	-
      10.  00:84BC                      ; salida: 	-
      11.  00:84BC                      ; toca: 	-
      12.  00:84BC                      mueve_arriba:
      13.  00:84BC  F5                  	PUSH		AF
      14.  00:84BD                      	
      15.  00:84BD  3A 66 9C            	LD		 	 A, (prota.posy)
      16.  00:84C0  3D                  	DEC			 A
      17.  00:84C1  CA C7 84            	JP			 Z,.no_decrementa_y
      18.  00:84C4  32 66 9C            	LD			(prota.posy), A
      19.  00:84C7                      	
      20.  00:84C7                      .no_decrementa_y:
      21.  00:84C7  F1                  	POP			AF
      22.  00:84C8                      fin_mueve_arriba:
      23.  00:84C8  C9                  	RET
      24.  00:84C9                      
      25.  00:84C9                      
      26.  00:84C9                      ;;=====================================================
      27.  00:84C9                      ;;MUEVE_DERECHA
      28.  00:84C9                      ;;=====================================================	
      29.  00:84C9                      ; función: 	incrementa si se no sale de los límites el valor del punto de mira a la derecha
      30.  00:84C9                      ; entrada: 	-
      31.  00:84C9                      ; salida: 	-
      32.  00:84C9                      ; toca: 	-
      33.  00:84C9                      mueve_derecha:
      34.  00:84C9  F5                  	PUSH		AF
      35.  00:84CA                      	
      36.  00:84CA  3A 65 9C            	LD		 	 A, (prota.posx)
      37.  00:84CD  3C                  	INC			 A
      38.  00:84CE  FE EF               	CP			 A, LIMPANTDER - 16
      39.  00:84D0  CA D6 84            	JP			 Z, .no_incrementa_x
      40.  00:84D3  32 65 9C            	LD			(prota.posx), A
      41.  00:84D6                      	
      42.  00:84D6                      .no_incrementa_x:
      43.  00:84D6  F1                  	POP			AF
      44.  00:84D7                      fin_mueve_derecha:
      45.  00:84D7  C9                  	RET
      46.  00:84D8                      
      47.  00:84D8                      
      48.  00:84D8                      ;;=====================================================
      49.  00:84D8                      ;;MUEVE_ABAJO
      50.  00:84D8                      ;;=====================================================	
      51.  00:84D8                      ; función: 	incrementa y si se no sale de los límites el valor del punto de mira abajo
      52.  00:84D8                      ; entrada: 	-
      53.  00:84D8                      ; salida: 	-
      54.  00:84D8                      ; toca: 	-
      55.  00:84D8                      mueve_abajo:
      56.  00:84D8  F5                  	PUSH		AF
      57.  00:84D9                      	
      58.  00:84D9  3A 66 9C            	LD		 	 A, (prota.posy)
      59.  00:84DC  3C                  	INC			 A
      60.  00:84DD  FE 70               	CP			 A, LIMPANTABA - 16
      61.  00:84DF  CA E5 84            	JP			 Z,.no_incrementa_y
      62.  00:84E2  32 66 9C            	LD			(prota.posy), A
      63.  00:84E5                      	
      64.  00:84E5                      .no_incrementa_y:
      65.  00:84E5  F1                  	POP			AF
      66.  00:84E6                      fin_mueve_abajo:
      67.  00:84E6  C9                  	RET
      68.  00:84E7                      	
      69.  00:84E7                      	
      70.  00:84E7                      ;;=====================================================
      71.  00:84E7                      ;;MUEVE_IZQUIERDA
      72.  00:84E7                      ;;=====================================================	
      73.  00:84E7                      ; función: 	decrementa x si se no sale de los límites el valor del punto de mira a la izquierda
      74.  00:84E7                      ; entrada: 	-
      75.  00:84E7                      ; salida: 	-
      76.  00:84E7                      ; toca: 	-
      77.  00:84E7                      mueve_izquierda:
      78.  00:84E7  F5                  	PUSH		AF
      79.  00:84E8                      	
      80.  00:84E8  3A 65 9C            	LD		 	 A, (prota.posx)
      81.  00:84EB  3D                  	DEC			 A
      82.  00:84EC                      ;	CP			 A, LIMPANTIZQ
      83.  00:84EC  CA F2 84            	JP			 Z,.no_decrementa_x
      84.  00:84EF  32 65 9C            	LD			(prota.posx), A
      85.  00:84F2                      	
      86.  00:84F2                      .no_decrementa_x:
      87.  00:84F2  F1                  	POP			AF
      88.  00:84F3                      fin_mueve_izquierda:
      89.  00:84F3  C9                  	RET
      90.  00:84F4                      
      91.  00:84F4                      
      92.  00:84F4                      
      93.  00:84F4                      ;;=====================================================
      94.  00:84F4                      ;;MIRA_DISPARO
      95.  00:84F4                      ;;=====================================================	
      96.  00:84F4                      ; función: 	Mira si se ha pulsado alguno de los dos disparos
      97.  00:84F4                      ; entrada: 	A que tendrá 0000 0 0 X-letra M X-espacio 
      98.  00:84F4                      ; salida: 	-
      99.  00:84F4                      ; toca: 	A, B
     100.  00:84F4                      mira_disparo:
     101.  00:84F4                      .mira_boton_pulsado1:
     102.  00:84F4  CB 1F               	RR		 A						;preparo en el carry si se ha pulsado botón 1
     103.  00:84F6  D2 08 85            	JP		 NC, .mira_boton_pulsado2					
     104.  00:84F9  F5                  	PUSH	AF						;copia A para usarlo después
     105.  00:84FA                      	;se ha pulsado barra o boton 1
     106.  00:84FA  3A 67 9C            	LD		 A, (prota.escena)
     107.  00:84FD  2F                  	CPL		 
     108.  00:84FE  32 67 9C            	LD		(prota.escena), A
     109.  00:8501                      	
     110.  00:8501  AF                  	XOR		 A
     111.  00:8502  0E 01               	LD		 C, 1
     112.  00:8504  CD CC 8B            	CALL	ayFX_INIT	
     113.  00:8507                      	
     114.  00:8507  F1                  	POP		AF
     115.  00:8508                      .mira_boton_pulsado2:
     116.  00:8508  CB 1F               	RR		 A
     117.  00:850A  D0                  	RET		 NC
     118.  00:850B                      	;se ha pulsado shift o boton 2
     119.  00:850B                      	
     120.  00:850B  3A 77 9C            	LD		 A, (prota_reliquias)	;miro si le quedan reliquias
     121.  00:850E  B7                  	OR		 A
     122.  00:850F  C8                  	RET		 Z						;si no le quedan salgo ya
     123.  00:8510                      	
     124.  00:8510                      	;actuaciones si se usa la reliquia botón 2 o M y quedn reliquias.. (antes ya se puso el valor en A)
     125.  00:8510  3A 77 9C            	LD		A, (prota_reliquias)
     126.  00:8513  3D                  	DEC		 A
     127.  00:8514  32 77 9C            	LD		(prota_reliquias), A
     128.  00:8517                      	
     129.  00:8517  3E 01               	LD		 A, 1
     130.  00:8519  0E 01               	LD		 C, 1
     131.  00:851B  CD CC 8B            	CALL	ayFX_INIT
     132.  00:851E                      	
     133.  00:851E  CD 6E 83            	CALL 	efecto_imagen_tira_reliquia
     134.  00:8521                      	
     135.  00:8521  C3 6C 81            	JP		pinta_reliquias
     136.  00:8524                      fin_mira_disparo:
     137.  00:8524                      ;	RET		
     138.  00:8524                      
     139.  00:8524                      
     140.  00:8524                      ;;============================================================
     141.  00:8524                      ;;Código de D. Fernando García (BitVision) (al que siempre le estaré agradecido)
     142.  00:8524                      ;check_8th_keyboard_row
     143.  00:8524                      ;read_joy_0
     144.  00:8524                      ;check_8th_keyboard_row
     145.  00:8524                      ;check_4th_keyboard_row
     146.  00:8524                      ;;============================================================
     147.  00:8524                      ;;  usa constantes:
     148.  00:8524                      ;PSG_A  equ  0a0h  ;reg address
     149.  00:8524                      ;PSG_W  equ  0a1h  ;reg data WR
     150.  00:8524                      ;PSG_R  equ  0a2h  ;reg data
     151.  00:8524                      
     152.  00:8524                      ;;=====================================================
     153.  00:8524                      ;;update_controllers_status
     154.  00:8524                      ;;=====================================================	
     155.  00:8524                      ;depends on the next rountine
     156.  00:8524                      ;  returns
     157.  00:8524                      ;  a - 0P2TRLDU
     158.  00:8524                      
     159.  00:8524                      update_controllers_status:
     160.  00:8524  CD 6F 85                 call  check_8th_keyboard_row
     161.  00:8527                      [4]  rrc    a
     161.  00:8527  CB 0F CB 0F CB 0F CB 0F 
     162.  00:852F  47                       ld    b,a    		;save for later  xxxTRDUL
     163.  00:8530                      
     164.  00:8530  E6 01                    and    #01    		;save L
     165.  00:8532  CB 27                    sla    a
     166.  00:8534  CB 27                    sla    a    		;now 00000L00
     167.  00:8536  4F                       ld    c,a    		;save for later
     168.  00:8537                      
     169.  00:8537  78                       ld    a,b    		;again we've got xxxTRDUL. I am interested on leaving 000000DU on a
     170.  00:8538  CB 3F                    srl    a
     171.  00:853A  E6 03                    and    00000011b
     172.  00:853C                      						;we've got 000000DU on a
     173.  00:853C  B1                       or    c    		;now we've got 00000LDU
     174.  00:853D  4F                       ld    c,a    		;save for later
     175.  00:853E                      
     176.  00:853E  78                       ld    a,b
     177.  00:853F  E6 18                    and    00011000b 	;we've got 000TR000
     178.  00:8541  B1                       or    c
     179.  00:8542                           ;finally    000TRLDU
     180.  00:8542                      
     181.  00:8542                           ;and    00000100   ;preserve just
     182.  00:8542  47                       ld    b,a    		;save for later
     183.  00:8543  CD 7D 85                 call  check_4th_keyboard_row      ;check M & P
     184.  00:8546  F5                       push  af
     185.  00:8547  E6 04                    and    00000100b	;filter just M
     186.  00:8549  87                       add    a
     187.  00:854A  87                       add    a
     188.  00:854B  87                       add    a           ;shift 3th to 6th bit
     189.  00:854C  B0                       or    b           	;merge with previous
     190.  00:854D  47                       ld    b,a
     191.  00:854E                      
     192.  00:854E  CD 5B 85                 call  read_joy_0
     193.  00:8551  E6 3F                    and    00111111b  	;we want just 002TRLDU  from joystick    (2 is second trigger)
     194.  00:8553  B0                       or    b      		;added 000TRLDU from keyboard
     195.  00:8554  47                       ld    b,a      	;save for later
     196.  00:8555  F1                       pop    af      	; let's check on P
     197.  00:8556                      
     198.  00:8556  E6 20                    and    00100000b
     199.  00:8558  87                       add    a      		;P status on 6th bit  ... so 0P2TRLDU
     200.  00:8559  B0                       or    b
     201.  00:855A                      
     202.  00:855A  C9                       ret
     203.  00:855B                      
     204.  00:855B                      
     205.  00:855B                      ;ret
     206.  00:855B                      ;  a -            xx2TRLDU
     207.  00:855B                      read_joy_0:
     208.  00:855B  F3                         di
     209.  00:855C  3E 0F                      ld    a,15
     210.  00:855E  D3 A0                      out    [PSG_A],a
     211.  00:8560  DB A2                      in    a,[PSG_R]
     212.  00:8562  E6 BF                      and    10111111b        ;joy0
     213.  00:8564                      
     214.  00:8564  D3 A1                      out    [PSG_W],a        ;set joy0
     215.  00:8566                      
     216.  00:8566  3E 0E                      ld    a,14
     217.  00:8568  D3 A0                      out    [PSG_A],a
     218.  00:856A  DB A2                      in    a,[PSG_R]
     219.  00:856C                      
     220.  00:856C  FB                         ei
     221.  00:856D  2F                         cpl
     222.  00:856E                      
     223.  00:856E  C9                         ret
     224.  00:856F                      
     225.  00:856F                      
     226.  00:856F                      ;ret
     227.  00:856F                      ;  a -      RDULxxxT
     228.  00:856F                      check_8th_keyboard_row:
     229.  00:856F  F3                       di
     230.  00:8570  DB AA                    in    a,(#aa)
     231.  00:8572  E6 F0                    and    #f0
     232.  00:8574  F6 08                    or    8
     233.  00:8576  D3 AA                    out    (#aa),a
     234.  00:8578  DB A9                    in    a,(#a9)
     235.  00:857A  FB                       ei
     236.  00:857B  2F                       cpl
     237.  00:857C                      
     238.  00:857C  C9                       ret
     239.  00:857D                      
     240.  00:857D                      
     241.  00:857D                      ;ret
     242.  00:857D                      ;  a -      xxxxxMxx
     243.  00:857D                      check_4th_keyboard_row:
     244.  00:857D  F3                       di
     245.  00:857E  DB AA                    in    a,(#aa)
     246.  00:8580  E6 F0                    and    #f0
     247.  00:8582  F6 04                    or    4
     248.  00:8584  D3 AA                    out    (#aa),a
     249.  00:8586  DB A9                    in    a,(#a9)
     250.  00:8588  FB                       ei
     251.  00:8589  2F                       cpl
     252.  00:858A                      
     253.  00:858A  C9                       ret
     254.  00:858B                      
     255.  00:858B                      ;--------------------------------------------
     256.  00:858B                      
     257.  00:858B                      
     258.  00:858B                      
     259.  00:858B                      
     260.  00:858B                      
     261.  00:858B                      
     262.  00:858B                      
     263.  00:858B                      
     107   00:858B                      	
     108   00:858B                      	include "subr_sonido.asm"
       1.  00:858B                      
       2.  00:858B                      ;;=====================================================
       3.  00:858B                      ;;SUBRUTINAS PARA SONIDOS
       4.  00:858B                      ;;=====================================================	
       5.  00:858B                      
       6.  00:858B                      ;;=====================================================
       7.  00:858B                      ;;INICIALIZA_REPLAYER_EFECTOS_INTERRUPCIONES
       8.  00:858B                      ;;=====================================================	
       9.  00:858B                      ; función: 	inicializa: replayer de música, player de efectos e interrupciones
      10.  00:858B                      ; entrada: 	-
      11.  00:858B                      ; salida: 	-
      12.  00:858B                      ; toca: 	HL, A
      13.  00:858B                      inicializa_replayer_efectos_interrupciones:
      14.  00:858B  F3                  	DI
      15.  00:858C                      
      16.  00:858C                      	;inicializacion de replayer musical
      17.  00:858C  21 34 8C            	LD		HL, song-99			; hl <- initial address of module - 99
      18.  00:858F  CD CB 85            	CALL	PT3_INIT			; Inits PT3 player
      19.  00:8592                      		
      20.  00:8592                      	;inicializacion del reproductor de efectos sonoros
      21.  00:8592  21 FF 95            	LD		HL, sfx_bank
      22.  00:8595  CD BA 8B            	CALL	ayFX_SETUP
      23.  00:8598                      	
      24.  00:8598                      	;Engancha nuestra rutina de servicio al gancha que deja preparado la BIOS cuando se termina de pintar la pantalla (50 o 60 veces por segundo)
      25.  00:8598  3E C3               	LD		A, #C3
      26.  00:859A  32 9F FD            	LD		[H.TIMI], A
      27.  00:859D  21 A5 85            	LD		HL, subrutina_isr
      28.  00:85A0  22 A0 FD            	LD		[H.TIMI+1], HL
      29.  00:85A3                      	
      30.  00:85A3  FB                  	EI		;optimizacion:
      31.  00:85A4                      			;piensa que las dos ultimas lineas podrian haber sido: 
      32.  00:85A4                      			;ei						;primero ei
      33.  00:85A4                      			;ld		[H.TIMI+1],hl	;luego este ld
      34.  00:85A4                      									;PENSAR (y consultar ) PORQUE!!!!
      35.  00:85A4                      fin_inicializa_replayer_efectos_interrupciones:
      36.  00:85A4  C9                  	RET
      37.  00:85A5                      
      38.  00:85A5                      
      39.  00:85A5                      
      40.  00:85A5                      ;;=====================================================
      41.  00:85A5                      ;;NUESTRA_ISR
      42.  00:85A5                      ;;=====================================================	
      43.  00:85A5                      ; función: 	envía datos al PSG + toca un trozo de música + toca trozo de 
      44.  00:85A5                      ; entrada: 	-
      45.  00:85A5                      ; salida: 	-
      46.  00:85A5                      ; toca: 	HL, A
      47.  00:85A5                      subrutina_isr:
      48.  00:85A5  CD 10 8B            	CALL	PT3_ROUT			;envia los datos a los registros del PSG
      49.  00:85A8  CD 18 8A            	CALL	PT3_PLAY			;calcula el siguiente 'trocito' de musica que sera enviado al proxima vez
      50.  00:85AB  C3 02 8C            	JP		ayFX_PLAY			;calcula el siguiente 'trocito' de efecto especial de sonido que sera enviado la proxima vez
      51.  00:85AE                      fin_subrutina_isr:
      52.  00:85AE                      	;RET
      53.  00:85AE                      
      54.  00:85AE                      
      55.  00:85AE                      
      56.  00:85AE                      ;;=====================================================
      57.  00:85AE                      ;;DEFINICIÓN DE SUBRUTINAS DE FERNANDO PARA COMPRESIÓN Y SONIDO
      58.  00:85AE                      ;;=====================================================
      59.  00:85AE                      subrutinas_sonido:
      60.  00:85AE                      	include	"PT3-ROM_sjasm.asm"
       1:  00:85AE                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2:  00:85AE                      		; --- Can be assembled with asMSX ---
       3:  00:85AE                      		; --- ROM version: MSX-KUN        ---
       4:  00:85AE                      		; --- asMSX version 2: SapphiRe   ---
       5:  00:85AE                      
       6:  00:85AE                      ; Based on MSX full version of PT3 by Dioniso
       7:  00:85AE                      ;
       8:  00:85AE                      ; This version of the replayer can be used with any note table
       9:  00:85AE                      ; This version also allows the use of PT3 commands
      10:  00:85AE                      ; First 99 bytes of each PT3 module should be stripped off
      11:  00:85AE                      ;
      12:  00:85AE                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      13:  00:85AE                      ;
      14:  00:85AE                      ; ROM LENGTH: 1549 bytes
      15:  00:85AE                      ; RAM LENGTH:  576 bytes
      16:  00:85AE                      
      17:  00:85AE                      
      18:  00:85AE                      
      19:  00:85AE                      ;SJASM version by BTV 2016
      20:  00:85AE                      
      21:  00:85AE                      
      22:  00:85AE                      		; --- CONSTANT VALUES DEFINITION ---
      23:  00:85AE                      
      24:  00:85AE                      ;ChannelsVars
      25:  00:85AE                      ;struc	CHNPRM
      26:  00:85AE                      ;reset group
      27:  00:85AE  (00:0000)           CHNPRM_PsInOr	equ 0	;RESB 1
      28:  00:85AE  (00:0001)           CHNPRM_PsInSm	equ 1	;RESB 1
      29:  00:85AE  (00:0002)           CHNPRM_CrAmSl	equ 2	;RESB 1
      30:  00:85AE  (00:0003)           CHNPRM_CrNsSl	equ 3	;RESB 1
      31:  00:85AE  (00:0004)           CHNPRM_CrEnSl	equ 4	;RESB 1
      32:  00:85AE  (00:0005)           CHNPRM_TSlCnt	equ 5	;RESB 1
      33:  00:85AE  (00:0006)           CHNPRM_CrTnSl	equ 6	;RESW 1
      34:  00:85AE  (00:0008)           CHNPRM_TnAcc	equ 8	;RESW 1
      35:  00:85AE  (00:000A)           CHNPRM_COnOff	equ 10	;RESB 1
      36:  00:85AE                      ;reset group
      37:  00:85AE                      
      38:  00:85AE  (00:000B)           CHNPRM_OnOffD	equ 11	;RESB 1
      39:  00:85AE                      
      40:  00:85AE                      ;IX for PTDECOD here [+12]
      41:  00:85AE  (00:000C)           CHNPRM_OffOnD	equ 12	;RESB 1
      42:  00:85AE  (00:000D)           CHNPRM_OrnPtr	equ 13	;RESW 1
      43:  00:85AE  (00:000F)           CHNPRM_SamPtr	equ 15	;RESW 1
      44:  00:85AE  (00:0011)           CHNPRM_NNtSkp	equ 17	;RESB 1
      45:  00:85AE  (00:0012)           CHNPRM_Note	equ 18	;RESB 1
      46:  00:85AE  (00:0013)           CHNPRM_SlToNt	equ 19	;RESB 1
      47:  00:85AE  (00:0014)           CHNPRM_Env_En	equ 20	;RESB 1
      48:  00:85AE  (00:0015)           CHNPRM_Flags	equ 21	;RESB 1
      49:  00:85AE                       ;Enabled - 0,SimpleGliss - 2
      50:  00:85AE  (00:0016)           CHNPRM_TnSlDl	equ 22	;RESB 1
      51:  00:85AE  (00:0017)           CHNPRM_TSlStp	equ 23	;RESW 1
      52:  00:85AE  (00:0019)           CHNPRM_TnDelt	equ 25	;RESW 1
      53:  00:85AE  (00:001B)           CHNPRM_NtSkCn	equ 27	;RESB 1
      54:  00:85AE  (00:001C)           CHNPRM_Volume	equ 28	;RESB 1
      55:  00:85AE  (00:001D)           CHNPRM_Size	equ 29	;RESB 1
      56:  00:85AE                      ;endstruc
      57:  00:85AE                      
      58:  00:85AE                      ;struc	AR
      59:  00:85AE  (00:0000)           AR_TonA		equ 0	;RESW 1
      60:  00:85AE  (00:0002)           AR_TonB		equ 2	;RESW 1
      61:  00:85AE  (00:0004)           AR_TonC		equ 4	;RESW 1
      62:  00:85AE  (00:0006)           AR_Noise	equ 6	;RESB 1
      63:  00:85AE  (00:0007)           AR_Mixer	equ 7	;RESB 1
      64:  00:85AE  (00:0008)           AR_AmplA	equ 8	;RESB 1
      65:  00:85AE  (00:0009)           AR_AmplB	equ 9	;RESB 1
      66:  00:85AE  (00:000A)           AR_AmplC	equ 10	;RESB 1
      67:  00:85AE  (00:000B)           AR_Env		equ 11	;RESW 1
      68:  00:85AE  (00:000D)           AR_EnvTp	equ 13	;RESB 1
      69:  00:85AE                      ;endstruc
      70:  00:85AE                      
      71:  00:85AE                      		; --- CODE STARTS HERE ---
      72:  00:85AE                      
      73:  00:85AE  21 00 F0            CHECKLP:	LD	HL,PT3_SETUP
      74:  00:85B1  CB FE               		SET	7,[HL]
      75:  00:85B3  CB 46               		BIT	0,[HL]
      76:  00:85B5  C8                  		RET	Z
      77:  00:85B6  E1                  		POP	HL
      78:  00:85B7  21 7A F0            		LD	HL,DelyCnt
      79:  00:85BA  34                  		INC	[HL]
      80:  00:85BB  21 3E F0            		LD	HL,ChanA+CHNPRM_NtSkCn
      81:  00:85BE  34                  		INC	[HL]
      82:  00:85BF  AF                  PT3_MUTE:	XOR	A
      83:  00:85C0  67                  		LD	H,A
      84:  00:85C1  6F                  		LD	L,A
      85:  00:85C2  32 48 F1            		LD	[AYREGS+AR_AmplA],A
      86:  00:85C5  22 49 F1            		LD	[AYREGS+AR_AmplB],HL
      87:  00:85C8  C3 11 8B            		JP	ROUT_A0
      88:  00:85CB                      
      89:  00:85CB                      PT3_INIT:	;HL - AddressOfModule - 100
      90:  00:85CB  22 01 F0            		LD [PT3_MODADDR],HL
      91:  00:85CE  E5                  		PUSH HL
      92:  00:85CF  11 64 00            		LD DE,100
      93:  00:85D2  19                  		ADD HL,DE
      94:  00:85D3  7E                  		LD A,[HL]
      95:  00:85D4  32 1C F0            		LD [PT3_Delay],A
      96:  00:85D7  E5                  		PUSH HL
      97:  00:85D8  DD E1               		POP IX
      98:  00:85DA  19                  		ADD HL,DE
      99:  00:85DB  22 03 F0            		LD [PT3_CrPsPtr],HL
     100:  00:85DE  DD 5E 02            		LD E,[IX+102-100]
     101:  00:85E1  19                  		ADD HL,DE
     102:  00:85E2  23                  		INC HL
     103:  00:85E3  22 18 F0            		LD [PT3_LPosPtr],HL
     104:  00:85E6  D1                  		POP DE
     105:  00:85E7  DD 6E 03            		LD L,[IX+103-100]
     106:  00:85EA  DD 66 04            		LD H,[IX+104-100]
     107:  00:85ED  19                  		ADD HL,DE
     108:  00:85EE  22 1A F0            		LD [PT3_PatsPtr],HL
     109:  00:85F1  21 A9 00            		LD HL,169
     110:  00:85F4  19                  		ADD HL,DE
     111:  00:85F5  22 07 F0            		LD [PT3_OrnPtrs],HL
     112:  00:85F8  21 69 00            		LD HL,105
     113:  00:85FB  19                  		ADD HL,DE
     114:  00:85FC  22 05 F0            		LD [PT3_SAMPTRS],HL
     115:  00:85FF  21 00 F0            		LD HL,PT3_SETUP
     116:  00:8602  CB BE               		RES 7,[HL]
     117:  00:8604                      
     118:  00:8604                      		; --- note table data depacker ---
     119:  00:8604                      		; Depacks first 12 tones of each tone table
     120:  00:8604                      
     121:  00:8604  11 85 8B            		LD DE,T_PACK
     122:  00:8607  01 B1 F1            		LD BC,T1_+(2*49)-1
     123:  00:860A  1A                  .TP_0:		LD A,[DE]
     124:  00:860B  13                  		INC DE
     125:  00:860C  FE 1E               		CP 15*2
     126:  00:860E  30 06               		JR NC,.TP_1
     127:  00:8610  67                  		LD H,A
     128:  00:8611  1A                  		LD A,[DE]
     129:  00:8612  6F                  		LD L,A
     130:  00:8613  13                  		INC DE
     131:  00:8614  18 07               		JR .TP_2
     132:  00:8616  D5                  .TP_1:		PUSH DE
     133:  00:8617  16 00               		LD D,0
     134:  00:8619  5F                  		LD E,A
     135:  00:861A  19                  		ADD HL,DE
     136:  00:861B  19                  		ADD HL,DE
     137:  00:861C  D1                  		POP DE
     138:  00:861D  7C                  .TP_2:		LD A,H
     139:  00:861E  02                  		LD [BC],A
     140:  00:861F  0B                  		DEC BC
     141:  00:8620  7D                  		LD A,L
     142:  00:8621  02                  		LD [BC],A
     143:  00:8622  0B                  		DEC BC
     144:  00:8623  D6 F0               		SUB $F0
     145:  00:8625  20 E3               		JR NZ,.TP_0
     146:  00:8627                      
     147:  00:8627                      		; --- INITIALIZE PT3 VARIABLES ---
     148:  00:8627  21 23 F0            		LD HL,VARS
     149:  00:862A  77                  		LD [HL],A
     150:  00:862B  11 24 F0            		LD DE,VARS+1
     151:  00:862E  01 2C 01            		LD BC,VAR0END-VARS-1
     152:  00:8631  ED B0               		LDIR
     153:  00:8633                      
     154:  00:8633  3C                  		INC A
     155:  00:8634  32 7A F0            		LD [DelyCnt],A
     156:  00:8637  21 01 F0            		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     157:  00:863A  22 3E F0            		LD [ChanA+CHNPRM_NtSkCn],HL
     158:  00:863D  22 5B F0            		LD [ChanB+CHNPRM_NtSkCn],HL
     159:  00:8640  22 78 F0            		LD [ChanC+CHNPRM_NtSkCn],HL
     160:  00:8643                      
     161:  00:8643  21 81 8B            		LD HL,EMPTYSAMORN
     162:  00:8646  22 12 F0            		LD [PT3_AdInPtA],HL ;ptr to zero
     163:  00:8649  22 30 F0            		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     164:  00:864C  22 4D F0            		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     165:  00:864F  22 6A F0            		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     166:  00:8652                      
     167:  00:8652  22 32 F0            		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     168:  00:8655  22 4F F0            		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     169:  00:8658  22 6C F0            		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     170:  00:865B                      					    ;also EMPTYSAMORN comment
     171:  00:865B                      
     172:  00:865B                      		; --- NOTE TABLE CREATOR (c) Ivan Roshin, adapted by SapphiRe ---
     173:  00:865B  DD 7E FF            		LD A,[IX+99-100] ;TONE TABLE NUMBER
     174:  00:865E  17                  		RLA
     175:  00:865F  E6 07               		AND 7
     176:  00:8661  21 31 8B            		LD HL,NT_DATA
     177:  00:8664  D5                  		PUSH DE
     178:  00:8665  50                  		LD D,B		; ld d,0 (bc is 0000 after LDIR)
     179:  00:8666  87                  		ADD A,A
     180:  00:8667  5F                  		LD E,A
     181:  00:8668  19                  		ADD HL,DE	; hl -> init of correct note table data
     182:  00:8669  5E                  		LD E,[HL]
     183:  00:866A  23                  		INC HL
     184:  00:866B  CB 3B               		SRL E
     185:  00:866D  9F                  		SBC A,A
     186:  00:866E  E6 A7               		AND $A7			;$00 (NOP) or $A7 (AND A)
     187:  00:8670  32 21 F0            		LD [PT3_NTL3],A		; CORRECT INSTRUCTION, DEPENDS OF SELECTED TABLE
     188:  00:8673  3E C9               		LD A,$C9		; RET CODE
     189:  00:8675  32 22 F0            		LD [PT3_NTL3+1],A	; RET PLACED
     190:  00:8678  EB                  		EX DE,HL
     191:  00:8679  C1                  		POP BC ;BC=T1_
     192:  00:867A  09                  		ADD HL,BC
     193:  00:867B                      
     194:  00:867B  1A                  		LD A,[DE]                           
     195:  00:867C                      
     196:  00:867C  01 41 8B            		LD BC,T_
     197:  00:867F  81                  		ADD A,C
     198:  00:8680  4F                  		LD C,A
     199:  00:8681  88                  		ADC A,B
     200:  00:8682                      
     201:  00:8682  91                  		SUB C
     202:  00:8683  47                  		LD B,A
     203:  00:8684  C5                  		PUSH BC
     204:  00:8685  11 80 F0            		LD DE,NT_
     205:  00:8688  D5                  		PUSH DE
     206:  00:8689                      
     207:  00:8689  06 0C               		LD B,12
     208:  00:868B  C5                  .L1:		PUSH BC
     209:  00:868C  4E                  		LD C,[HL]
     210:  00:868D  23                  		INC HL
     211:  00:868E  E5                  		PUSH HL
     212:  00:868F  46                  		LD B,[HL]
     213:  00:8690                      
     214:  00:8690  D5                  		PUSH DE
     215:  00:8691  EB                  		EX DE,HL
     216:  00:8692  11 17 00            		LD DE,23
     217:  00:8695  DD 26 08            		db $DD,$26,$08	;LD XH,8
     218:  00:8698                      
     219:  00:8698  CB 38               .L2:		SRL B
     220:  00:869A  CB 19               		RR C
     221:  00:869C  CD 21 F0            .L3:		CALL PT3_NTL3	;AND A or NOP
     222:  00:869F  79                  		LD A,C
     223:  00:86A0  8A                  		ADC A,D	;=ADC 0
     224:  00:86A1  77                  		LD [HL],A
     225:  00:86A2  23                  		INC HL
     226:  00:86A3  78                  		LD A,B
     227:  00:86A4  8A                  		ADC A,D
     228:  00:86A5  77                  		LD [HL],A
     229:  00:86A6  19                  		ADD HL,DE
     230:  00:86A7  DD 25               		db $DD,$25	;DEC XH
     231:  00:86A9  20 ED               		JR NZ,.L2
     232:  00:86AB                      
     233:  00:86AB  D1                  		POP DE
     234:  00:86AC  13                  		INC DE
     235:  00:86AD  13                  		INC DE
     236:  00:86AE  E1                  		POP HL
     237:  00:86AF  23                  		INC HL
     238:  00:86B0  C1                  		POP BC
     239:  00:86B1  10 D8               		DJNZ .L1
     240:  00:86B3                      
     241:  00:86B3  E1                  		POP HL
     242:  00:86B4  D1                  		POP DE
     243:  00:86B5                      
     244:  00:86B5  7B                  		LD A,E
     245:  00:86B6  D5                  		PUSH DE
     246:  00:86B7  11 4D 8B            		LD DE,TCOLD_1
     247:  00:86BA  BB                  		CP E
     248:  00:86BB  D1                  		POP DE
     249:  00:86BC  20 05               		JR NZ,.CORR_1
     250:  00:86BE  3E FD               		LD A,$FD
     251:  00:86C0  32 AE F0            		LD [NT_+$2E],A
     252:  00:86C3                      
     253:  00:86C3  1A                  .CORR_1:	LD A,[DE]
     254:  00:86C4  A7                  		AND A
     255:  00:86C5  28 11               		JR Z,.TC_EXIT
     256:  00:86C7  1F                  		RRA
     257:  00:86C8  F5                  		PUSH AF
     258:  00:86C9  87                  		ADD A,A
     259:  00:86CA  4F                  		LD C,A
     260:  00:86CB  09                  		ADD HL,BC
     261:  00:86CC  F1                  		POP AF
     262:  00:86CD  30 02               		JR NC,.CORR_2
     263:  00:86CF  35                  		DEC [HL]
     264:  00:86D0  35                  		DEC [HL]
     265:  00:86D1  34                  .CORR_2:	INC [HL]
     266:  00:86D2  A7                  		AND A
     267:  00:86D3  ED 42               		SBC HL,BC
     268:  00:86D5  13                  		INC DE
     269:  00:86D6  18 EB               		JR .CORR_1
     270:  00:86D8                      
     271:  00:86D8                      .TC_EXIT:	;POP AF
     272:  00:86D8                      
     273:  00:86D8                      		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     274:  00:86D8  21 11 00            		ld	hl,$11
     275:  00:86DB  54                  		ld	d,h
     276:  00:86DC  5C                  		ld	e,h
     277:  00:86DD  DD 21 50 F1         		ld	IX,VT_+16
     278:  00:86E1  06 0F               		ld	b,15
     279:  00:86E3  E5                  .INITV1:	push	hl
     280:  00:86E4  19                  		add	hl,de
     281:  00:86E5  EB                  		ex	de,hl
     282:  00:86E6  ED 62               		sbc	hl,hl
     283:  00:86E8  48                  		ld	c,b
     284:  00:86E9  06 10               		ld	b,16
     285:  00:86EB  7D                  .INITV2:	ld	a,l
     286:  00:86EC  17                  		rla
     287:  00:86ED  7C                  		ld	a,h
     288:  00:86EE  CE 00               		adc	a,0
     289:  00:86F0  DD 77 00            		ld	[ix],a
     290:  00:86F3  DD 23               		inc	ix
     291:  00:86F5  19                  		add	hl,de
     292:  00:86F6  10 F3               		djnz	.INITV2
     293:  00:86F8  E1                  		pop	hl
     294:  00:86F9  7B                  		ld	a,e
     295:  00:86FA  FE 77               		cp	$77
     296:  00:86FC  20 01               		jr	nz,.INITV3
     297:  00:86FE  1C                  		inc	e
     298:  00:86FF  41                  .INITV3:	ld	b,c
     299:  00:8700  10 E1               		djnz	.INITV1
     300:  00:8702                      
     301:  00:8702  C9                  		RET
     302:  00:8703                      
     303:  00:8703                      		;pattern decoder
     304:  00:8703  DD 36 08 00         PD_OrSm:	LD [IX+(CHNPRM_Env_En-12)],0
     305:  00:8707  CD 8D 88            		CALL SETORN
     306:  00:870A  0A                  		LD A,[BC]
     307:  00:870B  03                  		INC BC
     308:  00:870C  0F                  		RRCA
     309:  00:870D                      
     310:  00:870D  87                  PD_SAM:		ADD A,A
     311:  00:870E  5F                  PD_SAM_:	LD E,A
     312:  00:870F  16 00               		LD D,0
     313:  00:8711  2A 05 F0            		LD HL,[PT3_SAMPTRS]
     314:  00:8714  19                  		ADD HL,DE
     315:  00:8715  5E                  		LD E,[HL]
     316:  00:8716  23                  		INC HL
     317:  00:8717  56                  		LD D,[HL]
     318:  00:8718  2A 01 F0            		LD HL,[PT3_MODADDR]
     319:  00:871B  19                  		ADD HL,DE
     320:  00:871C  DD 75 03            		LD [IX+(CHNPRM_SamPtr-12)],L
     321:  00:871F  DD 74 04            		LD [IX+(CHNPRM_SamPtr+1-12)],H
     322:  00:8722  18 41               		JR PD_LOOP
     323:  00:8724                      
     324:  00:8724  07                  PD_VOL:		RLCA
     325:  00:8725  07                  		RLCA
     326:  00:8726  07                  		RLCA
     327:  00:8727  07                  		RLCA
     328:  00:8728  DD 77 10            		LD [IX+(CHNPRM_Volume-12)],A
     329:  00:872B  18 3B               		JR PD_LP2
     330:  00:872D                      	
     331:  00:872D  DD 77 08            PD_EOff:	LD [IX+(CHNPRM_Env_En-12)],A
     332:  00:8730  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     333:  00:8733  18 33               		JR PD_LP2
     334:  00:8735                      
     335:  00:8735  3D                  PD_SorE:	DEC A
     336:  00:8736  20 07               		JR NZ,PD_ENV
     337:  00:8738  0A                  		LD A,[BC]
     338:  00:8739  03                  		INC BC
     339:  00:873A  DD 77 05            		LD [IX+(CHNPRM_NNtSkp-12)],A
     340:  00:873D  18 29               		JR PD_LP2
     341:  00:873F                      
     342:  00:873F  CD 71 88            PD_ENV:		CALL SETENV
     343:  00:8742  18 24               		JR PD_LP2
     344:  00:8744                      
     345:  00:8744  CD 8D 88            PD_ORN:		CALL SETORN
     346:  00:8747  18 1C               		JR PD_LOOP
     347:  00:8749                             
     348:  00:8749  DD 77 08            PD_ESAM:	LD [IX+(CHNPRM_Env_En-12)],A
     349:  00:874C  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     350:  00:874F  C4 71 88            		CALL NZ,SETENV
     351:  00:8752  0A                  		LD A,[BC]
     352:  00:8753  03                  		INC BC
     353:  00:8754  18 B8               		JR PD_SAM_
     354:  00:8756                      
     355:  00:8756  DD 7E 06            PTDECOD:	LD A,[IX+(CHNPRM_Note-12)]
     356:  00:8759  32 0F F0            		LD [PT3_PrNote],A
     357:  00:875C  DD 6E FA            		LD L,[IX+(CHNPRM_CrTnSl-12)]
     358:  00:875F  DD 66 FB            		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     359:  00:8762  22 10 F0            		LD [PT3_PrSlide],HL
     360:  00:8765                      
     361:  00:8765  11 10 20            PD_LOOP:	LD DE,$2010
     362:  00:8768  0A                  PD_LP2:		LD A,[BC]
     363:  00:8769  03                  		INC BC
     364:  00:876A  83                  		ADD A,E
     365:  00:876B  38 96               		JR C,PD_OrSm
     366:  00:876D  82                  		ADD A,D
     367:  00:876E  28 4A               		JR Z,PD_FIN
     368:  00:8770  38 9B               		JR C,PD_SAM
     369:  00:8772  83                  		ADD A,E
     370:  00:8773  28 25               		JR Z,PD_REL
     371:  00:8775  38 AD               		JR C,PD_VOL
     372:  00:8777  83                  		ADD A,E
     373:  00:8778  28 B3               		JR Z,PD_EOff
     374:  00:877A  38 B9               		JR C,PD_SorE
     375:  00:877C  C6 60               		ADD A,96
     376:  00:877E  38 20               		JR C,PD_NOTE
     377:  00:8780  83                  		ADD A,E
     378:  00:8781  38 C1               		JR C,PD_ORN
     379:  00:8783  82                  		ADD A,D
     380:  00:8784  38 0F               		JR C,PD_NOIS
     381:  00:8786  83                  		ADD A,E
     382:  00:8787  38 C0               		JR C,PD_ESAM
     383:  00:8789  87                  		ADD A,A
     384:  00:878A  5F                  		LD E,A
     385:  00:878B  21 C6 67            		LD HL,(SPCCOMS+$DF20) % 65536	; Adapted from original Speccy version (saves 6 bytes)
     386:  00:878E  19                  		ADD HL,DE
     387:  00:878F  5E                  		LD E,[HL]
     388:  00:8790  23                  		INC HL
     389:  00:8791  56                  		LD D,[HL]
     390:  00:8792  D5                  		PUSH DE
     391:  00:8793  18 D0               		JR PD_LOOP
     392:  00:8795                      
     393:  00:8795  32 7E F0            PD_NOIS:	LD [Ns_Base],A
     394:  00:8798  18 CE               		JR PD_LP2
     395:  00:879A                      
     396:  00:879A  DD CB 09 86         PD_REL:		RES 0,[IX+(CHNPRM_Flags-12)]
     397:  00:879E  18 08               		JR PD_RES
     398:  00:87A0                      	
     399:  00:87A0  DD 77 06            PD_NOTE:	LD [IX+(CHNPRM_Note-12)],A
     400:  00:87A3  DD CB 09 C6         		SET 0,[IX+(CHNPRM_Flags-12)]
     401:  00:87A7  AF                  		XOR A
     402:  00:87A8                      
     403:  00:87A8  ED 73 09 F0         PD_RES:		LD [PT3_PDSP],SP
     404:  00:87AC  DD F9               		LD SP,IX
     405:  00:87AE  67                  		LD H,A
     406:  00:87AF  6F                  		LD L,A
     407:  00:87B0  E5                  		PUSH HL
     408:  00:87B1  E5                  		PUSH HL
     409:  00:87B2  E5                  		PUSH HL
     410:  00:87B3  E5                  		PUSH HL
     411:  00:87B4  E5                  		PUSH HL
     412:  00:87B5  E5                  		PUSH HL
     413:  00:87B6  ED 7B 09 F0         		LD SP,[PT3_PDSP]
     414:  00:87BA                      
     415:  00:87BA  DD 7E 05            PD_FIN:		LD A,[IX+(CHNPRM_NNtSkp-12)]
     416:  00:87BD  DD 77 0F            		LD [IX+(CHNPRM_NtSkCn-12)],A
     417:  00:87C0  C9                  		RET
     418:  00:87C1                      
     419:  00:87C1  DD CB 09 96         C_PORTM:	RES 2,[IX+(CHNPRM_Flags-12)]
     420:  00:87C5  0A                  		LD A,[BC]
     421:  00:87C6  03                  		INC BC
     422:  00:87C7                      		;SKIP PRECALCULATED TONE DELTA [BECAUSE
     423:  00:87C7                      		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
     424:  00:87C7  03                  		INC BC
     425:  00:87C8  03                  		INC BC
     426:  00:87C9  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     427:  00:87CC  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     428:  00:87CF  11 80 F0            		LD DE,NT_
     429:  00:87D2  DD 7E 06            		LD A,[IX+(CHNPRM_Note-12)]
     430:  00:87D5  DD 77 07            		LD [IX+(CHNPRM_SlToNt-12)],A
     431:  00:87D8  87                  		ADD A,A
     432:  00:87D9  6F                  		LD L,A
     433:  00:87DA  26 00               		LD H,0
     434:  00:87DC  19                  		ADD HL,DE
     435:  00:87DD  7E                  		LD A,[HL]
     436:  00:87DE  23                  		INC HL
     437:  00:87DF  66                  		LD H,[HL]
     438:  00:87E0  6F                  		LD L,A
     439:  00:87E1  E5                  		PUSH HL
     440:  00:87E2  3A 0F F0            		LD A,[PT3_PrNote]
     441:  00:87E5  DD 77 06            		LD [IX+(CHNPRM_Note-12)],A
     442:  00:87E8  87                  		ADD A,A
     443:  00:87E9  6F                  		LD L,A
     444:  00:87EA  26 00               		LD H,0
     445:  00:87EC  19                  		ADD HL,DE
     446:  00:87ED  5E                  		LD E,[HL]
     447:  00:87EE  23                  		INC HL
     448:  00:87EF  56                  		LD D,[HL]
     449:  00:87F0  E1                  		POP HL
     450:  00:87F1  ED 52               		SBC HL,DE
     451:  00:87F3  DD 75 0D            		LD [IX+(CHNPRM_TnDelt-12)],L
     452:  00:87F6  DD 74 0E            		LD [IX+(CHNPRM_TnDelt+1-12)],H
     453:  00:87F9  ED 5B 10 F0         		LD DE,[PT3_PrSlide]
     454:  00:87FD  DD 73 FA            		LD [IX+(CHNPRM_CrTnSl-12)],E
     455:  00:8800  DD 72 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],D
     456:  00:8803  0A                  		LD A,[BC] ;SIGNED TONE STEP
     457:  00:8804  03                  		INC BC
     458:  00:8805  08                  		EX AF,AF'
     459:  00:8806  0A                  		LD A,[BC]
     460:  00:8807  03                  		INC BC
     461:  00:8808  A7                  		AND A
     462:  00:8809  28 01               		JR Z,.NOSIG
     463:  00:880B  EB                  		EX DE,HL
     464:  00:880C  ED 52               .NOSIG:	SBC HL,DE
     465:  00:880E  F2 16 88            		JP P,SET_STP
     466:  00:8811  2F                  		CPL
     467:  00:8812  08                  		EX AF,AF'
     468:  00:8813  ED 44               		NEG
     469:  00:8815  08                  		EX AF,AF'
     470:  00:8816  DD 77 0C            SET_STP:	LD [IX+(CHNPRM_TSlStp+1-12)],A
     471:  00:8819  08                  		EX AF,AF'
     472:  00:881A  DD 77 0B            		LD [IX+(CHNPRM_TSlStp-12)],A
     473:  00:881D  DD 36 FE 00         		LD [IX+(CHNPRM_COnOff-12)],0
     474:  00:8821  C9                  		RET
     475:  00:8822                      
     476:  00:8822  DD CB 09 D6         C_GLISS:	SET 2,[IX+(CHNPRM_Flags-12)]
     477:  00:8826  0A                  		LD A,[BC]
     478:  00:8827  03                  		INC BC
     479:  00:8828  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     480:  00:882B  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     481:  00:882E  0A                  		LD A,[BC]
     482:  00:882F  03                  		INC BC
     483:  00:8830  08                  		EX AF,AF'
     484:  00:8831  0A                  		LD A,[BC]
     485:  00:8832  03                  		INC BC
     486:  00:8833  18 E1               		JR SET_STP
     487:  00:8835                      
     488:  00:8835  0A                  C_SMPOS:	LD A,[BC]
     489:  00:8836  03                  		INC BC
     490:  00:8837  DD 77 F5            		LD [IX+(CHNPRM_PsInSm-12)],A
     491:  00:883A  C9                  		RET
     492:  00:883B                      
     493:  00:883B  0A                  C_ORPOS:	LD A,[BC]
     494:  00:883C  03                  		INC BC
     495:  00:883D  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     496:  00:8840  C9                  		RET
     497:  00:8841                      
     498:  00:8841  0A                  C_VIBRT:	LD A,[BC]
     499:  00:8842  03                  		INC BC
     500:  00:8843  DD 77 FF            		LD [IX+(CHNPRM_OnOffD-12)],A
     501:  00:8846  DD 77 FE            		LD [IX+(CHNPRM_COnOff-12)],A
     502:  00:8849  0A                  		LD A,[BC]
     503:  00:884A  03                  		INC BC
     504:  00:884B  DD 77 00            		LD [IX+(CHNPRM_OffOnD-12)],A
     505:  00:884E  AF                  		XOR A
     506:  00:884F  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     507:  00:8852  DD 77 FA            		LD [IX+(CHNPRM_CrTnSl-12)],A
     508:  00:8855  DD 77 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],A
     509:  00:8858  C9                  		RET
     510:  00:8859                      
     511:  00:8859  0A                  C_ENGLS:	LD A,[BC]
     512:  00:885A  03                  		INC BC
     513:  00:885B  32 1E F0            		LD [PT3_Env_Del],A
     514:  00:885E  32 7D F0            		LD [CurEDel],A
     515:  00:8861  0A                  		LD A,[BC]
     516:  00:8862  03                  		INC BC
     517:  00:8863  6F                  		LD L,A
     518:  00:8864  0A                  		LD A,[BC]
     519:  00:8865  03                  		INC BC
     520:  00:8866  67                  		LD H,A
     521:  00:8867  22 1F F0            		LD [PT3_ESldAdd],HL
     522:  00:886A  C9                  		RET
     523:  00:886B                      
     524:  00:886B  0A                  C_DELAY:	LD A,[BC]
     525:  00:886C  03                  		INC BC
     526:  00:886D  32 1C F0            		LD [PT3_Delay],A
     527:  00:8870  C9                  		RET
     528:  00:8871                      	
     529:  00:8871  DD 73 08            SETENV:		LD [IX+(CHNPRM_Env_En-12)],E
     530:  00:8874  32 4D F1            		LD [AYREGS+AR_EnvTp],A
     531:  00:8877  0A                  		LD A,[BC]
     532:  00:8878  03                  		INC BC
     533:  00:8879  67                  		LD H,A
     534:  00:887A  0A                  		LD A,[BC]
     535:  00:887B  03                  		INC BC
     536:  00:887C  6F                  		LD L,A
     537:  00:887D  22 4E F1            		LD [EnvBase],HL
     538:  00:8880  AF                  		XOR A
     539:  00:8881  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     540:  00:8884  32 7D F0            		LD [CurEDel],A
     541:  00:8887  67                  		LD H,A
     542:  00:8888  6F                  		LD L,A
     543:  00:8889  22 7B F0            		LD [CurESld],HL
     544:  00:888C  C9                  C_NOP:		RET
     545:  00:888D                      
     546:  00:888D  87                  SETORN:		ADD A,A
     547:  00:888E  5F                  		LD E,A
     548:  00:888F  16 00               		LD D,0
     549:  00:8891  DD 72 F4            		LD [IX+(CHNPRM_PsInOr-12)],D
     550:  00:8894  2A 07 F0            		LD HL,[PT3_OrnPtrs]
     551:  00:8897  19                  		ADD HL,DE
     552:  00:8898  5E                  		LD E,[HL]
     553:  00:8899  23                  		INC HL
     554:  00:889A  56                  		LD D,[HL]
     555:  00:889B  2A 01 F0            		LD HL,[PT3_MODADDR]
     556:  00:889E  19                  		ADD HL,DE
     557:  00:889F  DD 75 01            		LD [IX+(CHNPRM_OrnPtr-12)],L
     558:  00:88A2  DD 74 02            		LD [IX+(CHNPRM_OrnPtr+1-12)],H
     559:  00:88A5  C9                  		RET
     560:  00:88A6                      
     561:  00:88A6                      		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     562:  00:88A6  8C 88               SPCCOMS:	dw C_NOP
     563:  00:88A8  22 88               		dw C_GLISS
     564:  00:88AA  C1 87               		dw C_PORTM
     565:  00:88AC  35 88               		dw C_SMPOS
     566:  00:88AE  3B 88               		dw C_ORPOS
     567:  00:88B0  41 88               		dw C_VIBRT
     568:  00:88B2  8C 88               		dw C_NOP
     569:  00:88B4  8C 88               		dw C_NOP
     570:  00:88B6  59 88               		dw C_ENGLS
     571:  00:88B8  6B 88               		dw C_DELAY
     572:  00:88BA  8C 88               		dw C_NOP
     573:  00:88BC  8C 88               		dw C_NOP
     574:  00:88BE  8C 88               		dw C_NOP
     575:  00:88C0  8C 88               		dw C_NOP
     576:  00:88C2  8C 88               		dw C_NOP
     577:  00:88C4  8C 88               		dw C_NOP
     578:  00:88C6                      
     579:  00:88C6  AF                  CHREGS:		XOR A
     580:  00:88C7  32 4A F1            		LD [AYREGS+AR_AmplC],A
     581:  00:88CA  DD CB 15 46         		BIT 0,[IX+CHNPRM_Flags]
     582:  00:88CE  E5                  		PUSH HL
     583:  00:88CF  CA F5 89            		JP Z,.CH_EXIT
     584:  00:88D2  ED 73 0B F0         		LD [PT3_CSP],SP
     585:  00:88D6  DD 6E 0D            		LD L,[IX+CHNPRM_OrnPtr]
     586:  00:88D9  DD 66 0E            		LD H,[IX+CHNPRM_OrnPtr+1]
     587:  00:88DC  F9                  		LD SP,HL
     588:  00:88DD  D1                  		POP DE
     589:  00:88DE  67                  		LD H,A
     590:  00:88DF  DD 7E 00            		LD A,[IX+CHNPRM_PsInOr]
     591:  00:88E2  6F                  		LD L,A
     592:  00:88E3  39                  		ADD HL,SP
     593:  00:88E4  3C                  		INC A
     594:  00:88E5  BA                  		CP D
     595:  00:88E6  38 01               		JR C,.CH_ORPS
     596:  00:88E8  7B                  		LD A,E
     597:  00:88E9  DD 77 00            .CH_ORPS:	LD [IX+CHNPRM_PsInOr],A
     598:  00:88EC  DD 7E 12            		LD A,[IX+CHNPRM_Note]
     599:  00:88EF  86                  		ADD A,[HL]
     600:  00:88F0  F2 F4 88            		JP P,.CH_NTP
     601:  00:88F3  AF                  		XOR A
     602:  00:88F4  FE 60               .CH_NTP:	CP 96
     603:  00:88F6  38 02               		JR C,.CH_NOK
     604:  00:88F8  3E 5F               		LD A,95
     605:  00:88FA  87                  .CH_NOK:	ADD A,A
     606:  00:88FB  08                  		EX AF,AF'
     607:  00:88FC  DD 6E 0F            		LD L,[IX+CHNPRM_SamPtr]
     608:  00:88FF  DD 66 10            		LD H,[IX+CHNPRM_SamPtr+1]
     609:  00:8902  F9                  		LD SP,HL
     610:  00:8903  D1                  		POP DE
     611:  00:8904  26 00               		LD H,0
     612:  00:8906  DD 7E 01            		LD A,[IX+CHNPRM_PsInSm]
     613:  00:8909  47                  		LD B,A
     614:  00:890A  87                  		ADD A,A
     615:  00:890B  87                  		ADD A,A
     616:  00:890C  6F                  		LD L,A
     617:  00:890D  39                  		ADD HL,SP
     618:  00:890E  F9                  		LD SP,HL
     619:  00:890F  78                  		LD A,B
     620:  00:8910  3C                  		INC A
     621:  00:8911  BA                  		CP D
     622:  00:8912  38 01               		JR C,.CH_SMPS
     623:  00:8914  7B                  		LD A,E
     624:  00:8915  DD 77 01            .CH_SMPS:	LD [IX+CHNPRM_PsInSm],A
     625:  00:8918  C1                  		POP BC
     626:  00:8919  E1                  		POP HL
     627:  00:891A  DD 5E 08            		LD E,[IX+CHNPRM_TnAcc]
     628:  00:891D  DD 56 09            		LD D,[IX+CHNPRM_TnAcc+1]
     629:  00:8920  19                  		ADD HL,DE
     630:  00:8921  CB 70               		BIT 6,B
     631:  00:8923  28 06               		JR Z,.CH_NOAC
     632:  00:8925  DD 75 08            		LD [IX+CHNPRM_TnAcc],L
     633:  00:8928  DD 74 09            		LD [IX+CHNPRM_TnAcc+1],H
     634:  00:892B  EB                  .CH_NOAC:	EX DE,HL
     635:  00:892C  08                  		EX AF,AF'
     636:  00:892D  6F                  		LD L,A
     637:  00:892E  26 00               		LD H,0
     638:  00:8930  31 80 F0            		LD SP,NT_
     639:  00:8933  39                  		ADD HL,SP
     640:  00:8934  F9                  		LD SP,HL
     641:  00:8935  E1                  		POP HL
     642:  00:8936  19                  		ADD HL,DE
     643:  00:8937  DD 5E 06            		LD E,[IX+CHNPRM_CrTnSl]
     644:  00:893A  DD 56 07            		LD D,[IX+CHNPRM_CrTnSl+1]
     645:  00:893D  19                  		ADD HL,DE
     646:  00:893E  ED 7B 0B F0         		LD SP,[PT3_CSP]
     647:  00:8942  E3                  		EX [SP],HL
     648:  00:8943  AF                  		XOR A
     649:  00:8944  DD B6 05            		OR [IX+CHNPRM_TSlCnt]
     650:  00:8947  28 3E               		JR Z,.CH_AMP
     651:  00:8949  DD 35 05            		DEC [IX+CHNPRM_TSlCnt]
     652:  00:894C  20 39               		JR NZ,.CH_AMP
     653:  00:894E  DD 7E 16            		LD A,[IX+CHNPRM_TnSlDl]
     654:  00:8951  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     655:  00:8954  DD 6E 17            		LD L,[IX+CHNPRM_TSlStp]
     656:  00:8957  DD 66 18            		LD H,[IX+CHNPRM_TSlStp+1]
     657:  00:895A  7C                  		LD A,H
     658:  00:895B  19                  		ADD HL,DE
     659:  00:895C  DD 75 06            		LD [IX+CHNPRM_CrTnSl],L
     660:  00:895F  DD 74 07            		LD [IX+CHNPRM_CrTnSl+1],H
     661:  00:8962  DD CB 15 56         		BIT 2,[IX+CHNPRM_Flags]
     662:  00:8966  20 1F               		JR NZ,.CH_AMP
     663:  00:8968  DD 5E 19            		LD E,[IX+CHNPRM_TnDelt]
     664:  00:896B  DD 56 1A            		LD D,[IX+CHNPRM_TnDelt+1]
     665:  00:896E  A7                  		AND A
     666:  00:896F  28 01               		JR Z,.CH_STPP
     667:  00:8971  EB                  		EX DE,HL
     668:  00:8972  ED 52               .CH_STPP:	SBC HL,DE
     669:  00:8974  FA 87 89            		JP M,.CH_AMP
     670:  00:8977  DD 7E 13            		LD A,[IX+CHNPRM_SlToNt]
     671:  00:897A  DD 77 12            		LD [IX+CHNPRM_Note],A
     672:  00:897D  AF                  		XOR A
     673:  00:897E  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     674:  00:8981  DD 77 06            		LD [IX+CHNPRM_CrTnSl],A
     675:  00:8984  DD 77 07            		LD [IX+CHNPRM_CrTnSl+1],A
     676:  00:8987  DD 7E 02            .CH_AMP:	LD A,[IX+CHNPRM_CrAmSl]
     677:  00:898A  CB 79               		BIT 7,C
     678:  00:898C  28 13               		JR Z,.CH_NOAM
     679:  00:898E  CB 71               		BIT 6,C
     680:  00:8990  28 07               		JR Z,.CH_AMIN
     681:  00:8992  FE 0F               		CP 15
     682:  00:8994  28 0B               		JR Z,.CH_NOAM
     683:  00:8996  3C                  		INC A
     684:  00:8997  18 05               		JR .CH_SVAM
     685:  00:8999  FE F1               .CH_AMIN:	CP -15
     686:  00:899B  28 04               		JR Z,.CH_NOAM
     687:  00:899D  3D                  		DEC A
     688:  00:899E  DD 77 02            .CH_SVAM:	LD [IX+CHNPRM_CrAmSl],A
     689:  00:89A1  6F                  .CH_NOAM:	LD L,A
     690:  00:89A2  78                  		LD A,B
     691:  00:89A3  E6 0F               		AND 15
     692:  00:89A5  85                  		ADD A,L
     693:  00:89A6  F2 AA 89            		JP P,.CH_APOS
     694:  00:89A9  AF                  		XOR A
     695:  00:89AA  FE 10               .CH_APOS:	CP 16
     696:  00:89AC  38 02               		JR C,.CH_VOL
     697:  00:89AE  3E 0F               		LD A,15
     698:  00:89B0  DD B6 1C            .CH_VOL:	OR [IX+CHNPRM_Volume]
     699:  00:89B3  6F                  		LD L,A
     700:  00:89B4  26 00               		LD H,0
     701:  00:89B6  11 40 F1            		LD DE,VT_
     702:  00:89B9  19                  		ADD HL,DE
     703:  00:89BA  7E                  		LD A,[HL]
     704:  00:89BB  CB 41               .CH_ENV:	BIT 0,C
     705:  00:89BD  20 03               		JR NZ,.CH_NOEN
     706:  00:89BF  DD B6 14            		OR [IX+CHNPRM_Env_En]
     707:  00:89C2  32 4A F1            .CH_NOEN:	LD [AYREGS+AR_AmplC],A
     708:  00:89C5  CB 78               		BIT 7,B
     709:  00:89C7  79                  		LD A,C
     710:  00:89C8  28 19               		JR Z,.NO_ENSL
     711:  00:89CA  17                  		RLA
     712:  00:89CB  17                  		RLA
     713:  00:89CC  CB 2F               		SRA A
     714:  00:89CE  CB 2F               		SRA A
     715:  00:89D0  CB 2F               		SRA A
     716:  00:89D2  DD 86 04            		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     717:  00:89D5  CB 68               		BIT 5,B
     718:  00:89D7  28 03               		JR Z,.NO_ENAC
     719:  00:89D9  DD 77 04            		LD [IX+CHNPRM_CrEnSl],A
     720:  00:89DC  21 1D F0            .NO_ENAC:	LD HL,PT3_AddToEn
     721:  00:89DF  86                  		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
     722:  00:89E0                      			   ;FIX IT IN NEXT VERSION?
     723:  00:89E0  77                  		LD [HL],A
     724:  00:89E1  18 0E               		JR .CH_MIX
     725:  00:89E3  1F                  .NO_ENSL:	RRA
     726:  00:89E4  DD 86 03            		ADD A,[IX+CHNPRM_CrNsSl]
     727:  00:89E7  32 7F F0            		LD [AddToNs],A
     728:  00:89EA  CB 68               		BIT 5,B
     729:  00:89EC  28 03               		JR Z,.CH_MIX
     730:  00:89EE  DD 77 03            		LD [IX+CHNPRM_CrNsSl],A
     731:  00:89F1  78                  .CH_MIX:	LD A,B
     732:  00:89F2  1F                  		RRA
     733:  00:89F3  E6 48               		AND $48
     734:  00:89F5  21 47 F1            .CH_EXIT:	LD HL,AYREGS+AR_Mixer
     735:  00:89F8  B6                  		OR [HL]
     736:  00:89F9  0F                  		RRCA
     737:  00:89FA  77                  		LD [HL],A
     738:  00:89FB  E1                  		POP HL
     739:  00:89FC  AF                  		XOR A
     740:  00:89FD  DD B6 0A            		OR [IX+CHNPRM_COnOff]
     741:  00:8A00  C8                  		RET Z
     742:  00:8A01  DD 35 0A            		DEC [IX+CHNPRM_COnOff]
     743:  00:8A04  C0                  		RET NZ
     744:  00:8A05  DD AE 15            		XOR [IX+CHNPRM_Flags]
     745:  00:8A08  DD 77 15            		LD [IX+CHNPRM_Flags],A
     746:  00:8A0B  1F                  		RRA
     747:  00:8A0C  DD 7E 0B            		LD A,[IX+CHNPRM_OnOffD]
     748:  00:8A0F  38 03               		JR C,.CH_ONDL
     749:  00:8A11  DD 7E 0C            		LD A,[IX+CHNPRM_OffOnD]
     750:  00:8A14  DD 77 0A            .CH_ONDL:	LD [IX+CHNPRM_COnOff],A
     751:  00:8A17  C9                  		RET
     752:  00:8A18                      
     753:  00:8A18  AF                  PT3_PLAY:	XOR A
     754:  00:8A19  32 1D F0            		LD [PT3_AddToEn],A
     755:  00:8A1C  32 47 F1            		LD [AYREGS+AR_Mixer],A
     756:  00:8A1F  3D                  		DEC A
     757:  00:8A20  32 4D F1            		LD [AYREGS+AR_EnvTp],A
     758:  00:8A23  21 7A F0            		LD HL,DelyCnt
     759:  00:8A26  35                  		DEC [HL]
     760:  00:8A27  C2 AE 8A            		JP NZ,.PL2
     761:  00:8A2A  21 3E F0            		LD HL,ChanA+CHNPRM_NtSkCn
     762:  00:8A2D  35                  		DEC [HL]
     763:  00:8A2E  20 4E               		JR NZ,.PL1B
     764:  00:8A30  ED 4B 12 F0         		LD BC,[PT3_AdInPtA]
     765:  00:8A34  0A                  		LD A,[BC]
     766:  00:8A35  A7                  		AND A
     767:  00:8A36  20 3B               		JR NZ,.PL1A
     768:  00:8A38  57                  		LD D,A
     769:  00:8A39  32 7E F0            		LD [Ns_Base],A
     770:  00:8A3C  2A 03 F0            		LD HL,[PT3_CrPsPtr]
     771:  00:8A3F  23                  		INC HL
     772:  00:8A40  7E                  		LD A,[HL]
     773:  00:8A41  3C                  		INC A
     774:  00:8A42  20 08               		JR NZ,.PLNLP
     775:  00:8A44  CD AE 85            		CALL CHECKLP
     776:  00:8A47  2A 18 F0            		LD HL,[PT3_LPosPtr]
     777:  00:8A4A  7E                  		LD A,[HL]
     778:  00:8A4B  3C                  		INC A
     779:  00:8A4C  22 03 F0            .PLNLP:	LD [PT3_CrPsPtr],HL
     780:  00:8A4F  3D                  		DEC A
     781:  00:8A50  87                  		ADD A,A
     782:  00:8A51  5F                  		LD E,A
     783:  00:8A52  CB 12               		RL D
     784:  00:8A54  2A 1A F0            		LD HL,[PT3_PatsPtr]
     785:  00:8A57  19                  		ADD HL,DE
     786:  00:8A58  ED 5B 01 F0         		LD DE,[PT3_MODADDR]
     787:  00:8A5C  ED 73 0D F0         		LD [PT3_PSP],SP
     788:  00:8A60  F9                  		LD SP,HL
     789:  00:8A61  E1                  		POP HL
     790:  00:8A62  19                  		ADD HL,DE
     791:  00:8A63  44                  		LD B,H
     792:  00:8A64  4D                  		LD C,L
     793:  00:8A65  E1                  		POP HL
     794:  00:8A66  19                  		ADD HL,DE
     795:  00:8A67  22 14 F0            		LD [PT3_AdInPtB],HL
     796:  00:8A6A  E1                  		POP HL
     797:  00:8A6B  19                  		ADD HL,DE
     798:  00:8A6C  22 16 F0            		LD [PT3_AdInPtC],HL
     799:  00:8A6F  ED 7B 0D F0         		LD SP,[PT3_PSP]
     800:  00:8A73                      
     801:  00:8A73  DD 21 2F F0         .PL1A:		LD IX,ChanA+12
     802:  00:8A77  CD 56 87            		CALL PTDECOD
     803:  00:8A7A  ED 43 12 F0         		LD [PT3_AdInPtA],BC
     804:  00:8A7E                      
     805:  00:8A7E  21 5B F0            .PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     806:  00:8A81  35                  		DEC [HL]
     807:  00:8A82  20 0F               		JR NZ,.PL1C
     808:  00:8A84  DD 21 4C F0         		LD IX,ChanB+12
     809:  00:8A88  ED 4B 14 F0         		LD BC,[PT3_AdInPtB]
     810:  00:8A8C  CD 56 87            		CALL PTDECOD
     811:  00:8A8F  ED 43 14 F0         		LD [PT3_AdInPtB],BC
     812:  00:8A93                      
     813:  00:8A93  21 78 F0            .PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     814:  00:8A96  35                  		DEC [HL]
     815:  00:8A97  20 0F               		JR NZ,.PL1D
     816:  00:8A99  DD 21 69 F0         		LD IX,ChanC+12
     817:  00:8A9D  ED 4B 16 F0         		LD BC,[PT3_AdInPtC]
     818:  00:8AA1  CD 56 87            		CALL PTDECOD
     819:  00:8AA4  ED 43 16 F0         		LD [PT3_AdInPtC],BC
     820:  00:8AA8                      
     821:  00:8AA8  3A 1C F0            .PL1D:		LD A,[PT3_Delay]
     822:  00:8AAB  32 7A F0            		LD [DelyCnt],A
     823:  00:8AAE                      
     824:  00:8AAE  DD 21 23 F0         .PL2:		LD IX,ChanA
     825:  00:8AB2  2A 40 F1            		LD HL,[AYREGS+AR_TonA]
     826:  00:8AB5  CD C6 88            		CALL CHREGS
     827:  00:8AB8  22 40 F1            		LD [AYREGS+AR_TonA],HL
     828:  00:8ABB  3A 4A F1            		LD A,[AYREGS+AR_AmplC]
     829:  00:8ABE  32 48 F1            		LD [AYREGS+AR_AmplA],A
     830:  00:8AC1  DD 21 40 F0         		LD IX,ChanB
     831:  00:8AC5  2A 42 F1            		LD HL,[AYREGS+AR_TonB]
     832:  00:8AC8  CD C6 88            		CALL CHREGS
     833:  00:8ACB  22 42 F1            		LD [AYREGS+AR_TonB],HL
     834:  00:8ACE  3A 4A F1            		LD A,[AYREGS+AR_AmplC]
     835:  00:8AD1  32 49 F1            		LD [AYREGS+AR_AmplB],A
     836:  00:8AD4  DD 21 5D F0         		LD IX,ChanC
     837:  00:8AD8  2A 44 F1            		LD HL,[AYREGS+AR_TonC]
     838:  00:8ADB  CD C6 88            		CALL CHREGS
     839:  00:8ADE  22 44 F1            		LD [AYREGS+AR_TonC],HL
     840:  00:8AE1                      
     841:  00:8AE1  2A 7E F0            		LD HL,[Ns_Base_AddToNs]
     842:  00:8AE4  7C                  		LD A,H
     843:  00:8AE5  85                  		ADD A,L
     844:  00:8AE6  32 46 F1            		LD [AYREGS+AR_Noise],A
     845:  00:8AE9                      
     846:  00:8AE9  3A 1D F0            		LD A,[PT3_AddToEn]
     847:  00:8AEC  5F                  		LD E,A
     848:  00:8AED  87                  		ADD A,A
     849:  00:8AEE  9F                  		SBC A,A
     850:  00:8AEF  57                  		LD D,A
     851:  00:8AF0  2A 4E F1            		LD HL,[EnvBase]
     852:  00:8AF3  19                  		ADD HL,DE
     853:  00:8AF4  ED 5B 7B F0         		LD DE,[CurESld]
     854:  00:8AF8  19                  		ADD HL,DE
     855:  00:8AF9  22 4B F1            		LD [AYREGS+AR_Env],HL
     856:  00:8AFC                      
     857:  00:8AFC  AF                  		XOR A
     858:  00:8AFD  21 7D F0            		LD HL,CurEDel
     859:  00:8B00  B6                  		OR [HL]
     860:  00:8B01  C8                  		RET Z
     861:  00:8B02  35                  		DEC [HL]
     862:  00:8B03  C0                  		RET NZ
     863:  00:8B04  3A 1E F0            		LD A,[PT3_Env_Del]
     864:  00:8B07  77                  		LD [HL],A
     865:  00:8B08  2A 1F F0            		LD HL,[PT3_ESldAdd]
     866:  00:8B0B  19                  		ADD HL,DE
     867:  00:8B0C  22 7B F0            		LD [CurESld],HL
     868:  00:8B0F  C9                  		RET
     869:  00:8B10                      
     870:  00:8B10  AF                  PT3_ROUT:	XOR A
     871:  00:8B11                      	
     872:  00:8B11                      ROUT_A0:	; --- FIXES BITS 6 AND 7 OF MIXER ---
     873:  00:8B11  21 47 F1            		LD	HL,AYREGS+AR_Mixer
     874:  00:8B14  CB FE               		set	7,[hl]
     875:  00:8B16  CB B6               		res	6,[hl]
     876:  00:8B18                      
     877:  00:8B18  0E A0               		LD C,$A0
     878:  00:8B1A  21 40 F1            		LD HL,AYREGS
     879:  00:8B1D  ED 79               .LOUT:		OUT [C],A
     880:  00:8B1F  0C                  		INC C
     881:  00:8B20  ED A3               		OUTI 
     882:  00:8B22  0D                  		DEC C
     883:  00:8B23  3C                  		INC A
     884:  00:8B24  FE 0D               		CP 13
     885:  00:8B26  20 F5               		JR NZ,.LOUT
     886:  00:8B28  ED 79               		OUT [C],A
     887:  00:8B2A  7E                  		LD A,[HL]
     888:  00:8B2B  A7                  		AND A
     889:  00:8B2C  F8                  		RET M
     890:  00:8B2D  0C                  		INC C
     891:  00:8B2E  ED 79               		OUT [C],A
     892:  00:8B30  C9                  		RET
     893:  00:8B31                      
     894:  00:8B31  64                  NT_DATA:	db (T_NEW_0-T1_)*2
     895:  00:8B32  2A                  		db TCNEW_0-T_
     896:  00:8B33  65                  		db (T_OLD_0-T1_)*2+1
     897:  00:8B34  00                  		db TCOLD_0-T_
     898:  00:8B35  01                  		db (T_NEW_1-T1_)*2+1
     899:  00:8B36  0C                  		db TCNEW_1-T_
     900:  00:8B37  01                  		db (T_OLD_1-T1_)*2+1
     901:  00:8B38  0C                  		db TCOLD_1-T_
     902:  00:8B39  94                  		db (T_NEW_2-T1_)*2
     903:  00:8B3A  35                  		db TCNEW_2-T_
     904:  00:8B3B  30                  		db (T_OLD_2-T1_)*2
     905:  00:8B3C  0E                  		db TCOLD_2-T_
     906:  00:8B3D  60                  		db (T_NEW_3-T1_)*2
     907:  00:8B3E  20                  		db TCNEW_3-T_
     908:  00:8B3F  60                  		db (T_OLD_3-T1_)*2
     909:  00:8B40  21                  		db TCOLD_3-T_
     910:  00:8B41                      
     911:  00:8B41                      T_:
     912:  00:8B41                      
     913:  00:8B41                      TCOLD_0:	db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
     913:  00:8B41  01 05 09 0B 0D 0F 13 15 
     914:  00:8B49  19 25 3D 00         		db $18+1,$24+1,$3C+1,0
     915:  00:8B4D                      TCNEW_1:	
     916:  00:8B4D  5D 00               TCOLD_1:	db $5C+1,0
     917:  00:8B4F                      TCOLD_2:	db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
     917:  00:8B4F  31 37 4D 53 5F 71 82 8C 9C 
     918:  00:8B58                      		db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
     918:  00:8B58  9E A0 A6 A8 AA AC AE AE 00 
     919:  00:8B61  57                  TCNEW_3:	db $56+1
     920:  00:8B62                      TCOLD_3:	db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
     920:  00:8B62  1F 23 25 29 2D 2F 33 BF 00 
     921:  00:8B6B                      TCNEW_0:	db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
     921:  00:8B6B  1D 21 23 27 2B 2D 31 55 
     922:  00:8B73  BD BF 00            		db $BC+1,$BE+1,0
     923:  00:8B76                      TCNEW_2:	db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
     923:  00:8B76  1B 21 25 29 2B 3B 4D 5F 
     924:  00:8B7E  BB BD BF            		db $BA+1,$BC+1,$BE+1
     925:  00:8B81                      
     926:  00:8B81  00 01 00 90         EMPTYSAMORN: 	db 0,1,0,$90 ;delete $90 if you don't need default sample
     927:  00:8B85                      
     928:  00:8B85                      T_PACK:		; First 12 values of tone tables (packed)
     929:  00:8B85  0D                  		db ($06EC*2)/256
     930:  00:8B86  D8                  		db #d8
     931:  00:8B87  69                  		db $0755-$06EC
     932:  00:8B88  70                  		db $07C5-$0755
     933:  00:8B89  76                  		db $083B-$07C5
     934:  00:8B8A  7D                  		db $08B8-$083B
     935:  00:8B8B  85                  		db $093D-$08B8
     936:  00:8B8C  8D                  		db $09CA-$093D
     937:  00:8B8D  95                  		db $0A5F-$09CA
     938:  00:8B8E  9D                  		db $0AFC-$0A5F
     939:  00:8B8F  A8                  		db $0BA4-$0AFC
     940:  00:8B90  B1                  		db $0C55-$0BA4
     941:  00:8B91  BB                  		db $0D10-$0C55
     942:  00:8B92  0C                  		db ($066D*2)/256
     943:  00:8B93  DA                  		db #da
     944:  00:8B94  62                  		db $06CF-$066D
     945:  00:8B95  68                  		db $0737-$06CF
     946:  00:8B96  6D                  		db $07A4-$0737
     947:  00:8B97  75                  		db $0819-$07A4
     948:  00:8B98  7B                  		db $0894-$0819
     949:  00:8B99  83                  		db $0917-$0894
     950:  00:8B9A  8A                  		db $09A1-$0917
     951:  00:8B9B  92                  		db $0A33-$09A1
     952:  00:8B9C  9C                  		db $0ACF-$0A33
     953:  00:8B9D  A4                  		db $0B73-$0ACF
     954:  00:8B9E  AF                  		db $0C22-$0B73
     955:  00:8B9F  B8                  		db $0CDA-$0C22
     956:  00:8BA0  0E                  		db ($0704*2)/256
     957:  00:8BA1  08                  		db #08
     958:  00:8BA2  6A                  		db $076E-$0704
     959:  00:8BA3  72                  		db $07E0-$076E
     960:  00:8BA4  78                  		db $0858-$07E0
     961:  00:8BA5  7E                  		db $08D6-$0858
     962:  00:8BA6  86                  		db $095C-$08D6
     963:  00:8BA7  90                  		db $09EC-$095C
     964:  00:8BA8  96                  		db $0A82-$09EC
     965:  00:8BA9  A0                  		db $0B22-$0A82
     966:  00:8BAA  AA                  		db $0BCC-$0B22
     967:  00:8BAB  B4                  		db $0C80-$0BCC
     968:  00:8BAC  BE                  		db $0D3E-$0C80
     969:  00:8BAD  0F                  		db ($07E0*2)/256
     970:  00:8BAE  C0                  		db #c0
     971:  00:8BAF  78                  		db $0858-$07E0
     972:  00:8BB0  88                  		db $08E0-$0858
     973:  00:8BB1  80                  		db $0960-$08E0
     974:  00:8BB2  90                  		db $09F0-$0960
     975:  00:8BB3  98                  		db $0A88-$09F0
     976:  00:8BB4  A0                  		db $0B28-$0A88
     977:  00:8BB5  B0                  		db $0BD8-$0B28
     978:  00:8BB6  A8                  		db $0C80-$0BD8
     979:  00:8BB7  E0                  		db $0D60-$0C80
     980:  00:8BB8  B0                  		db $0E10-$0D60
     981:  00:8BB9  E8                  		db $0EF8-$0E10
      61.  00:8BBA                      	include "ayFX-ROM_sjasm.asm"
       1:  00:8BBA                      		; --- ayFX REPLAYER v1.31 ---
       2:  00:8BBA                      
       3:  00:8BBA                      		; --- v1.31	Fixed bug on previous version, only PSG channel C worked
       4:  00:8BBA                      		; --- v1.3	Fixed volume and Relative volume versions on the same file, conditional compilation
       5:  00:8BBA                      		; ---		Support for dynamic or fixed channel allocation
       6:  00:8BBA                      		; --- v1.2f/r	ayFX bank support
       7:  00:8BBA                      		; --- v1.11f/r	If a frame volume is zero then no AYREGS update
       8:  00:8BBA                      		; --- v1.1f/r	Fixed volume for all ayFX streams
       9:  00:8BBA                      		; --- v1.1	Explicit priority (as suggested by AR)
      10:  00:8BBA                      		; --- v1.0f	Bug fixed (error when using noise)
      11:  00:8BBA                      		; --- v1.0	Initial release
      12:  00:8BBA                      
      13:  00:8BBA                      		; --- DEFINE AYFXRELATIVE AS 0 FOR FIXED VOLUME VERSION ---
      14:  00:8BBA                      		; --- DEFINE AYFXRELATIVE AS 1 FOR RELATIVE VOLUME VERSION ---
      15:  00:8BBA  (00:0000)           AYFXRELATIVE equ 0
      16:  00:8BBA                      
      17:  00:8BBA                      ayFX_SETUP:	; ---          ayFX replayer setup          ---
      18:  00:8BBA                      		; --- INPUT: HL -> pointer to the ayFX bank ---
      19:  00:8BBA  22 41 F2            		ld	[ayFX_BANK],hl			; Current ayFX bank
      20:  00:8BBD  3E 01               		ld	a,1				; a:=0
      21:  00:8BBF  32 40 F2            		ld	[ayFX_MODE],a			; Initial mode: fixed channel
      22:  00:8BC2  3C                  		inc	a				; Starting channel (=1)
      23:  00:8BC3  32 4A F2            		ld	[ayFX_CHANNEL],a		; Updated
      24:  00:8BC6                      ayFX_END:	; --- End of an ayFX stream ---
      25:  00:8BC6  3E FF               		ld	a,255				; Lowest ayFX priority
      26:  00:8BC8  32 43 F2            		ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      27:  00:8BCB  C9                  		ret					; Return
      28:  00:8BCC                      
      29:  00:8BCC                      ayFX_INIT:	; ---     INIT A NEW ayFX STREAM     ---
      30:  00:8BCC                      		; --- INPUT: A -> sound to be played ---
      31:  00:8BCC                      		; ---        C -> sound priority     ---
      32:  00:8BCC  C5                  		push	bc				; Store bc in stack
      33:  00:8BCD  D5                  		push	de				; Store de in stack
      34:  00:8BCE  E5                  		push	hl				; Store hl in stack
      35:  00:8BCF                      		; --- Check if the index is in the bank ---
      36:  00:8BCF  47                  		ld	b,a				; b:=a (new ayFX stream index)
      37:  00:8BD0  2A 41 F2            		ld	hl,[ayFX_BANK]			; Current ayFX BANK
      38:  00:8BD3  7E                  		ld	a,[hl]				; Number of samples in the bank
      39:  00:8BD4  B7                  		or	a				; If zero (means 256 samples)...
      40:  00:8BD5  28 06               		jr	z,.CHECK_PRI			; ...goto .CHECK_PRI
      41:  00:8BD7                      		; The bank has less than 256 samples
      42:  00:8BD7  78                  		ld	a,b				; a:=b (new ayFX stream index)
      43:  00:8BD8  BE                  		cp	[hl]				; If new index is not in the bank...
      44:  00:8BD9  3E 02               		ld	a,2				; a:=2 (error 2: Sample not in the bank)
      45:  00:8BDB  30 21               		jr	nc,.INIT_END			; ...we can't init it
      46:  00:8BDD                      .CHECK_PRI:	; --- Check if the new priority is lower than the current one ---
      47:  00:8BDD                      		; ---   Remember: 0 = highest priority, 15 = lowest priority  ---
      48:  00:8BDD  78                  		ld	a,b				; a:=b (new ayFX stream index)
      49:  00:8BDE  3A 43 F2            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
      50:  00:8BE1  B9                  		cp	c				; If new ayFX stream priority is lower than current one...
      51:  00:8BE2  3E 01               		ld	a,1				; a:=1 (error 1: A sample with higher priority is being played)
      52:  00:8BE4  38 18               		jr	c,.INIT_END			; ...we don't start the new ayFX stream
      53:  00:8BE6                      		; --- Set new priority ---
      54:  00:8BE6  79                  		ld	a,c				; a:=New priority
      55:  00:8BE7  E6 0F               		and	$0F				; We mask the priority
      56:  00:8BE9  32 43 F2            		ld	[ayFX_PRIORITY],a		; new ayFX stream priority saved in RAM
      57:  00:8BEC                      
      58:  00:8BEC                      		IF ( AYFXRELATIVE == 1 )
      59:  00:8BEC                    ~ 			; --- Volume adjust using PT3 volume table ---
      60:  00:8BEC                    ~ 			ld	c,a				; c:=New priority (fixed)
      61:  00:8BEC                    ~ 			ld	a,15				; a:=15
      62:  00:8BEC                    ~ 			sub	c				; a:=15-New priority = relative volume
      63:  00:8BEC                    ~ 			jr	z,.INIT_NOSOUND		; If priority is 15 -> no sound output (volume is zero)
      64:  00:8BEC                    ~ 			add	a,a				; a:=a*2
      65:  00:8BEC                    ~ 			add	a,a				; a:=a*4
      66:  00:8BEC                    ~ 			add	a,a				; a:=a*8
      67:  00:8BEC                    ~ 			add	a,a				; a:=a*16
      68:  00:8BEC                    ~ 			ld	e,a				; e:=a
      69:  00:8BEC                    ~ 			ld	d,0				; de:=a
      70:  00:8BEC                    ~ 			ld	hl,VT_				; hl:=PT3 volume table
      71:  00:8BEC                    ~ 			add	hl,de				; hl is a pointer to the relative volume table
      72:  00:8BEC                    ~ 			ld	[ayFX_VT],hl			; Save pointer
      73:  00:8BEC                    ~ 		ENDIF
      74:  00:8BEC                      
      75:  00:8BEC                      		; --- Calculate the pointer to the new ayFX stream ---
      76:  00:8BEC  ED 5B 41 F2         		ld	de,[ayFX_BANK]			; de:=Current ayFX bank
      77:  00:8BF0  13                  		inc	de				; de points to the increments table of the bank
      78:  00:8BF1  68                  		ld	l,b				; l:=b (new ayFX stream index)
      79:  00:8BF2  26 00               		ld	h,0				; hl:=b (new ayFX stream index)
      80:  00:8BF4  29                  		add	hl,hl				; hl:=hl*2
      81:  00:8BF5  19                  		add	hl,de				; hl:=hl+de (hl points to the correct increment)
      82:  00:8BF6  5E                  		ld	e,[hl]				; e:=lower byte of the increment
      83:  00:8BF7  23                  		inc	hl				; hl points to the higher byte of the correct increment
      84:  00:8BF8  56                  		ld	d,[hl]				; de:=increment
      85:  00:8BF9  19                  		add	hl,de				; hl:=hl+de (hl points to the new ayFX stream)
      86:  00:8BFA  22 44 F2            		ld	[ayFX_POINTER],hl		; Pointer saved in RAM
      87:  00:8BFD  AF                  		xor	a				; a:=0 (no errors)
      88:  00:8BFE  E1                  .INIT_END:	pop	hl				; Retrieve hl from stack
      89:  00:8BFF  D1                  		pop	de				; Retrieve de from stack
      90:  00:8C00  C1                  		pop	bc				; Retrieve bc from stack
      91:  00:8C01  C9                  		ret					; Return
      92:  00:8C02                      
      93:  00:8C02                      		IF ( AYFXRELATIVE == 1 )
      94:  00:8C02                    ~ .INIT_NOSOUND:	; --- Init a sample with relative volume zero -> no sound output ---
      95:  00:8C02                    ~ 			ld	a,255				; Lowest ayFX priority
      96:  00:8C02                    ~ 			ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      97:  00:8C02                    ~ 			jr	.INIT_END			; Jumps to .INIT_END
      98:  00:8C02                    ~ 		ENDIF
      99:  00:8C02                      
     100:  00:8C02                      ayFX_PLAY:	; --- PLAY A FRAME OF AN ayFX STREAM ---
     101:  00:8C02  3A 43 F2            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
     102:  00:8C05  B7                  		or	a				; If priority has bit 7 on...
     103:  00:8C06  F8                  		ret	m				; ...return
     104:  00:8C07                      		; --- Calculate next ayFX channel (if needed) ---
     105:  00:8C07  3A 40 F2            		ld	a,[ayFX_MODE]			; ayFX mode
     106:  00:8C0A  E6 01               		and	1				; If bit0=0 (fixed channel)...
     107:  00:8C0C  28 08               		jr	z,.TAKECB			; ...skip channel changing
     108:  00:8C0E  21 4A F2            		ld	hl,ayFX_CHANNEL			; Old ayFX playing channel
     109:  00:8C11  35                  		dec	[hl]				; New ayFX playing channel
     110:  00:8C12  20 02               		jr	nz,.TAKECB			; If not zero jump to .TAKECB
     111:  00:8C14  36 03               		ld	[hl],3				; If zero -> set channel 3
     112:  00:8C16                      .TAKECB:	; --- Extract control byte from stream ---
     113:  00:8C16  2A 44 F2            		ld	hl,[ayFX_POINTER]		; Pointer to the current ayFX stream
     114:  00:8C19  4E                  		ld	c,[hl]				; c:=Control byte
     115:  00:8C1A  23                  		inc	hl				; Increment pointer
     116:  00:8C1B                      		; --- Check if there's new tone on stream ---
     117:  00:8C1B  CB 69               		bit	5,c				; If bit 5 c is off...
     118:  00:8C1D  28 08               		jr	z,.CHECK_NN			; ...jump to .CHECK_NN (no new tone)
     119:  00:8C1F                      		; --- Extract new tone from stream ---
     120:  00:8C1F  5E                  		ld	e,[hl]				; e:=lower byte of new tone
     121:  00:8C20  23                  		inc	hl				; Increment pointer
     122:  00:8C21  56                  		ld	d,[hl]				; d:=higher byte of new tone
     123:  00:8C22  23                  		inc	hl				; Increment pointer
     124:  00:8C23  ED 53 46 F2         		ld	[ayFX_TONE],de			; ayFX tone updated
     125:  00:8C27                      .CHECK_NN:	; --- Check if there's new noise on stream ---
     126:  00:8C27  CB 71               		bit	6,c				; if bit 6 c is off...
     127:  00:8C29  28 09               		jr	z,.SETPOINTER			; ...jump to .SETPOINTER (no new noise)
     128:  00:8C2B                      		; --- Extract new noise from stream ---
     129:  00:8C2B  7E                  		ld	a,[hl]				; a:=New noise
     130:  00:8C2C  23                  		inc	hl				; Increment pointer
     131:  00:8C2D  FE 20               		cp	$20				; If it's an illegal value of noise (used to mark end of stream)...
     132:  00:8C2F  28 95               		jr.	z,ayFX_END			; ...jump to ayFX_END
     133:  00:8C31  32 48 F2            		ld	[ayFX_NOISE],a			; ayFX noise updated
     134:  00:8C34                      .SETPOINTER:	; --- Update ayFX pointer ---
     135:  00:8C34  22 44 F2            		ld	[ayFX_POINTER],hl		; Update ayFX stream pointer
     136:  00:8C37                      		; --- Extract volume ---
     137:  00:8C37  79                  		ld	a,c				; a:=Control byte
     138:  00:8C38  E6 0F               		and	$0F				; lower nibble
     139:  00:8C3A                      
     140:  00:8C3A                      		IF ( AYFXRELATIVE == 1 )
     141:  00:8C3A                    ~ 			; --- Fix the volume using PT3 Volume Table ---
     142:  00:8C3A                    ~ 			ld	hl,[ayFX_VT]			; hl:=Pointer to relative volume table
     143:  00:8C3A                    ~ 			ld	e,a				; e:=a (ayFX volume)
     144:  00:8C3A                    ~ 			ld	d,0				; d:=0
     145:  00:8C3A                    ~ 			add	hl,de				; hl:=hl+de (hl points to the relative volume of this frame
     146:  00:8C3A                    ~ 			ld	a,[hl]				; a:=ayFX relative volume
     147:  00:8C3A                    ~ 			or	a				; If relative volume is zero...
     148:  00:8C3A                    ~ 		ENDIF
     149:  00:8C3A                      
     150:  00:8C3A  32 49 F2            		ld	[ayFX_VOLUME],a			; ayFX volume updated
     151:  00:8C3D  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     152:  00:8C3E                      		; -------------------------------------
     153:  00:8C3E                      		; --- COPY ayFX VALUES IN TO AYREGS ---
     154:  00:8C3E                      		; -------------------------------------
     155:  00:8C3E                      		; --- Set noise channel ---
     156:  00:8C3E  CB 79               		bit	7,c				; If noise is off...
     157:  00:8C40  20 06               		jr	nz,.SETMASKS			; ...jump to .SETMASKS
     158:  00:8C42  3A 48 F2            		ld	a,[ayFX_NOISE]			; ayFX noise value
     159:  00:8C45  32 46 F1            		ld	[AYREGS+6],a			; copied in to AYREGS (noise channel)
     160:  00:8C48                      .SETMASKS:	; --- Set mixer masks ---
     161:  00:8C48  79                  		ld	a,c				; a:=Control byte
     162:  00:8C49  E6 90               		and	$90				; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     163:  00:8C4B  FE 90               		cp	$90				; If no noise and no tone...
     164:  00:8C4D  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     165:  00:8C4E                      		; --- Copy ayFX values in to ARYREGS ---
     166:  00:8C4E  0F                  		rrca					; Rotate a to the right (1 TIME)
     167:  00:8C4F  0F                  		rrca					; Rotate a to the right (2 TIMES) (OR mask)
     168:  00:8C50  16 DB               		ld	d,$DB				; d:=Mask for psg mixer (AND mask)
     169:  00:8C52                      		; --- Dump to correct channel ---
     170:  00:8C52  21 4A F2            		ld	hl,ayFX_CHANNEL			; Next ayFX playing channel
     171:  00:8C55  46                  		ld	b,[hl]				; Channel counter
     172:  00:8C56                      .CHK1:		; --- Check if playing channel was 1 ---
     173:  00:8C56  10 0D               		djnz	.CHK2				; Decrement and jump if channel was not 1
     174:  00:8C58                      .PLAY_C:	; --- Play ayFX stream on channel C ---
     175:  00:8C58  CD 87 8C            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     176:  00:8C5B  32 4A F1            		ld	[AYREGS+10],a			; Volume copied in to AYREGS (channel C volume)
     177:  00:8C5E  CB 51               		bit	2,c				; If tone is off...
     178:  00:8C60  C0                  		ret	nz				; ...return
     179:  00:8C61  22 44 F1            		ld	[AYREGS+4],hl			; copied in to AYREGS (channel C tone)
     180:  00:8C64  C9                  		ret					; Return
     181:  00:8C65                      .CHK2:		; --- Check if playing channel was 2 ---
     182:  00:8C65  CB 0A               		rrc	d				; Rotate right AND mask
     183:  00:8C67  0F                  		rrca					; Rotate right OR mask
     184:  00:8C68  10 0D               		djnz	.CHK3				; Decrement and jump if channel was not 2
     185:  00:8C6A                      .PLAY_B:	; --- Play ayFX stream on channel B ---
     186:  00:8C6A  CD 87 8C            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     187:  00:8C6D  32 49 F1            		ld	[AYREGS+9],a			; Volume copied in to AYREGS (channel B volume)
     188:  00:8C70  CB 49               		bit	1,c				; If tone is off...
     189:  00:8C72  C0                  		ret	nz				; ...return
     190:  00:8C73  22 42 F1            		ld	[AYREGS+2],hl			; copied in to AYREGS (channel B tone)
     191:  00:8C76  C9                  		ret					; Return
     192:  00:8C77                      .CHK3:		; --- Check if playing channel was 3 ---
     193:  00:8C77  CB 0A               		rrc	d				; Rotate right AND mask
     194:  00:8C79  0F                  		rrca					; Rotate right OR mask
     195:  00:8C7A                      .PLAY_A:	; --- Play ayFX stream on channel A ---
     196:  00:8C7A  CD 87 8C            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     197:  00:8C7D  32 48 F1            		ld	[AYREGS+8],a			; Volume copied in to AYREGS (channel A volume)
     198:  00:8C80  CB 41               		bit	0,c				; If tone is off...
     199:  00:8C82  C0                  		ret	nz				; ...return
     200:  00:8C83  22 40 F1            		ld	[AYREGS+0],hl			; copied in to AYREGS (channel A tone)
     201:  00:8C86  C9                  		ret					; Return
     202:  00:8C87                      .SETMIXER:	; --- Set PSG mixer value ---
     203:  00:8C87  4F                  		ld	c,a				; c:=OR mask
     204:  00:8C88  3A 47 F1            		ld	a,[AYREGS+7]			; a:=PSG mixer value
     205:  00:8C8B  A2                  		and	d				; AND mask
     206:  00:8C8C  B1                  		or	c				; OR mask
     207:  00:8C8D  32 47 F1            		ld	[AYREGS+7],a			; PSG mixer value updated
     208:  00:8C90  3A 49 F2            		ld	a,[ayFX_VOLUME]			; a:=ayFX volume value
     209:  00:8C93  2A 46 F2            		ld	hl,[ayFX_TONE]			; ayFX tone value
     210:  00:8C96  C9                  		ret					; Return
     211:  00:8C97                      
     212:  00:8C97                      		IF ( AYFXRELATIVE == 1 )
     213:  00:8C97                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     214:  00:8C97                    ~ 		;VT_:	.INCBIN	"VT.BIN"
     215:  00:8C97                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     216:  00:8C97                    ~ 		ENDIF
      62.  00:8C97                      	
      63.  00:8C97                      	
      64.  00:8C97                      
      65.  00:8C97                      ;;=====================================================
      66.  00:8C97                      ;;DEFINICIÓN DE CANTIONES Y EFECTOS DE SONIDO
      67.  00:8C97                      ;;=====================================================		
      68.  00:8C97                      song:
      69.  00:8C97  (0968)              	incbin "bloodytears_castlevania.99"
      70.  00:95FF                      	
      71.  00:95FF                      sfx_bank:
      72.  00:95FF  (004B)              	incbin "demo.afb"
      73.  00:964A                      
     109   00:964A                      	
     110   00:964A                      
     111   00:964A                      ;;=====================================================
     112   00:964A                      ;;DEFINICIÓN DE SUBRUTINAS DE FERNANDO PARA COMPRESIÓN Y SONIDO
     113   00:964A                      ;;=====================================================
     114   00:964A                      ;Este include lleva la rutina de descompresión de ROM/RAM a VRAM de pletter
     115   00:964A                      ;Está adaptada de la original a sjasm
     116   00:964A                      ;	HL = RAM/ROM source	; DE = VRAM destination
     117   00:964A                      depack_VRAM:
     118   00:964A                      	include "PL_VRAM_Depack_SJASM.asm"
       1.  00:964A                      ;-----------------------------------------------------------
       2.  00:964A                      ; Pletter v0.5b VRAM Depacker v1.1 - 16Kb version
       3.  00:964A                      ; HL = RAM/ROM source ; DE = VRAM destination
       4.  00:964A                      ;-----------------------------------------------------------
       5.  00:964A  F3                  	di
       6.  00:964B                      
       7.  00:964B                      ; VRAM address setup
       8.  00:964B  7B                  	ld	a,e
       9.  00:964C  D3 99               	out	[099h],a
      10.  00:964E  7A                  	ld	a,d
      11.  00:964F  F6 40               	or	040h
      12.  00:9651  D3 99               	out	[099h],a
      13.  00:9653                      
      14.  00:9653                      ; Initialization
      15.  00:9653  7E                  	ld	a,[hl]
      16.  00:9654  23                  	inc	hl
      17.  00:9655  D9                  	exx
      18.  00:9656  11 00 00            	ld	de,0
      19.  00:9659  87                  	add	a,a
      20.  00:965A  3C                  	inc	a
      21.  00:965B  CB 13               	rl	e
      22.  00:965D  87                  	add	a,a
      23.  00:965E  CB 13               	rl	e
      24.  00:9660  87                  	add	a,a
      25.  00:9661  CB 13               	rl	e
      26.  00:9663  CB 13               	rl	e
      27.  00:9665  21 1C 97            	ld	hl,modes
      28.  00:9668  19                  	add	hl,de
      29.  00:9669  5E                  	ld	e,[hl]
      30.  00:966A  DD 6B               	ld	ixl,e
      31.  00:966C  23                  	inc	hl
      32.  00:966D  5E                  	ld	e,[hl]
      33.  00:966E  DD 63               	ld	ixh,e
      34.  00:9670  1E 01               	ld	e,1
      35.  00:9672  D9                  	exx
      36.  00:9673  FD 21 7C 96         	ld	iy,loop
      37.  00:9677                      
      38.  00:9677                      ; Main depack loop
      39.  00:9677  0E 98               literal:ld	c,098h
      40.  00:9679  ED A3               	outi
      41.  00:967B  13                  	inc	de
      42.  00:967C  87                  loop:	add	a,a
      43.  00:967D  CC 10 97              	call	z,getbit
      44.  00:9680  30 F5               	jr	nc,literal
      45.  00:9682                      
      46.  00:9682                      ; Compressed data
      47.  00:9682  D9                  	exx
      48.  00:9683  62                  	ld	h,d
      49.  00:9684  6B                  	ld	l,e
      50.  00:9685  87                  getlen: add	a,a
      51.  00:9686  CC 14 97            	call	z,getbitexx
      52.  00:9689  30 1D               	jr	nc,lenok
      53.  00:968B  87                  lus:	add	a,a
      54.  00:968C  CC 14 97            	call	z,getbitexx
      55.  00:968F  ED 6A               	adc	hl,hl
      56.  00:9691  D8                  	ret	c
      57.  00:9692  87                  	add	a,a
      58.  00:9693  CC 14 97            	call	z,getbitexx
      59.  00:9696  30 10               	jr	nc,lenok
      60.  00:9698  87                  	add	a,a
      61.  00:9699  CC 14 97            	call	z,getbitexx
      62.  00:969C  ED 6A               	adc	hl,hl
      63.  00:969E  DA 1A 97            	jp	c,Depack_out
      64.  00:96A1  87                  	add	a,a
      65.  00:96A2  CC 14 97            	call	z,getbitexx
      66.  00:96A5  DA 8B 96            	jp	c,lus
      67.  00:96A8  23                  lenok:  inc	hl
      68.  00:96A9  D9                  	exx
      69.  00:96AA  4E                  	ld	c,[hl]
      70.  00:96AB  23                  	inc	hl
      71.  00:96AC  06 00               	ld	b,0
      72.  00:96AE  CB 79               	bit	7,c
      73.  00:96B0  CA E3 96            	jp	z,offsok
      74.  00:96B3  DD E9               	jp	ix
      75.  00:96B5                      
      76.  00:96B5  87                  mode7:  add	a,a
      77.  00:96B6  CC 10 97              	call	z,getbit
      78.  00:96B9  CB 10               	rl	b
      79.  00:96BB  87                  mode6:	add	a,a
      80.  00:96BC  CC 10 97              	call	z,getbit
      81.  00:96BF  CB 10               	rl	b
      82.  00:96C1  87                  mode5:  add	a,a
      83.  00:96C2  CC 10 97              	call	z,getbit
      84.  00:96C5  CB 10               	rl	b
      85.  00:96C7  87                  mode4:  add	a,a
      86.  00:96C8  CC 10 97              	call	z,getbit
      87.  00:96CB  CB 10               	rl	b
      88.  00:96CD  87                  mode3:  add	a,a
      89.  00:96CE  CC 10 97              	call	z,getbit
      90.  00:96D1  CB 10               	rl	b
      91.  00:96D3  87                  mode2:	add	a,a
      92.  00:96D4  CC 10 97              	call	z,getbit
      93.  00:96D7  CB 10               	rl	b
      94.  00:96D9  87                  	add	a,a
      95.  00:96DA  CC 10 97              	call	z,getbit
      96.  00:96DD  30 04               	jr	nc,offsok
      97.  00:96DF  B7                  	or	a
      98.  00:96E0  04                  	inc	b
      99.  00:96E1  CB B9               	res	7,c
     100.  00:96E3  03                  offsok: inc	bc
     101.  00:96E4  E5                  	push	hl
     102.  00:96E5  D9                  	exx
     103.  00:96E6  E5                  	push	hl
     104.  00:96E7  D9                  	exx
     105.  00:96E8  6B                  	ld	l,e
     106.  00:96E9  62                  	ld	h,d
     107.  00:96EA  ED 42               	sbc	hl,bc
     108.  00:96EC  C1                  	pop	bc
     109.  00:96ED  F5                  	push	af
     110.  00:96EE  7D                  .loop:	ld	a,l
     111.  00:96EF  D3 99               	out	[099h],a
     112.  00:96F1  7C                  	ld	a,h
     113.  00:96F2  00                  	nop                     ; VDP timing
     114.  00:96F3  D3 99               	out	[099h],a
     115.  00:96F5  00                  	nop                     ; VDP timing
     116.  00:96F6  DB 98               	in	a,[098h]
     117.  00:96F8  08                  	ex	af,af'
     118.  00:96F9  7B                  	ld	a,e
     119.  00:96FA  00                  	nop			; VDP timing
     120.  00:96FB  D3 99               	out	[099h],a
     121.  00:96FD  7A                  	ld	a,d
     122.  00:96FE  F6 40               	or	040h
     123.  00:9700  D3 99               	out	[099h],a
     124.  00:9702  08                  	ex	af,af'
     125.  00:9703  00                  	nop			; VDP timing
     126.  00:9704  D3 98               	out	[098h],a
     127.  00:9706  13                  	inc	de
     128.  00:9707  ED A1               	cpi
     129.  00:9709  EA EE 96            	jp	pe,.loop
     130.  00:970C  F1                  	pop	af
     131.  00:970D  E1                  	pop	hl
     132.  00:970E  FD E9               	jp	iy
     133.  00:9710                      
     134.  00:9710  7E                  getbit: ld	a,[hl]
     135.  00:9711  23                  	inc	hl
     136.  00:9712  17                  	rla
     137.  00:9713  C9                  	ret
     138.  00:9714                      
     139.  00:9714                      getbitexx:
     140.  00:9714  D9                  	exx
     141.  00:9715  7E                  	ld	a,[hl]
     142.  00:9716  23                  	inc	hl
     143.  00:9717  D9                  	exx
     144.  00:9718  17                  	rla
     145.  00:9719  C9                  	ret
     146.  00:971A                      
     147.  00:971A                      ; Depacker exit
     148.  00:971A                      Depack_out:
     149.  00:971A  FB                  	ei
     150.  00:971B  C9                  	ret
     151.  00:971C                      
     152.  00:971C                      modes:
     153.  00:971C  E3 96               	dw	offsok
     154.  00:971E  D3 96               	dw	mode2
     155.  00:9720  CD 96               	dw	mode3
     156.  00:9722  C7 96               	dw	mode4
     157.  00:9724  C1 96               	dw	mode5
     158.  00:9726  BB 96               	dw	mode6
     159.  00:9728  B5 96               	dw	mode7
     119   00:972A                      
     120   00:972A                      
     121   00:972A                      	
     122   00:972A                      ;;=====================================================
     123   00:972A                      ;;DEFINICIÓN DE ESTRUCTURAS
     124   00:972A                      ;;=====================================================		
     125   00:972A                      	include "estructuras.asm"
       1.  00:972A                      ;;=====================================================
       2.  00:972A                      ;;DEFINICIÓN DE ESTRUCTURAS
       3.  00:972A                      ;;=====================================================
       4.  00:972A                      
       5.  00:972A                      ;crear estructura
       6.  00:972A                      
       7.  00:972A                      	STRUCT ESTRUCTURA_PUNTOMIRA
       8.  00:972A                    < posx			DB		100
       9.  00:972A                    < posy			DB		100
      10.  00:972A                    < escena			DB		0	;valores porsibles 0 (blanco+rojo en punto de mira) y NEG 0 (al revés)
      11.  00:972A                    < velocidad		DB		0
      12.  00:972A                    < boton2_pressed  DB		0
      13.  00:972A                    < ; al final he decidido (ya que el punto de mira es el prota) que lo relacionado con el prota vaya en esta estructura
      14.  00:972A                    < pm_aux1			DB		0	;para llegar a los 16 campos
      15.  00:972A                    < pm_aux2			DB		0	;para llegar a los 16 campos
      16.  00:972A                    < pm_aux3			DB		0	;para llegar a los 16 campos
      17.  00:972A                    < pm_aux4			DB		0	;para llegar a los 16 campos
      18.  00:972A                    < pm_aux5			DB		0	;para llegar a los 16 campos
      19.  00:972A                    < pm_aux6			DB		0	;para llegar a los 16 campos
      20.  00:972A                    < pm_aux7			DB		0	;para llegar a los 16 campos
      21.  00:972A                    < pm_aux8			DB		0	;para llegar a los 16 campos
      22.  00:972A                    < pm_aux9			DB		0	;para llegar a los 16 campos
      23.  00:972A                    < pm_aux10		DB		0	;para llegar a los 16 campos
      24.  00:972A                    < pm_aux11		DB		0	;para llegar a los 16 campos
      25.  00:972A                    < 	ENDSTRUCT;ESTRUCTURA_PUNTOMIRA
      26.  00:972A                      
      27.  00:972A                      	
      28.  00:972A                      	STRUCT ESTRUCTURA_ENEMIGO
      29.  00:972A                    < tipo				DB		0	;(0 serpiente por ejemplo) #FF muerto o no existe
      30.  00:972A                    < posx				DB		5
      31.  00:972A                    < posy				DB		50
      32.  00:972A                    < color				DB		5
      33.  00:972A                    < escena				DB		0
      34.  00:972A                    < contador_siguiente_escena	DB	0
      35.  00:972A                    < reset_contador		DB		0
      36.  00:972A                    < dano				DB		0	;daño
      37.  00:972A                    < energia				DB		0	;energía del enemigo... si llega a 0 => existe <- 0
      38.  00:972A                    < ;indica el nº de sprite a mostrar y si está compuesto por uno o dos sprites y si están en horizontal o vertical
      39.  00:972A                    < ver_hor				DB		0
      40.  00:972A                    < manejador_dibujo 	DW		0
      41.  00:972A                    < en_aux3				DB		0
      42.  00:972A                    < en_aux4				DB		0
      43.  00:972A                    < 	ENDSTRUCT;ESTRUCTURA_ENEMIGO
      44.  00:972A                      	
      45.  00:972A                      	STRUCT ESTRUCTURA_EXTRA		;vidas extra, plantas de curación de energía, reliquias	
      46.  00:972A                    < tipo				DB		0	;#FF muerto/usado o no existe
      47.  00:972A                    < posx				DB		50
      48.  00:972A                    < posy				DB		50
      49.  00:972A                    < color				DB		5
      50.  00:972A                    < contador			DB		0	;por si doy dos reliquias en vez de una, por ejemplo
      51.  00:972A                    < en_aux1				DB		0	;para llegar a los 16 campos
      52.  00:972A                    < en_aux2				DB		0
      53.  00:972A                    < en_aux3				DB		0
      54.  00:972A                    < en_aux4				DB		0
      55.  00:972A                    < en_aux5				DB		0
      56.  00:972A                    < en_aux6				DB		0
      57.  00:972A                    < en_aux7				DB		0
      58.  00:972A                    < en_aux8				DB		0
      59.  00:972A                    < en_aux9				DB		0
      60.  00:972A                    < en_aux10			DB		0
      61.  00:972A                    < en_aux11			DB		0
      62.  00:972A                    < 	ENDSTRUCT;ESTRUCTURA_EXTRA
      63.  00:972A                      
      64.  00:972A                      
      65.  00:972A                      
      66.  00:972A                      
      67.  00:972A                      
      68.  00:972A                      
      69.  00:972A                      
     126   00:972A                      	
     127   00:972A                      ;;=====================================================
     128   00:972A                      ;;DEFINICIÓN DE VARIABLES
     129   00:972A                      ;;=====================================================		
     130   00:972A                      	include "sprites.asm"
       1.  00:972A                      ;;=====================================================
       2.  00:972A                      ;;DEFINICIÓN DE SPRITES
       3.  00:972A                      ;;=====================================================	
       4.  00:972A                      sprites_pantantalla:
       5.  00:972A                      
       6.  00:972A                      sprite_punto_mira_1:	;color 8
       7.  00:972A                      	db #FF,#FF,#C0,#C0,#C0,#C0,#C0,#C0
       7.  00:972A  FF FF C0 C0 C0 C0 C0 C0 
       8.  00:9732                      	db #C0,#C0,#C0,#C0,#C0,#C0,#FF,#FF
       8.  00:9732  C0 C0 C0 C0 C0 C0 FF FF 
       9.  00:973A                      	db #FF,#FF,#03,#03,#03,#03,#03,#03
       9.  00:973A  FF FF 03 03 03 03 03 03 
      10.  00:9742                      	db #03,#03,#03,#03,#03,#03,#FF,#FF
      10.  00:9742  03 03 03 03 03 03 FF FF 
      11.  00:974A                      	
      12.  00:974A                      sprite_punto_mira_2: 	;color 15
      13.  00:974A                      	db #00,#00,#00,#00,#0F,#0F,#0C,#0C
      13.  00:974A  00 00 00 00 0F 0F 0C 0C 
      14.  00:9752                      	db #0C,#0C,#0F,#0F,#00,#00,#00,#00
      14.  00:9752  0C 0C 0F 0F 00 00 00 00 
      15.  00:975A                      	db #00,#00,#00,#00,#F0,#F0,#30,#30
      15.  00:975A  00 00 00 00 F0 F0 30 30 
      16.  00:9762                      	db #30,#30,#F0,#F0,#00,#00,#00,#00
      16.  00:9762  30 30 F0 F0 00 00 00 00 
      17.  00:976A                      	
      18.  00:976A                      sprite_punto_mira_1_mejorado:
      19.  00:976A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      19.  00:976A  FF FF FF FF FF FF FF FF 
      20.  00:9772                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      20.  00:9772  FF FF FF FF FF FF FF FF 
      21.  00:977A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      21.  00:977A  FF FF FF FF FF FF FF FF 
      22.  00:9782                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      22.  00:9782  FF FF FF FF FF FF FF FF 
      23.  00:978A                      
      24.  00:978A                      sprite_punto_mira_2_mejorado:
      25.  00:978A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      25.  00:978A  FF FF FF FF FF FF FF FF 
      26.  00:9792                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      26.  00:9792  FF FF FF FF FF FF FF FF 
      27.  00:979A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      27.  00:979A  FF FF FF FF FF FF FF FF 
      28.  00:97A2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      28.  00:97A2  FF FF FF FF FF FF FF FF 
      29.  00:97AA                      	
      30.  00:97AA                      sprite_reliquia:
      31.  00:97AA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      31.  00:97AA  FF FF FF FF FF FF FF FF 
      32.  00:97B2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      32.  00:97B2  FF FF FF FF FF FF FF FF 
      33.  00:97BA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      33.  00:97BA  FF FF FF FF FF FF FF FF 
      34.  00:97C2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      34.  00:97C2  FF FF FF FF FF FF FF FF 
      35.  00:97CA                      	
      36.  00:97CA                      sprite_vida_extra:
      37.  00:97CA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      37.  00:97CA  FF FF FF FF FF FF FF FF 
      38.  00:97D2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      38.  00:97D2  FF FF FF FF FF FF FF FF 
      39.  00:97DA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      39.  00:97DA  FF FF FF FF FF FF FF FF 
      40.  00:97E2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      40.  00:97E2  FF FF FF FF FF FF FF FF 
      41.  00:97EA                      	
      42.  00:97EA                      sprite_planta:
      43.  00:97EA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      43.  00:97EA  FF FF FF FF FF FF FF FF 
      44.  00:97F2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      44.  00:97F2  FF FF FF FF FF FF FF FF 
      45.  00:97FA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      45.  00:97FA  FF FF FF FF FF FF FF FF 
      46.  00:9802                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      46.  00:9802  FF FF FF FF FF FF FF FF 
      47.  00:980A                      	
      48.  00:980A                      sprite_ballesta_mejorada:
      49.  00:980A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      49.  00:980A  FF FF FF FF FF FF FF FF 
      50.  00:9812                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      50.  00:9812  FF FF FF FF FF FF FF FF 
      51.  00:981A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      51.  00:981A  FF FF FF FF FF FF FF FF 
      52.  00:9822                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF	
      52.  00:9822  FF FF FF FF FF FF FF FF 
      53.  00:982A                      	
      54.  00:982A                      sprite_ciempies1:
      55.  00:982A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      55.  00:982A  FF FF FF FF FF FF FF FF 
      56.  00:9832                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      56.  00:9832  FF FF FF FF FF FF FF FF 
      57.  00:983A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      57.  00:983A  FF FF FF FF FF FF FF FF 
      58.  00:9842                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      58.  00:9842  FF FF FF FF FF FF FF FF 
      59.  00:984A                      	
      60.  00:984A                      sprite_ciempies2:
      61.  00:984A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      61.  00:984A  FF FF FF FF FF FF FF FF 
      62.  00:9852                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      62.  00:9852  FF FF FF FF FF FF FF FF 
      63.  00:985A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      63.  00:985A  FF FF FF FF FF FF FF FF 
      64.  00:9862                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      64.  00:9862  FF FF FF FF FF FF FF FF 
      65.  00:986A                      	
      66.  00:986A                      sprite_arana1:
      67.  00:986A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      67.  00:986A  FF FF FF FF FF FF FF FF 
      68.  00:9872                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      68.  00:9872  FF FF FF FF FF FF FF FF 
      69.  00:987A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      69.  00:987A  FF FF FF FF FF FF FF FF 
      70.  00:9882                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      70.  00:9882  FF FF FF FF FF FF FF FF 
      71.  00:988A                      	
      72.  00:988A                      sprite_arana2:
      73.  00:988A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      73.  00:988A  FF FF FF FF FF FF FF FF 
      74.  00:9892                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      74.  00:9892  FF FF FF FF FF FF FF FF 
      75.  00:989A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      75.  00:989A  FF FF FF FF FF FF FF FF 
      76.  00:98A2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      76.  00:98A2  FF FF FF FF FF FF FF FF 
      77.  00:98AA                      	
      78.  00:98AA                      sprite_serpiente1:
      79.  00:98AA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      79.  00:98AA  FF FF FF FF FF FF FF FF 
      80.  00:98B2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      80.  00:98B2  FF FF FF FF FF FF FF FF 
      81.  00:98BA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      81.  00:98BA  FF FF FF FF FF FF FF FF 
      82.  00:98C2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      82.  00:98C2  FF FF FF FF FF FF FF FF 
      83.  00:98CA                      	
      84.  00:98CA                      sprite_serpiente2:
      85.  00:98CA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      85.  00:98CA  FF FF FF FF FF FF FF FF 
      86.  00:98D2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      86.  00:98D2  FF FF FF FF FF FF FF FF 
      87.  00:98DA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      87.  00:98DA  FF FF FF FF FF FF FF FF 
      88.  00:98E2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      88.  00:98E2  FF FF FF FF FF FF FF FF 
      89.  00:98EA                      	
      90.  00:98EA                      sprite_murcielago1:
      91.  00:98EA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      91.  00:98EA  FF FF FF FF FF FF FF FF 
      92.  00:98F2                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      92.  00:98F2  FF FF FF FF FF FF FF FF 
      93.  00:98FA                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      93.  00:98FA  FF FF FF FF FF FF FF FF 
      94.  00:9902                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      94.  00:9902  FF FF FF FF FF FF FF FF 
      95.  00:990A                      	
      96.  00:990A                      sprite_murcielago2:
      97.  00:990A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      97.  00:990A  FF FF FF FF FF FF FF FF 
      98.  00:9912                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      98.  00:9912  FF FF FF FF FF FF FF FF 
      99.  00:991A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      99.  00:991A  FF FF FF FF FF FF FF FF 
     100.  00:9922                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF	
     100.  00:9922  FF FF FF FF FF FF FF FF 
     101.  00:992A                      
     102.  00:992A                      sprite_explosion:
     103.  00:992A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
     103.  00:992A  FF FF FF FF FF FF FF FF 
     104.  00:9932                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
     104.  00:9932  FF FF FF FF FF FF FF FF 
     105.  00:993A                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
     105.  00:993A  FF FF FF FF FF FF FF FF 
     106.  00:9942                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
     106.  00:9942  FF FF FF FF FF FF FF FF 
     107.  00:994A                      	
     108.  00:994A                      	
     109.  00:994A                      	
     131   00:994A                      	
     132   00:994A                      	include "habitaciones.asm"
       1.  00:994A                      ;;=====================================================
       2.  00:994A                      ;;DEFINICIÓN DE HABITACIONES x NIVEL
       3.  00:994A                      ;;=====================================================	
       4.  00:994A                      
       5.  00:994A                      ; sólo voy a usar 7x7 pero como los arrays son lineales y voy a trabajar con matrices
       6.  00:994A                      ; me interesa que seande  8x8 aunque sólo trabaje con 7x7
       7.  00:994A                      
       8.  00:994A                      ; ojo... la primera linea corresponderá a la primera linea del castillo no a la última
       9.  00:994A                      
      10.  00:994A                      ;; definición de estructura de bits
      11.  00:994A                      ;16 bits por habitación
      12.  00:994A                      ;~ 0000 - nº puertas 1 arriba 1 derecha 1 abajo 1 izquierda
      13.  00:994A                      ;~ 1 - hay reliquia?
      14.  00:994A                      ;~ 1 - hay vida extra
      15.  00:994A                      ;~ 1 - hay arma extra (durará 6 pantallas - sonido distinto)
      16.  00:994A                      ;~ 1 - hay energía? (sobran bits ... se puede usar otro como carga energía +)
      17.  00:994A                      ;~ 1 - es pantalla de mostruo fin de fase?
      18.  00:994A                      ;~ 1 - es pantalla inicial (equivaldría a la puerta de un castillo)?
      19.  00:994A                      ;~ 1 - es pantalla final?
      20.  00:994A                      
      21.  00:994A                      
      22.  00:994A                      ;importante: el byte de la columna 15 indicará con 1 y 0 habitaciones por las que se haya pasado
      23.  00:994A                      ;cuando se inicie la partida todos se pondrán a 0
      24.  00:994A                      
      25.  00:994A                      habitacion_actual:
      26.  00:994A  00 00               	db  #00,#00		;habitación donde se encuentre el prota. Se mete en una varible par traer todos los datos de golpe y no buscrlos varias veces
      27.  00:994C                      
      28.  00:994C                      habitaciones_juego:
      29.  00:994C                      habitaciones_nivel0:
      30.  00:994C                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      30.  00:994C  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      31.  00:995C                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      31.  00:995C  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      32.  00:996C                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      32.  00:996C  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      33.  00:997C                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      33.  00:997C  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      34.  00:998C                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      34.  00:998C  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      35.  00:999C                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      35.  00:999C  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      36.  00:99AC                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      36.  00:99AC  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      37.  00:99BC                      	
      38.  00:99BC                      habitaciones_nivel1:
      39.  00:99BC                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      39.  00:99BC  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      40.  00:99CC                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      40.  00:99CC  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      41.  00:99DC                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      41.  00:99DC  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      42.  00:99EC                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      42.  00:99EC  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      43.  00:99FC                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      43.  00:99FC  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      44.  00:9A0C                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      44.  00:9A0C  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      45.  00:9A1C                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      45.  00:9A1C  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      46.  00:9A2C                      	
      47.  00:9A2C                      habitaciones_nivel2:
      48.  00:9A2C                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      48.  00:9A2C  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      49.  00:9A3C                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      49.  00:9A3C  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      50.  00:9A4C                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      50.  00:9A4C  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      51.  00:9A5C                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      51.  00:9A5C  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      52.  00:9A6C                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      52.  00:9A6C  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      53.  00:9A7C                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      53.  00:9A7C  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      54.  00:9A8C                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      54.  00:9A8C  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      55.  00:9A9C                      	
      56.  00:9A9C                      habitaciones_nivel3:
      57.  00:9A9C                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      57.  00:9A9C  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      58.  00:9AAC                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      58.  00:9AAC  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      59.  00:9ABC                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      59.  00:9ABC  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      60.  00:9ACC                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      60.  00:9ACC  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      61.  00:9ADC                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      61.  00:9ADC  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      62.  00:9AEC                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      62.  00:9AEC  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      63.  00:9AFC                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      63.  00:9AFC  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      64.  00:9B0C                      	
      65.  00:9B0C                      habitaciones_nivel4:
      66.  00:9B0C                      	db  00000001b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      66.  00:9B0C  01 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      67.  00:9B1C                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      67.  00:9B1C  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      68.  00:9B2C                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      68.  00:9B2C  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      69.  00:9B3C                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      69.  00:9B3C  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      70.  00:9B4C                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      70.  00:9B4C  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      71.  00:9B5C                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      71.  00:9B5C  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      72.  00:9B6C                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      72.  00:9B6C  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      73.  00:9B7C                      	
      74.  00:9B7C                      habitaciones_nivel5:
      75.  00:9B7C                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      75.  00:9B7C  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      76.  00:9B8C                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      76.  00:9B8C  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      77.  00:9B9C                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      77.  00:9B9C  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      78.  00:9BAC                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      78.  00:9BAC  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      79.  00:9BBC                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      79.  00:9BBC  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      80.  00:9BCC                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      80.  00:9BCC  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      81.  00:9BDC                      	db  00000000b,#00,00000001b,#01,00001010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      81.  00:9BDC  00 00 01 01 0A 02 03 03 08 04 09 05 0C 06 FF 00 
      82.  00:9BEC                      	
      83.  00:9BEC                      habitaciones_nivel6:
      84.  00:9BEC                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      84.  00:9BEC  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      85.  00:9BFC                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      85.  00:9BFC  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      86.  00:9C0C                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      86.  00:9C0C  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      87.  00:9C1C                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      87.  00:9C1C  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      88.  00:9C2C                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      88.  00:9C2C  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      89.  00:9C3C                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      89.  00:9C3C  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      90.  00:9C4C                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      90.  00:9C4C  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      91.  00:9C5C                      
      92.  00:9C5C                      
      93.  00:9C5C                      
     133   00:9C5C                      	
     134   00:9C5C                      	include "variables.asm"
       1.  00:9C5C                      ;;=====================================================
       2.  00:9C5C                      ;;DEFINICIÓN DE VARIABLES
       3.  00:9C5C                      ;;=====================================================
       4.  00:9C5C                      
       5.  00:9C5C                      ;Colores base de la pantalla
       6.  00:9C5C                      color_base:
       7.  00:9C5C  01 01 01            			DB		COLNEGRO,COLNEGRO,COLNEGRO	
       8.  00:9C5F                      ;colores de pantalla cuando se tira bomba
       9.  00:9C5F                      color_bomba1:
      10.  00:9C5F  08 08 08            			DB		COLROJO,COLROJO,COLROJO
      11.  00:9C62                      color_bomba2:
      12.  00:9C62  06 06 06            			DB		COLROJOOSC,COLROJOOSC,COLROJOOSC
      13.  00:9C65                      
      14.  00:9C65                      ;definicion de variable del prota usando la estructura del punto de mira
      15.  00:9C65                      prota:		ESTRUCTURA_PUNTOMIRA
      15.  00:9C65  64 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      16.  00:9C75                      ;variables globales del prota
      17.  00:9C75                      prota_nivel:			;nivel del castillo donde está 0-6
      18.  00:9C75  00                  			DB		0
      19.  00:9C76                      prota_vidas:
      20.  00:9C76  00                  			DB		0
      21.  00:9C77                      prota_reliquias:
      22.  00:9C77  03                  			DB		3
      23.  00:9C78                      prota_pos_mapx:
      24.  00:9C78  00                  			DB		0	;pos columna
      25.  00:9C79                      prota_pos_mapy:
      26.  00:9C79  00                  			DB		0	;pos fila
      27.  00:9C7A                      prota_energia:
      28.  00:9C7A  FA                  			DB		250
      29.  00:9C7B                      
      30.  00:9C7B                      ;array para pintar de golpe el marcador de vidas
      31.  00:9C7B                      array_aux_vidas: 		
      32.  00:9C7B                      			DB		0,0,0,0,0,0,0,0
      32.  00:9C7B  00 00 00 00 00 00 00 00 
      33.  00:9C83                      
      34.  00:9C83                      ;array para pintar de golpe el marcador de reliquias
      35.  00:9C83                      array_aux_reliquias:	
      36.  00:9C83                      			DB		0,0,0,0,0,0,0,0
      36.  00:9C83  00 00 00 00 00 00 00 00 
      37.  00:9C8B                      
      38.  00:9C8B                      array_aux_energia:					;array para pintar de golpe el marcador de energía
      39.  00:9C8B                      			DB		16,0,0,0,0,0,0 	;el 16 primero es porque siempre estará pintado el cuadro primero rojo
      39.  00:9C8B  10 00 00 00 00 00 00 
      40.  00:9C92                      ultimo_pos_array_aux_energia:
      41.  00:9C92  00                  			DB		0				;el array completo es de 8 pero para posicionar sin niecesidad de cálculos  etiqueto este aparte
      42.  00:9C93                      			
      43.  00:9C93                      array_aux_mapa_limpiar:	;es por facilitar el reseteo del mapa (pinto 7 lineas en negro con bios) la otra opción es más larga en código y complicada aunque más rápida
      44.  00:9C93                      			DB		0,0,0,0,0,0,0
      44.  00:9C93  00 00 00 00 00 00 00 
      45.  00:9C9A                      elemento_pintar_mapa:
      46.  00:9C9A  00                  			DB		0	;TILEPROTAM = 19, ;TILEGRISM = 9
      47.  00:9C9B                      			
      48.  00:9C9B                      ;; nota importante: cada vez que se cambie de nivel se actualizará el contenido
      49.  00:9C9B                      ;; arrays con mapa de tiles de las puertas
      50.  00:9C9B                      array_puerta_arriba:
      51.  00:9C9B  03 01 01 03         array_puerta_arriba1:		DB	3,1,1,3
      52.  00:9C9F  01 01 01 01         array_puerta_arriba2:		DB	1,1,1,1
      53.  00:9CA3  01 01 01 01         array_puerta_arriba3:		DB	1,1,1,1
      54.  00:9CA7  01 01 01 01         array_puerta_arriba4:		DB	1,1,1,1
      55.  00:9CAB  01 01 01 01         array_puerta_arriba5:		DB	1,1,1,1
      56.  00:9CAF                      
      57.  00:9CAF                      array_puerta_derecha:
      58.  00:9CAF  01 03 03            array_puerta_derecha1:		DB	1,3,3
      59.  00:9CB2  01 01 03            array_puerta_derecha2:		DB	1,1,3
      60.  00:9CB5  01 01 01            array_puerta_derecha3:		DB	1,1,1
      61.  00:9CB8  01 01 01            array_puerta_derecha4:		DB	1,1,1
      62.  00:9CBB  01 01 01            array_puerta_derecha5:		DB	1,1,1
      63.  00:9CBE  02 01 01            array_puerta_derecha6:		DB	2,1,1
      64.  00:9CC1  04 02 01            array_puerta_derecha7:		DB	4,2,1
      65.  00:9CC4                      	
      66.  00:9CC4  01 01 01 01         array_puerta_abajo:			DB	1,1,1,1
      67.  00:9CC8                      
      68.  00:9CC8                      array_puerta_izquierda:
      69.  00:9CC8  03 03 01            array_puerta_izquierda1:	DB	3,3,1
      70.  00:9CCB  03 01 01            array_puerta_izquierda2:	DB	3,1,1
      71.  00:9CCE  01 01 01            array_puerta_izquierda3:	DB	1,1,1
      72.  00:9CD1  01 01 01            array_puerta_izquierda4:	DB	1,1,1
      73.  00:9CD4  01 01 01            array_puerta_izquierda5:	DB	1,1,1
      74.  00:9CD7  01 01 02            array_puerta_izquierda6:	DB	1,1,2
      75.  00:9CDA  01 02 04            array_puerta_izquierda7:	DB	1,2,4
      76.  00:9CDD                      
      77.  00:9CDD                      
      78.  00:9CDD                      ;array de 4 bytes x 32 sprites posibles en pantalla que sobreescribirá la tabla de sprites actualizando VRAM
      79.  00:9CDD                      array_sprites:
      80.  00:9CDD  00 (8)              array_sprites_pm:				DS	2 * 4
      81.  00:9CE5  00 (120)            array_sprites_enem:				DS	30 * 4
      82.  00:9D5D  00 (140)            lista_enemigos:					DS	10 * ESTRUCTURA_ENEMIGO
      83.  00:9DE9                      ; puntero al array a pintar en VRAM
      84.  00:9DE9  00 00               puntero_array_atrib_array_VRAM: DW	0	;ARRAYSPTRIES + 8
      85.  00:9DEB                      
      86.  00:9DEB                      
     135   00:9DEB                      	
     136   00:9DEB                      ;;=====================================================
     137   00:9DEB                      ;;DEFINICIÓN DE PANTALLAS
     138   00:9DEB                      ;;=====================================================		
     139   00:9DEB                      	include "pantallas.asm"
       1.  00:9DEB                      ;;=====================================================
       2.  00:9DEB                      ;;DEFINICIÓN DE PANTALLAS
       3.  00:9DEB                      ;;=====================================================		
       4.  00:9DEB                      
       5.  00:9DEB                      ; bancos 1 y 2 y de pantalla 1 (en realidad es una pantalla de pruebas)
       6.  00:9DEB                      tiles_patrones_pantalla11:	
       7.  00:9DEB  (0023)              tiles_patrones_pantalla12:	incbin "pan1_23.bank1.bin.chr.pletter"
       8.  00:9E0E                      tiles_color_pantalla11:		
       9.  00:9E0E  (0018)              tiles_color_pantalla12:		incbin "pan1_23.bank1.bin.clr.pletter"
      10.  00:9E26  (001A)              tiles_mapa_pantalla11:		incbin "pan1_23.bank0.bin.map.pletter"
      11.  00:9E40  (002A)              tiles_mapa_pantalla12:		incbin "pan1_23.bank1.bin.map.pletter"
      12.  00:9E6A                      
      13.  00:9E6A                      
      14.  00:9E6A                      
      15.  00:9E6A                      
      16.  00:9E6A                      
      17.  00:9E6A                      
      18.  00:9E6A                      ; 3º banco que es la parte de puntos, vidas, mapas, etc... es común
      19.  00:9E6A  (0146)              tiles_patrones_pantalla3:	incbin "pan_33.bin.chr.pletter"
      20.  00:9FB0  (0035)              tiles_color_pantalla3:		incbin "pan_33.bin.clr.pletter"
      21.  00:9FE5  (006F)              tiles_mapa_pantalla3:		incbin "pan_33.bin.map.pletter"
      22.  00:A054                      
      23.  00:A054                      ;NOTA: FALTARÍAN PANTALLAS ESPECIALES (POR DEFINIR)
     140   00:A054                      
     141   00:A054                      
     142   00:A054                      	
     143   00:A054                      END:

    LABELS
-------------------------------------------------
00:000000D8 X GTTRIG
00:000000D5 X GTSTCK
00:0000F3DB   CLIKSW
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000005C   LDIRVM
00:00000059 X LDIRMV
00:0000005F   CHGMOD
00:00000041 X DISSCR
00:00000044 X ENASCR
00:00000062   CHGCLR
00:0000F3E9   FORCLR
00:0000F3EA   BAKCLR
00:0000F3EB   BDRCLR
00:000000C3   CLS
00:0000F3DF X RG0SAV
00:0000F3E0   RG1SAV
00:0000F3E1 X RG2SAV
00:0000F3E2 X RG3SAV
00:0000F3E3 X RG4SAV
00:0000F3E4 X RG5SAV
00:0000F3E5 X RG6SAV
00:0000F3E6 X RG7SAV
00:0000F3E7 X STATFL
00:00000099   REGEST
00:00000098   REGESCVDP
00:000000A0   PSG_A
00:000000A1   PSG_W
00:000000A2   PSG_R
00:00000000   CHRTBL
00:00001800   TILMAP
00:00001B00   SPRART
00:00002000   CLRTBL
00:00003800 X SPRTBL
00:00000001 X SI
00:00000000 X NO
00:00000000 X COLTRASP
00:00000001   COLNEGRO
00:00000002 X COLVERDE
00:00000003 X COLVERCLA
00:00000004 X COLAZULOSC
00:00000005 X COLAZULLA
00:00000006   COLROJOOSC
00:00000007 X COLCYAN
00:00000008   COLROJO
00:00000009 X COLROJOCLA
00:0000000A X COLAMAROSC
00:0000000B X COLAMARCLA
00:0000000C X COLVERDOSC
00:0000000D X COLMAGENTA
00:0000000E X COLGRIS
00:0000000F   COLBLANCO
00:000002F8   POSMAPLIN1
00:000002D8   POSMAPLIN2
00:000002B8   POSMAPLIN3
00:00000298   POSMAPLIN4
00:00000278   POSMAPLIN5
00:00000258   POSMAPLIN6
00:00000238   POSMAPLIN7
00:0000000D   POSCARAMAP
00:00000248   POSVIDAS
00:00000011   POSRELIMAP
00:000002C8   POSRELIQ
00:00000288   POSENERG
00:000002B4   POSNIVEL
00:00000238   POSMAPA
00:000001EE   POSPUERABAJ
00:0000008E   POSPUERARRI
00:000000FC   POSPUERDERE
00:000000E1   POSPUERIZQU
00:00000013   TILEPROTAM
00:00000009   TILEGRISM
00:00000010   TILEMAPROJO
00:0000000F   TILEMAPAMAR
00:0000000E   TILEMAPVERD
00:00000008   NMAXVIDREL
00:00000007   NHABNIVEL
00:000000F8 X MAXENERGIA
00:000000D9   TILEENERG8
00:000000BA   TILEENERG7
00:0000009B   TILEENERG6
00:0000007C   TILEENERG5
00:0000005D   TILEENERG4
00:0000003E   TILEENERG3
00:0000001F   TILEENERG2
00:00000000   TILENEGRO
00:00000000 X LIMPANTIZQ
00:000000FF   LIMPANTDER
00:00000000 X LIMPANTARR
00:00000080   LIMPANTABA
00:00000006 X BASEMAPY
00:00000003 X BASEMAPX
00:0000FD9A X H.KEYI
00:0000FD9F   H.TIMI
00:0000F000   PT3_SETUP
00:0000F001   PT3_MODADDR
00:0000F003   PT3_CrPsPtr
00:0000F005   PT3_SAMPTRS
00:0000F007   PT3_OrnPtrs
00:0000F009   PT3_PDSP
00:0000F00B   PT3_CSP
00:0000F00D   PT3_PSP
00:0000F00F   PT3_PrNote
00:0000F010   PT3_PrSlide
00:0000F012   PT3_AdInPtA
00:0000F014   PT3_AdInPtB
00:0000F016   PT3_AdInPtC
00:0000F018   PT3_LPosPtr
00:0000F01A   PT3_PatsPtr
00:0000F01C   PT3_Delay
00:0000F01D   PT3_AddToEn
00:0000F01E   PT3_Env_Del
00:0000F01F   PT3_ESldAdd
00:0000F021   PT3_NTL3
00:0000F023   VARS
00:0000F023   ChanA
00:0000F040   ChanB
00:0000F05D   ChanC
00:0000F07A   DelyCnt
00:0000F07B   CurESld
00:0000F07D   CurEDel
00:0000F07E   Ns_Base_AddToNs
00:0000F07E   Ns_Base
00:0000F07F   AddToNs
00:0000F080   NT_
00:0000F140   AYREGS
00:0000F140   VT_
00:0000F14E   EnvBase
00:0000F150   VAR0END
00:0000F150   T1_
00:0000F150   T_NEW_1
00:0000F150   T_OLD_1
00:0000F168   T_OLD_2
00:0000F180   T_NEW_3
00:0000F180   T_OLD_3
00:0000F182   T_OLD_0
00:0000F182   T_NEW_0
00:0000F19A   T_NEW_2
00:0000F240   ayFX_MODE
00:0000F241   ayFX_BANK
00:0000F243   ayFX_PRIORITY
00:0000F244   ayFX_POINTER
00:0000F246   ayFX_TONE
00:0000F248   ayFX_NOISE
00:0000F249   ayFX_VOLUME
00:0000F24A   ayFX_CHANNEL
00:00008000   START
00:00008029   loop_principal
00:00008036 X fin_programa_principal
00:00008036   inicializa_variables_pruebas
00:00008054 X fin_inicializa_variables_pruebas
00:00008055   inicializa_niveles
00:00008064   inicializa_niveles.bucle_borra_hab
00:00008069 X fin_iniciliza_niveles
00:0000806A   actualiza_marcador_vidas
00:0000806F   loop_marcador_caras_negro
00:00008074 X fin_loop_marcador_caras_negro
00:0000807D   loop_marcador_caras
00:00008082 X fin_loop_marcador_caras
00:00008082 X fin_actualiza_marcador_vidas
00:00008083   actualiza_buffer_reliquias
00:00008089   loop_buffer_reliquias_negro
00:00008096   loop_buffer_reliquias
00:0000809B X fin_actualiza_buffer_reliquias
00:0000809C   localiza_info_habitacion
00:0000809F X localiza_info_habitacion.situo_columna
00:000080A8 X localiza_info_habitacion.situo_fila
00:000080B1   localiza_info_habitacion.loop_suma_fila
00:000080B9   localiza_info_habitacion.situo_nivel
00:000080C8   localiza_info_habitacion.loop_suma_nivel
00:000080CD   localiza_info_habitacion.actualiza_valiable_habitacion
00:000080D1 X fin_localiza_info_habitacion
00:000080D2   color_pantalla
00:000080E3 X fin_color_pantalla
00:000080E3   sub_preparapantalla
00:000080E3 X elimina_clic
00:000080E7 X fin_elimina_clic
00:000080E7 X limpia_pantalla
00:000080EB X fin_limpia_pantalla
00:000080F1 X screen2
00:000080F6 X sprites_16_16
00:00008104 X fin_sub_preparapantalla
00:00008104   pinta_pantalla_completa
00:0000810A X fin_pinta_pantalla_completa
00:0000810B   pinta_parte_superior_pantalla
00:00008141 X fin_pinta_parte_superior_pantalla
00:00008142   pinta_parte_inferior_pantalla
00:0000815D X fin_pinta_parte_inferior_pantalla
00:0000815D   pinta_vidas
00:0000816C X fin_pinta_vidas
00:0000816C   pinta_reliquias
00:0000817B X fin_pinta_reliquias
00:0000817B   pinta_nivel
00:00008187 X fin_pinta_nivel
00:00008188   pinta_tile_suelto
00:00008195 X fin_pinta_tile_suelto
00:00008196   mira_pinta_energia
00:0000819C X pinta_ener
00:0000819C X pinta_ener_tile_8
00:000081A8   pinta_ener_tile_8_negro
00:000081A9   pinta_ener_tile_7
00:000081B3   pinta_ener_tile_7_negro
00:000081B4   pinta_ener_tile_6
00:000081BE   pinta_ener_tile_6_negro
00:000081BF   pinta_ener_tile_5
00:000081C9   pinta_ener_tile_5_negro
00:000081CA   pinta_ener_tile_4
00:000081D4   pinta_ener_tile_4_negro
00:000081D5   pinta_ener_tile_3
00:000081DF   pinta_ener_tile_3_negro
00:000081E0   pinta_ener_tile_2
00:000081EA   pinta_ener_tile_2_negro
00:000081EB   fin_mira_pinta_energia
00:000081ED   pinta_energia
00:000081FC X fin_pinta_energia
00:000081FC   borra_mapa
00:00008252 X fin_borra_mapa
00:00008253   pinta_array
00:00008261   pinta_array.pa_pinta_fila
00:00008262   pinta_array.pa_pinta_columnas
00:00008285 X fin_pinta_array
00:00008286   wordaux1
00:00008288   wordaux2
00:0000828A   pinta_puertas
00:000082A7 X fin_pinta_puertas
00:000082A8   pinta_puerta_aba
00:000082BD X fin_pinta_puerta_aba
00:000082BD   pinta_puerta_arr
00:000082D2 X fin_pinta_puerta_arr
00:000082D2   pinta_puerta_der
00:000082E7 X fin_pinta_puerta_der
00:000082E7   pinta_puerta_izq
00:000082FC X fin_pinta_puerta_izq
00:000082FC   posiciona_en_mapa
00:000082FF X posiciona_en_mapa.sumar_fila
00:00008329 X posiciona_en_mapa.fila_0
00:00008330   posiciona_en_mapa.fila_1
00:00008337   posiciona_en_mapa.fila_2
00:0000833E   posiciona_en_mapa.fila_3
00:00008345   posiciona_en_mapa.fila_4
00:0000834C   posiciona_en_mapa.fila_5
00:00008353 X posiciona_en_mapa.fila_6
00:00008353   posiciona_en_mapa.sumar_columna
00:00008369   pinta_pos_mapa_vacio
00:0000836B   fin_pinta_pos_mapa
00:0000836E X fin_posiciona_en_mapa
00:0000836E   efecto_imagen_tira_reliquia
00:00008371   efecto_imagen_tira_reliquia.parpadea_fondo
00:00008388 X fin_efecto_imagen_tira_reliquia
00:00008388   carga_patrones_sprites_nivel1
00:00008458 X fin_carga_patrones_sprites
00:00008459   render_sprites
00:00008465 X fin_actualiza_array_sprites_vram
00:00008465   vuelca_resultado_puntomira_array
00:0000848A X vuelca_resultado_puntomira_array.codigo_color_1
00:00008493   vuelca_resultado_puntomira_array.codigo_color_2
00:0000849C X fin_vuelca_resultado_puntomira_array
00:0000849C   check_player
00:000084BB X f
00:000084BC   mueve_arriba
00:000084C7   mueve_arriba.no_decrementa_y
00:000084C8 X fin_mueve_arriba
00:000084C9   mueve_derecha
00:000084D6   mueve_derecha.no_incrementa_x
00:000084D7 X fin_mueve_derecha
00:000084D8   mueve_abajo
00:000084E5   mueve_abajo.no_incrementa_y
00:000084E6 X fin_mueve_abajo
00:000084E7   mueve_izquierda
00:000084F2   mueve_izquierda.no_decrementa_x
00:000084F3 X fin_mueve_izquierda
00:000084F4   mira_disparo
00:000084F4 X mira_disparo.mira_boton_pulsado1
00:00008508   mira_disparo.mira_boton_pulsado2
00:00008524 X fin_mira_disparo
00:00008524   update_controllers_status
00:0000855B   read_joy_0
00:0000856F   check_8th_keyboard_row
00:0000857D   check_4th_keyboard_row
00:0000858B   inicializa_replayer_efectos_interrupciones
00:000085A4 X fin_inicializa_replayer_efectos_interrupciones
00:000085A5   subrutina_isr
00:000085AE X fin_subrutina_isr
00:000085AE X subrutinas_sonido
00:00000000   CHNPRM_PsInOr
00:00000001   CHNPRM_PsInSm
00:00000002   CHNPRM_CrAmSl
00:00000003   CHNPRM_CrNsSl
00:00000004   CHNPRM_CrEnSl
00:00000005   CHNPRM_TSlCnt
00:00000006   CHNPRM_CrTnSl
00:00000008   CHNPRM_TnAcc
00:0000000A   CHNPRM_COnOff
00:0000000B   CHNPRM_OnOffD
00:0000000C   CHNPRM_OffOnD
00:0000000D   CHNPRM_OrnPtr
00:0000000F   CHNPRM_SamPtr
00:00000011   CHNPRM_NNtSkp
00:00000012   CHNPRM_Note
00:00000013   CHNPRM_SlToNt
00:00000014   CHNPRM_Env_En
00:00000015   CHNPRM_Flags
00:00000016   CHNPRM_TnSlDl
00:00000017   CHNPRM_TSlStp
00:00000019   CHNPRM_TnDelt
00:0000001B   CHNPRM_NtSkCn
00:0000001C   CHNPRM_Volume
00:0000001D X CHNPRM_Size
00:00000000   AR_TonA
00:00000002   AR_TonB
00:00000004   AR_TonC
00:00000006   AR_Noise
00:00000007   AR_Mixer
00:00000008   AR_AmplA
00:00000009   AR_AmplB
00:0000000A   AR_AmplC
00:0000000B   AR_Env
00:0000000D   AR_EnvTp
00:000085AE   CHECKLP
00:000085BF X PT3_MUTE
00:000085CB   PT3_INIT
00:0000860A   PT3_INIT.TP_0
00:00008616   PT3_INIT.TP_1
00:0000861D   PT3_INIT.TP_2
00:0000868B   PT3_INIT.L1
00:00008698   PT3_INIT.L2
00:0000869C X PT3_INIT.L3
00:000086C3   PT3_INIT.CORR_1
00:000086D1   PT3_INIT.CORR_2
00:000086D8   PT3_INIT.TC_EXIT
00:000086E3   PT3_INIT.INITV1
00:000086EB   PT3_INIT.INITV2
00:000086FF   PT3_INIT.INITV3
00:00008703   PD_OrSm
00:0000870D   PD_SAM
00:0000870E   PD_SAM_
00:00008724   PD_VOL
00:0000872D   PD_EOff
00:00008735   PD_SorE
00:0000873F   PD_ENV
00:00008744   PD_ORN
00:00008749   PD_ESAM
00:00008756   PTDECOD
00:00008765   PD_LOOP
00:00008768   PD_LP2
00:00008795   PD_NOIS
00:0000879A   PD_REL
00:000087A0   PD_NOTE
00:000087A8   PD_RES
00:000087BA   PD_FIN
00:000087C1   C_PORTM
00:0000880C   C_PORTM.NOSIG
00:00008816   SET_STP
00:00008822   C_GLISS
00:00008835   C_SMPOS
00:0000883B   C_ORPOS
00:00008841   C_VIBRT
00:00008859   C_ENGLS
00:0000886B   C_DELAY
00:00008871   SETENV
00:0000888C   C_NOP
00:0000888D   SETORN
00:000088A6   SPCCOMS
00:000088C6   CHREGS
00:000088E9   CHREGS.CH_ORPS
00:000088F4   CHREGS.CH_NTP
00:000088FA   CHREGS.CH_NOK
00:00008915   CHREGS.CH_SMPS
00:0000892B   CHREGS.CH_NOAC
00:00008972   CHREGS.CH_STPP
00:00008987   CHREGS.CH_AMP
00:00008999   CHREGS.CH_AMIN
00:0000899E   CHREGS.CH_SVAM
00:000089A1   CHREGS.CH_NOAM
00:000089AA   CHREGS.CH_APOS
00:000089B0   CHREGS.CH_VOL
00:000089BB X CHREGS.CH_ENV
00:000089C2   CHREGS.CH_NOEN
00:000089DC   CHREGS.NO_ENAC
00:000089E3   CHREGS.NO_ENSL
00:000089F1   CHREGS.CH_MIX
00:000089F5   CHREGS.CH_EXIT
00:00008A14   CHREGS.CH_ONDL
00:00008A18   PT3_PLAY
00:00008A4C   PT3_PLAY.PLNLP
00:00008A73   PT3_PLAY.PL1A
00:00008A7E   PT3_PLAY.PL1B
00:00008A93   PT3_PLAY.PL1C
00:00008AA8   PT3_PLAY.PL1D
00:00008AAE   PT3_PLAY.PL2
00:00008B10   PT3_ROUT
00:00008B11   ROUT_A0
00:00008B1D   ROUT_A0.LOUT
00:00008B31   NT_DATA
00:00008B41   T_
00:00008B41   TCOLD_0
00:00008B4D   TCNEW_1
00:00008B4D   TCOLD_1
00:00008B4F   TCOLD_2
00:00008B61   TCNEW_3
00:00008B62   TCOLD_3
00:00008B6B   TCNEW_0
00:00008B76   TCNEW_2
00:00008B81   EMPTYSAMORN
00:00008B85   T_PACK
00:00000000 X AYFXRELATIVE
00:00008BBA   ayFX_SETUP
00:00008BC6   ayFX_END
00:00008BCC   ayFX_INIT
00:00008BDD   ayFX_INIT.CHECK_PRI
00:00008BFE   ayFX_INIT.INIT_END
00:00008C02   ayFX_PLAY
00:00008C16   ayFX_PLAY.TAKECB
00:00008C27   ayFX_PLAY.CHECK_NN
00:00008C34   ayFX_PLAY.SETPOINTER
00:00008C48   ayFX_PLAY.SETMASKS
00:00008C56 X ayFX_PLAY.CHK1
00:00008C58 X ayFX_PLAY.PLAY_C
00:00008C65   ayFX_PLAY.CHK2
00:00008C6A X ayFX_PLAY.PLAY_B
00:00008C77   ayFX_PLAY.CHK3
00:00008C7A X ayFX_PLAY.PLAY_A
00:00008C87   ayFX_PLAY.SETMIXER
00:00008C97   song
00:000095FF   sfx_bank
00:0000964A   depack_VRAM
00:00009677   literal
00:0000967C   loop
00:00009685 X getlen
00:0000968B   lus
00:000096A8   lenok
00:000096B5   mode7
00:000096BB   mode6
00:000096C1   mode5
00:000096C7   mode4
00:000096CD   mode3
00:000096D3   mode2
00:000096E3   offsok
00:000096EE   offsok.loop
00:00009710   getbit
00:00009714   getbitexx
00:0000971A   Depack_out
00:0000971C   modes
00:00000000 X ESTRUCTURA_PUNTOMIRA.posx
00:00000001 X ESTRUCTURA_PUNTOMIRA.posy
00:00000002 X ESTRUCTURA_PUNTOMIRA.escena
00:00000003 X ESTRUCTURA_PUNTOMIRA.velocidad
00:00000004 X ESTRUCTURA_PUNTOMIRA.boton2_pressed
00:00000005 X ESTRUCTURA_PUNTOMIRA.pm_aux1
00:00000006 X ESTRUCTURA_PUNTOMIRA.pm_aux2
00:00000007 X ESTRUCTURA_PUNTOMIRA.pm_aux3
00:00000008 X ESTRUCTURA_PUNTOMIRA.pm_aux4
00:00000009 X ESTRUCTURA_PUNTOMIRA.pm_aux5
00:0000000A X ESTRUCTURA_PUNTOMIRA.pm_aux6
00:0000000B X ESTRUCTURA_PUNTOMIRA.pm_aux7
00:0000000C X ESTRUCTURA_PUNTOMIRA.pm_aux8
00:0000000D X ESTRUCTURA_PUNTOMIRA.pm_aux9
00:0000000E X ESTRUCTURA_PUNTOMIRA.pm_aux10
00:0000000F X ESTRUCTURA_PUNTOMIRA.pm_aux11
00:00000010 X ESTRUCTURA_PUNTOMIRA
00:00000000 X ESTRUCTURA_ENEMIGO.tipo
00:00000001 X ESTRUCTURA_ENEMIGO.posx
00:00000002 X ESTRUCTURA_ENEMIGO.posy
00:00000003 X ESTRUCTURA_ENEMIGO.color
00:00000004 X ESTRUCTURA_ENEMIGO.escena
00:00000005 X ESTRUCTURA_ENEMIGO.contador_siguiente_escena
00:00000006 X ESTRUCTURA_ENEMIGO.reset_contador
00:00000007 X ESTRUCTURA_ENEMIGO.dano
00:00000008 X ESTRUCTURA_ENEMIGO.energia
00:00000009 X ESTRUCTURA_ENEMIGO.ver_hor
00:0000000A X ESTRUCTURA_ENEMIGO.manejador_dibujo
00:0000000C X ESTRUCTURA_ENEMIGO.en_aux3
00:0000000D X ESTRUCTURA_ENEMIGO.en_aux4
00:0000000E   ESTRUCTURA_ENEMIGO
00:00000000 X ESTRUCTURA_EXTRA.tipo
00:00000001 X ESTRUCTURA_EXTRA.posx
00:00000002 X ESTRUCTURA_EXTRA.posy
00:00000003 X ESTRUCTURA_EXTRA.color
00:00000004 X ESTRUCTURA_EXTRA.contador
00:00000005 X ESTRUCTURA_EXTRA.en_aux1
00:00000006 X ESTRUCTURA_EXTRA.en_aux2
00:00000007 X ESTRUCTURA_EXTRA.en_aux3
00:00000008 X ESTRUCTURA_EXTRA.en_aux4
00:00000009 X ESTRUCTURA_EXTRA.en_aux5
00:0000000A X ESTRUCTURA_EXTRA.en_aux6
00:0000000B X ESTRUCTURA_EXTRA.en_aux7
00:0000000C X ESTRUCTURA_EXTRA.en_aux8
00:0000000D X ESTRUCTURA_EXTRA.en_aux9
00:0000000E X ESTRUCTURA_EXTRA.en_aux10
00:0000000F X ESTRUCTURA_EXTRA.en_aux11
00:00000010 X ESTRUCTURA_EXTRA
00:0000972A X sprites_pantantalla
00:0000972A   sprite_punto_mira_1
00:0000974A   sprite_punto_mira_2
00:0000976A   sprite_punto_mira_1_mejorado
00:0000978A   sprite_punto_mira_2_mejorado
00:000097AA   sprite_reliquia
00:000097CA X sprite_vida_extra
00:000097EA   sprite_planta
00:0000980A   sprite_ballesta_mejorada
00:0000982A   sprite_ciempies1
00:0000984A   sprite_ciempies2
00:0000986A   sprite_arana1
00:0000988A   sprite_arana2
00:000098AA   sprite_serpiente1
00:000098CA   sprite_serpiente2
00:000098EA   sprite_murcielago1
00:0000990A   sprite_murcielago2
00:0000992A   sprite_explosion
00:0000994A   habitacion_actual
00:0000994C   habitaciones_juego
00:0000994C X habitaciones_nivel0
00:000099BC X habitaciones_nivel1
00:00009A2C X habitaciones_nivel2
00:00009A9C X habitaciones_nivel3
00:00009B0C X habitaciones_nivel4
00:00009B7C X habitaciones_nivel5
00:00009BEC X habitaciones_nivel6
00:00009C5C   color_base
00:00009C5F   color_bomba1
00:00009C62   color_bomba2
00:00009C65 X prota
00:00009C65   prota.posx
00:00009C66   prota.posy
00:00009C67   prota.escena
00:00009C68 X prota.velocidad
00:00009C69 X prota.boton2_pressed
00:00009C6A X prota.pm_aux1
00:00009C6B X prota.pm_aux2
00:00009C6C X prota.pm_aux3
00:00009C6D X prota.pm_aux4
00:00009C6E X prota.pm_aux5
00:00009C6F X prota.pm_aux6
00:00009C70 X prota.pm_aux7
00:00009C71 X prota.pm_aux8
00:00009C72 X prota.pm_aux9
00:00009C73 X prota.pm_aux10
00:00009C74 X prota.pm_aux11
00:00009C75   prota_nivel
00:00009C76   prota_vidas
00:00009C77   prota_reliquias
00:00009C78   prota_pos_mapx
00:00009C79   prota_pos_mapy
00:00009C7A   prota_energia
00:00009C7B   array_aux_vidas
00:00009C83   array_aux_reliquias
00:00009C8B   array_aux_energia
00:00009C92   ultimo_pos_array_aux_energia
00:00009C93   array_aux_mapa_limpiar
00:00009C9A   elemento_pintar_mapa
00:00009C9B   array_puerta_arriba
00:00009C9B X array_puerta_arriba1
00:00009C9F X array_puerta_arriba2
00:00009CA3 X array_puerta_arriba3
00:00009CA7 X array_puerta_arriba4
00:00009CAB X array_puerta_arriba5
00:00009CAF   array_puerta_derecha
00:00009CAF X array_puerta_derecha1
00:00009CB2 X array_puerta_derecha2
00:00009CB5 X array_puerta_derecha3
00:00009CB8 X array_puerta_derecha4
00:00009CBB X array_puerta_derecha5
00:00009CBE X array_puerta_derecha6
00:00009CC1 X array_puerta_derecha7
00:00009CC4   array_puerta_abajo
00:00009CC8   array_puerta_izquierda
00:00009CC8 X array_puerta_izquierda1
00:00009CCB X array_puerta_izquierda2
00:00009CCE X array_puerta_izquierda3
00:00009CD1 X array_puerta_izquierda4
00:00009CD4 X array_puerta_izquierda5
00:00009CD7 X array_puerta_izquierda6
00:00009CDA X array_puerta_izquierda7
00:00009CDD   array_sprites
00:00009CDD   array_sprites_pm
00:00009CE5 X array_sprites_enem
00:00009D5D X lista_enemigos
00:00009DE9 X puntero_array_atrib_array_VRAM
00:00009DEB   tiles_patrones_pantalla11
00:00009DEB   tiles_patrones_pantalla12
00:00009E0E   tiles_color_pantalla11
00:00009E0E   tiles_color_pantalla12
00:00009E26   tiles_mapa_pantalla11
00:00009E40   tiles_mapa_pantalla12
00:00009E6A   tiles_patrones_pantalla3
00:00009FB0   tiles_color_pantalla3
00:00009FE5   tiles_mapa_pantalla3
00:0000A054   END


 Output: t4.out
-------------------------------------------------

 Page: 00
  Org: 00008000  Size: *  Used: 00000000

    No output

 Output: t4.bin
-------------------------------------------------

 Page: 00
  Org: 00008000  Size: *  Used: 0000205B

   Address   Length Align   Label
   00008000    8283         START
