Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2021.08.12 - 21:06:12]

t4.asm
Errors: 0

       1   00:0000                      	OUTPUT	"t4.bin"
       2   00:8000                      	
       3   00:8000                      ;;=====================================================
       4   00:8000                      ;;DEFINICIÓN DE CONSTANTES
       5   00:8000                      ;;=====================================================	
       6   00:8000                      	include "constantes.asm"
       1.  00:8000                      ;;=====================================================
       2.  00:8000                      ;; FICHERO constantes.asm
       3.  00:8000                      ;;=====================================================
       4.  00:8000                      
       5.  00:8000                      ;;ETIQUETAS/CONSTANTES BIOS TECLADO
       6.  00:8000  (00:00D8)           GTTRIG		equ		#00D8	;Returns current trigger status
       7.  00:8000  (00:00D5)           GTSTCK		equ		#00D5	;Returns the joystick/cursors status
       8.  00:8000  (00:F3DB)           CLIKSW		equ		#F3DB	;deshabilita el sonido de clic cuando se pulsa una tecla
       9.  00:8000                      
      10.  00:8000                      ;;ETIQUETAS/CONSTANTES BIOS VDP
      11.  00:8000  (00:013E)           RDVDP		equ		#013E	;lee registro status VDP
      12.  00:8000  (00:0047)           WRTVDP		equ		#0047	;escribe registros del VDP
      13.  00:8000  (00:005C)           LDIRVM		equ		#005C	;RAM/ROM -> VRAM
      14.  00:8000  (00:0059)           LDIRMV		equ		#0059	;VRAM -> RAM
      15.  00:8000  (00:005F)           CHGMOD		equ		#005F	;cambia modo pantalla (screen mode)
      16.  00:8000  (00:0041)           DISSCR  	equ		#0041	;desactiva pantanlla
      17.  00:8000  (00:0044)           ENASCR  	equ		#0044	;activa pantalla
      18.  00:8000  (00:0062)           CHGCLR  	equ		#0062	;cambia color de pantalla (toca A y direcciones)
      19.  00:8000  (00:F3E9)           FORCLR		equ		#F3E9	;zona memoria color foreground
      20.  00:8000  (00:F3EA)           BAKCLR  	equ		#F3EA	;zona memoria color background
      21.  00:8000  (00:F3EB)           BDRCLR 		equ		#F3EB	;zona memoria bordercolor
      22.  00:8000  (00:00C3)           CLS			equ		#00C3	;limpia pantalla (necesita A=0)
      23.  00:8000                      
      24.  00:8000                      ;;ETIQUETAS/CONSTANTES REGISTROS VDP
      25.  00:8000  (00:F3DF)           RG0SAV		equ		#F3DF	;Mirror of VDP register 0 (Basic: VDP(0))
      26.  00:8000  (00:F3E0)           RG1SAV		equ		#F3E0	;Mirror of VDP register 1 (Basic: VDP(1))
      27.  00:8000  (00:F3E1)           RG2SAV		equ		#F3E1	;Mirror of VDP register 2 (Basic: VDP(2))
      28.  00:8000  (00:F3E2)           RG3SAV		equ		#F3E2	;Mirror of VDP register 3 (Basic: VDP(3))
      29.  00:8000  (00:F3E3)           RG4SAV		equ		#F3E3	;Mirror of VDP register 4 (Basic: VDP(4))
      30.  00:8000  (00:F3E4)           RG5SAV		equ		#F3E4	;Mirror of VDP register 5 (Basic: VDP(5))
      31.  00:8000  (00:F3E5)           RG6SAV		equ		#F3E5	;Mirror of VDP register 6 (Basic: VDP(6))
      32.  00:8000  (00:F3E6)           RG7SAV		equ		#F3E6	;Mirror of VDP register 7 (Basic: VDP(7))
      33.  00:8000  (00:F3E7)           STATFL		equ		#F3E7	;Mirror of VDP(8) status register (S#0)
      34.  00:8000                      
      35.  00:8000  (00:0099)           REGEST		equ		#0099	;registro de estado para escribir directamente en VRAM
      36.  00:8000  (00:0098)           REGESCVDP	equ		#0098	;registro donde escribir valor para VRAM
      37.  00:8000                      
      38.  00:8000                      ;;ETIQUETAS/CONSTANTES REGISTROS PSG (PARA JOYSTICK)
      39.  00:8000  (00:00A0)           PSG_A  equ  0a0h  ;reg address
      40.  00:8000  (00:00A1)           PSG_W  equ  0a1h  ;reg data WR
      41.  00:8000  (00:00A2)           PSG_R  equ  0a2h  ;reg data
      42.  00:8000                      
      43.  00:8000                      
      44.  00:8000                      ;;ETIQUETAS DE ZONAS DE MEMORIA DE LA VPD (MSX1)
      45.  00:8000  (00:0000)           CHRTBL		equ		#0000
      46.  00:8000  (00:1800)           TILMAP		equ		#1800
      47.  00:8000  (00:1B00)           SPRART		equ		#1B00
      48.  00:8000  (00:2000)           CLRTBL		equ		#2000
      49.  00:8000  (00:3800)           SPRTBL		equ		#3800
      50.  00:8000                      
      51.  00:8000                      
      52.  00:8000                      ;;ETIQUETAS ESTANDAR PARA DAR MÁS CLARIDAD AL CODIGO
      53.  00:8000  (00:0001)           SI			equ		1
      54.  00:8000  (00:0000)           NO			equ		0
      55.  00:8000                      
      56.  00:8000                      ;;PALETA DE COLORES DEL MSX
      57.  00:8000  (00:0000)           COLTRASP	equ		0
      58.  00:8000  (00:0001)           COLNEGRO	equ		1
      59.  00:8000  (00:0002)           COLVERDE	equ		2
      60.  00:8000  (00:0003)           COLVERCLA	equ		3
      61.  00:8000  (00:0004)           COLAZULOSC	equ		4
      62.  00:8000  (00:0005)           COLAZULLA	equ		5
      63.  00:8000  (00:0006)           COLROJOOSC	equ		6
      64.  00:8000  (00:0007)           COLCYAN		equ		7
      65.  00:8000  (00:0008)           COLROJO		equ		8
      66.  00:8000  (00:0009)           COLROJOCLA	equ		9
      67.  00:8000  (00:000A)           COLAMAROSC	equ		10
      68.  00:8000  (00:000B)           COLAMARCLA	equ		11
      69.  00:8000  (00:000C)           COLVERDOSC	equ		12
      70.  00:8000  (00:000D)           COLMAGENTA	equ		13
      71.  00:8000  (00:000E)           COLGRIS		equ		14
      72.  00:8000  (00:000F)           COLBLANCO	equ		15
      73.  00:8000                      
      74.  00:8000                      
      75.  00:8000                      
      76.  00:8000                      ;;ETIQUETAS ESPECIFICAS PARA DAR MÁS CLARIDAD AL CODIGO (relacionadas con posiciones en mapa vdp)
      77.  00:8000  (00:02F8)           POSMAPLIN1  equ		#02F8
      78.  00:8000  (00:02D8)           POSMAPLIN2  equ		#02D8
      79.  00:8000  (00:02B8)           POSMAPLIN3  equ		#02B8
      80.  00:8000  (00:0298)           POSMAPLIN4  equ		#0298
      81.  00:8000  (00:0278)           POSMAPLIN5  equ		#0278
      82.  00:8000  (00:0258)           POSMAPLIN6  equ		#0258
      83.  00:8000  (00:0238)           POSMAPLIN7  equ		#0238
      84.  00:8000                      
      85.  00:8000  (00:000D)           POSCARAMAP	equ		#000D
      86.  00:8000  (00:0248)           POSVIDAS	equ		#0248
      87.  00:8000  (00:0011)           POSRELIMAP	equ		#0011
      88.  00:8000  (00:02C8)           POSRELIQ	equ		#02C8
      89.  00:8000  (00:0288)           POSENERG	equ		#0288
      90.  00:8000  (00:02B4)           POSNIVEL	equ		#02B4
      91.  00:8000  (00:0238)           POSMAPA		equ 	#0238
      92.  00:8000                      
      93.  00:8000  (00:01EE)           POSPUERABAJ equ		#01EE
      94.  00:8000  (00:008E)           POSPUERARRI equ		#008E
      95.  00:8000  (00:00FC)           POSPUERDERE equ		#00FC
      96.  00:8000  (00:00E1)           POSPUERIZQU equ		#00E1
      97.  00:8000                      
      98.  00:8000                      
      99.  00:8000                      ;;ETIQUETAS ESPECIFICAS PARA DAR MÁS CLARIDAD AL CODIGO (relacionadas con posiciones en en el banco de memoria)
     100.  00:8000  (00:0013)           TILEPROTAM  equ		19		;tile del prota para pintar en mapa
     101.  00:8000  (00:0009)           TILEGRISM	equ		9		;tile gris que representa vacio (por donde el prota va pasando)
     102.  00:8000  (00:0010)           TILEMAPROJO equ		16
     103.  00:8000  (00:000F)           TILEMAPAMAR equ		15
     104.  00:8000  (00:000E)           TILEMAPVERD equ		14
     105.  00:8000                      
     106.  00:8000                      
     107.  00:8000                      ;;ETIQUETAS ESPECIFICAS PARA DAR MÁS CLARIDAD AL CODIGO (generales)
     108.  00:8000  (00:0008)           NMAXVIDREL	equ		8		;el número máximo de vidas y de reliquias es de 8
     109.  00:8000  (00:0007)           NHABNIVEL	equ		7
     110.  00:8000  (00:00F8)           MAXENERGIA  equ		248
     111.  00:8000  (00:00D9)           TILEENERG8  equ		217
     112.  00:8000  (00:00BA)           TILEENERG7  equ		186
     113.  00:8000  (00:009B)           TILEENERG6  equ		155
     114.  00:8000  (00:007C)           TILEENERG5  equ		124
     115.  00:8000  (00:005D)           TILEENERG4  equ		93
     116.  00:8000  (00:003E)           TILEENERG3  equ		62
     117.  00:8000  (00:001F)           TILEENERG2  equ		31
     118.  00:8000  (00:0000)           TILENEGRO	equ		0
     119.  00:8000                      
     120.  00:8000                      ;limites
     121.  00:8000  (00:0000)           LIMPANTIZQ  equ		0
     122.  00:8000  (00:00FF)           LIMPANTDER  equ		255
     123.  00:8000  (00:0000)           LIMPANTARR  equ		0
     124.  00:8000  (00:0080)           LIMPANTABA  equ		128
     125.  00:8000                      
     126.  00:8000                      
     127.  00:8000                      ;matriz de 7x7 empieza en 0, y fila y x col, cuento desde esquina sup izq
     128.  00:8000  (00:0006)           BASEMAPY	equ		6
     129.  00:8000  (00:0003)           BASEMAPX	equ		3
     130.  00:8000                      
     131.  00:8000                      
     132.  00:8000                      
     133.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     134.  00:8000                      ;; CONSTANTES PARA INTERRUPCIONES
     135.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     136.  00:8000  (00:FD9A)           H.KEYI		equ     	#FD9A
     137.  00:8000  (00:FD9F)           H.TIMI	 	equ     	#FD9F
     138.  00:8000                      
     139.  00:8000                      
     140.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     141.  00:8000                      ;; CONSTANTES PARA SONIDO 
     142.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     143.  00:8000                      
     144.  00:8000  (F000)              	map		#f000
     145.  00:8000                      
     146.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER
     147.  00:8000  (00:F000)           PT3_SETUP:		#1	;set bit0 to 1, if you want to play without looping
     148.  00:8000                      					;bit7 is set each time, when loop point is passed
     149.  00:8000  (00:F001)           PT3_MODADDR:	#2
     150.  00:8000  (00:F003)           PT3_CrPsPtr:	#2
     151.  00:8000  (00:F005)           PT3_SAMPTRS:	#2
     152.  00:8000  (00:F007)           PT3_OrnPtrs:	#2
     153.  00:8000  (00:F009)           PT3_PDSP:		#2
     154.  00:8000  (00:F00B)           PT3_CSP:		#2
     155.  00:8000  (00:F00D)           PT3_PSP:		#2
     156.  00:8000  (00:F00F)           PT3_PrNote:		#1
     157.  00:8000  (00:F010)           PT3_PrSlide:	#2
     158.  00:8000  (00:F012)           PT3_AdInPtA:	#2
     159.  00:8000  (00:F014)           PT3_AdInPtB:	#2
     160.  00:8000  (00:F016)           PT3_AdInPtC:	#2
     161.  00:8000  (00:F018)           PT3_LPosPtr:	#2
     162.  00:8000  (00:F01A)           PT3_PatsPtr:	#2
     163.  00:8000  (00:F01C)           PT3_Delay:		#1
     164.  00:8000  (00:F01D)           PT3_AddToEn:	#1
     165.  00:8000  (00:F01E)           PT3_Env_Del:	#1
     166.  00:8000  (00:F01F)           PT3_ESldAdd:	#2
     167.  00:8000  (00:F021)           PT3_NTL3:		#2	; AND A / NOP (note table creator)
     168.  00:8000                      
     169.  00:8000  (00:F023)           VARS:			#0
     170.  00:8000                      
     171.  00:8000  (00:F023)           ChanA:			#29			;CHNPRM_Size
     172.  00:8000  (00:F040)           ChanB:			#29			;CHNPRM_Size
     173.  00:8000  (00:F05D)           ChanC:			#29			;CHNPRM_Size
     174.  00:8000                      
     175.  00:8000                      ;GlobalVars
     176.  00:8000  (00:F07A)           DelyCnt:		#1
     177.  00:8000  (00:F07B)           CurESld:		#2
     178.  00:8000  (00:F07D)           CurEDel:		#1
     179.  00:8000  (00:F07E)           Ns_Base_AddToNs:	#0
     180.  00:8000  (00:F07E)           Ns_Base:		#1
     181.  00:8000  (00:F07F)           AddToNs:		#1
     182.  00:8000                      
     183.  00:8000  (00:F080)           NT_:			#192	; Puntero a/tabla de frecuencias
     184.  00:8000                      
     185.  00:8000  (00:F140)           AYREGS:			#0
     186.  00:8000  (00:F140)           VT_:			#14
     187.  00:8000  (00:F14E)           EnvBase:		#2
     188.  00:8000  (00:F150)           VAR0END:		#0
     189.  00:8000                      
     190.  00:8000  (00:F150)           T1_:			#0		
     191.  00:8000  (00:F150)           T_NEW_1:		#0
     192.  00:8000  (00:F150)           T_OLD_1:		#24
     193.  00:8000  (00:F168)           T_OLD_2:		#24
     194.  00:8000  (00:F180)           T_NEW_3:		#0
     195.  00:8000  (00:F180)           T_OLD_3:		#2
     196.  00:8000  (00:F182)           T_OLD_0:		#0
     197.  00:8000  (00:F182)           T_NEW_0:		#24
     198.  00:8000  (00:F19A)           T_NEW_2:		#166
     199.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER END
     200.  00:8000                      
     201.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ayFX REPLAYER 
     202.  00:8000  (00:F240)           ayFX_MODE:		#1			; ayFX mode
     203.  00:8000  (00:F241)           ayFX_BANK:		#2			; Current ayFX Bank
     204.  00:8000  (00:F243)           ayFX_PRIORITY:	#1			; Current ayFX stream priotity
     205.  00:8000  (00:F244)           ayFX_POINTER:	#2			; Pointer to the current ayFX stream
     206.  00:8000  (00:F246)           ayFX_TONE:		#2			; Current tone of the ayFX stream
     207.  00:8000  (00:F248)           ayFX_NOISE:		#1			; Current noise of the ayFX stream
     208.  00:8000  (00:F249)           ayFX_VOLUME:	#1			; Current volume of the ayFX stream
     209.  00:8000  (00:F24A)           ayFX_CHANNEL:	#1			; PSG channel to play the ayFX stream
     210.  00:8000                      
     211.  00:8000                      	;IF (AYFXRELATIVE == 1 ) 
     212.  00:8000                      ;ayFX_VT:	ds	2			; ayFX relative volume table pointer
     213.  00:8000                      	;ENDIF
     214.  00:8000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ayFX REPLAYER END
     215.  00:8000                      
     216.  00:8000                      
     217.  00:8000                      
       7   00:8000                      
       8   00:8000                      ;;=====================================================
       9   00:8000                      ;;DEFINICIÓN DE CABECERA DE ARCHIVO BIN
      10   00:8000                      ;;=====================================================		
      11   00:8000                      	include "cabecerabin.asm"
       1.  00:8000                      ;;=====================================================
       2.  00:8000                      ;; FICHERO cabecera.asm
       3.  00:8000                      ;;=====================================================
       4.  00:8000                      
       5.  00:8000                      ;;CABECERA FICHERO BIN
       6.  00:8000  FE                  	DB	#FE
       7.  00:8001  00 80               	DW	START
       8.  00:8003  53 A0               	DW	END
       9.  00:8005  00 80               	DW	START
      10.  00:8007                      
      11.  00:8007                      ;;INICIO CÓDIGO PROGRAMA	
      12.  00:8007                      	ORG	#8000
      13.  00:8000                      	
      12   00:8000                      	
      13   00:8000                      START:
      14   00:8000                      	;incializacion de replayer con interrupciones
      15   00:8000  CD 36 80            	CALL	inicializa_replayer_efectos_interrupciones
      16   00:8003                      	
      17   00:8003                      	
      18   00:8003                      	;inicializa pantalla y entonrno
      19   00:8003  CD 06 81            	CALL	sub_preparapantalla			;screen 2,2 sin click al pulsar tecla y color 16,1,1
      20   00:8006                      	
      21   00:8006                      	;inicializa variables para parametrizar funciones y que lo que se muestre sea variable (nº vidas, mapa, puertas, pantalla, etc...)
      22   00:8006  CD 59 80            	CALL	inicializa_variables_pruebas
      23   00:8009                      	
      24   00:8009                      	;inicializa los niveles por partida
      25   00:8009  CD 78 80            	CALL	inicializa_niveles			;no es necesario parametrizarlo según el nivel del usuario ya que se cargan todos
      26   00:800C                      	
      27   00:800C                      	;pinta la pantalla (la primera o algunas especiales se pintan completamente)
      28   00:800C  CD 27 81            	CALL	pinta_pantalla_completa 
      29   00:800F                      	
      30   00:800F                      	;carga sprites en memoria (SE HA RETRASADO HASTA PARAMETRIZAR LA CARGA DE PANTALLAS)
      31   00:800F  CD AB 83            	CALL 	carga_patrones_sprites_nivel1
      32   00:8012                      	
      33   00:8012                      	;funciones que modificarian el marcador si se produce un evento cuando toque y cuando se pinta la pantalla ya se mira
      34   00:8012                      	;una variable para ver si el array hay que actualizarlo en pantalla o no
      35   00:8012  CD 80 81            	CALL	pinta_vidas
      36   00:8015  CD 8F 81            	CALL 	pinta_reliquias
      37   00:8018  CD 9E 81            	CALL	pinta_nivel
      38   00:801B  CD 1F 82            	CALL	borra_mapa
      39   00:801E  CD AD 82            	CALL	pinta_puertas	
      40   00:8021                      
      41   00:8021  3E 13               	LD		 A, TILEPROTAM
      42   00:8023  32 E6 92            	LD		(elemento_pintar_mapa), A
      43   00:8026  CD 1F 83            	CALL	posiciona_en_mapa		;se le pasa elemento_pintar_mapa (tile del prota) está el prota y prota.poxx y posy
      44   00:8029                      	
      45   00:8029                      loop_principal:
      46   00:8029  76                  	HALT							;espera VBLANK y sincroniza
      47   00:802A                      	
      48   00:802A  CD 7C 84            	CALL	render_sprites			;actualiza array de sprites y los pinta en pantalla
      49   00:802D                      	
      50   00:802D  CD 10 82            	CALL	pinta_energia			;pinta la energia en pantalla
      51   00:8030                      
      52   00:8030  CD BF 84            	CALL	check_player			;MIRA EL CONTROL Y APLICA LA LOGICA DE MOVIMIENTO DEL PROTAGONISTA
      53   00:8033                      	
      54   00:8033  C3 29 80            	JP		loop_principal
      55   00:8036                      fin_programa_principal:
      56   00:8036                      	;RET
      57   00:8036                      
      58   00:8036                      
      59   00:8036                      
      60   00:8036                      ;;=====================================================
      61   00:8036                      ;;INICIALIZA_REPLAYER_EFECTOS_INTERRUPCIONES
      62   00:8036                      ;;=====================================================	
      63   00:8036                      ; función: 	inicializa: replayer de música, player de efectos e interrupciones
      64   00:8036                      ; entrada: 	-
      65   00:8036                      ; salida: 	-
      66   00:8036                      ; toca: 	HL, A
      67   00:8036                      inicializa_replayer_efectos_interrupciones:
      68   00:8036  F3                  	DI
      69   00:8037                      
      70   00:8037                      	;inicializacion de replayer musical
      71   00:8037  21 3D 96            	LD		HL, song-99			; hl <- initial address of module - 99
      72   00:803A  CD AA 86            	CALL	PT3_INIT			; Inits PT3 player
      73   00:803D                      		
      74   00:803D                      	;inicializacion del reproductor de efectos sonoros
      75   00:803D  21 08 A0            	LD		HL, sfx_bank
      76   00:8040  CD 99 8C            	CALL	ayFX_SETUP
      77   00:8043                      
      78   00:8043                      	;~ ;salva actual rutina en H.KEYI
      79   00:8043                      	;~ LD	DE,OLDINT	; get address of old int. hook saved area
      80   00:8043                      	;~ LD	HL,H.TIMI	; get address of interrupt entry hook
      81   00:8043                      	;~ LD	BC,5		; lenght of hook is 5 bytes
      82   00:8043                      	;~ LDIR			; transfer
      83   00:8043                      	
      84   00:8043                      	;Engancha nuestra rutina de servicio al gancha que deja preparado la BIOS cuando se termina de pintar la pantalla (50 o 60 veces por segundo)
      85   00:8043  3E C3               	LD		A, #C3
      86   00:8045  32 9F FD            	LD		[H.TIMI], A
      87   00:8048  21 50 80            	LD		HL, nuestra_isr
      88   00:804B  22 A0 FD            	LD		[H.TIMI+1], HL
      89   00:804E                      	
      90   00:804E  FB                  	EI		;optimizacion:
      91   00:804F                      			;piensa que las dos ultimas lineas podrian haber sido: 
      92   00:804F                      			;ei						;primero ei
      93   00:804F                      			;ld		[H.TIMI+1],hl	;luego este ld
      94   00:804F                      									;PENSAR (y consultar ) PORQUE!!!!
      95   00:804F                      fin_inicializa_replayer_efectos_interrupciones:
      96   00:804F  C9                  	RET
      97   00:8050                      
      98   00:8050                      
      99   00:8050                      
     100   00:8050                      ;;=====================================================
     101   00:8050                      ;;NUESTRA_ISR
     102   00:8050                      ;;=====================================================	
     103   00:8050                      ; función: 	envía datos al PSG + toca un trozo de música + toca trozo de 
     104   00:8050                      ; entrada: 	-
     105   00:8050                      ; salida: 	-
     106   00:8050                      ; toca: 	HL, A
     107   00:8050                      nuestra_isr:
     108   00:8050  CD EF 8B            	CALL	PT3_ROUT			;envia los datos a los registros del PSG
     109   00:8053  CD F7 8A            	CALL	PT3_PLAY			;calcula el siguiente 'trocito' de musica que sera enviado al proxima vez
     110   00:8056  C3 E1 8C            	JP		ayFX_PLAY			;calcula el siguiente 'trocito' de efecto especial de sonido que sera enviado la proxima vez
     111   00:8059                      fin_nuestra_isr:
     112   00:8059                      	;RET
     113   00:8059                      
     114   00:8059                      
     115   00:8059                      
     116   00:8059                      
     117   00:8059                      ;;*******************************************************************
     118   00:8059                      ; sólo para hacer pruebas y pintar la parte de las vidas y demás
     119   00:8059                      inicializa_variables_pruebas:
     120   00:8059  3E 04               	LD		 A, 4
     121   00:805B  32 C2 92            	LD		(prota_vidas),A
     122   00:805E                      
     123   00:805E  3E 04               	LD		 A, 4
     124   00:8060  32 C3 92            	LD		(prota_reliquias), A
     125   00:8063                      
     126   00:8063  3E 64               	LD		 A, 100
     127   00:8065  32 C6 92            	LD		(prota_energia), A
     128   00:8068                      
     129   00:8068                      	;ubico al prota dentro del nivel para obtener luego las habitaciones y enemigos que aparecerán
     130   00:8068                      	;será igual la posición inicial en todos los niveles
     131   00:8068                      	
     132   00:8068  3E 04               	LD		 A, 4				;los niveles (matrices) son 7 del 0 al 6
     133   00:806A  32 C1 92            	LD		(prota_nivel), A	;nivel empieza en 0 para usar las posiciones ascii
     134   00:806D                      
     135   00:806D  3E 06               	LD		 A, 6				;los subniveles (filas) son 7 del 0 al 6
     136   00:806F  32 C5 92            	LD		(prota_pos_mapy), A	;pos Y dentro del nivel (se empieza en 0)
     137   00:8072                      
     138   00:8072  3E 02               	LD		 A, 2				;columnas 7: del 0 al 6
     139   00:8074  32 C4 92            	LD		(prota_pos_mapx), A	;pos X dentro del nivel (se empieza en 0)
     140   00:8077                      	
     141   00:8077                      fin_inicializa_variables_pruebas:
     142   00:8077  C9                  	RET
     143   00:8078                      ;;************************************************************************
     144   00:8078                      
     145   00:8078                      
     146   00:8078                      
     147   00:8078                      
     148   00:8078                      
     149   00:8078                      
     150   00:8078                      
     151   00:8078                      
     152   00:8078                      
     153   00:8078                      ;;=====================================================
     154   00:8078                      ;;DEFINICIÓN DE SUBRUTINAS
     155   00:8078                      ;;=====================================================
     156   00:8078                      	include "subrutinas.asm"
       1.  00:8078                      ;;=====================================================
       2.  00:8078                      ;;DEFINICIÓN DE SUBRUTINAS
       3.  00:8078                      ;;=====================================================	
       4.  00:8078                      
       5.  00:8078                      
       6.  00:8078                      ;;=====================================================
       7.  00:8078                      ;;INICIALIZA_NIVELES
       8.  00:8078                      ;;=====================================================	
       9.  00:8078                      ; función: 	copia la plantilla de niveles (habitaciones_plantilla) en los niveles de trabajo para el juego (habitaciones_juego)
      10.  00:8078                      ; entrada: 	habitaciones_plantilla
      11.  00:8078                      ; salida: 	habitaciones_juego
      12.  00:8078                      ; toca: 	A
      13.  00:8078                      inicializa_niveles:
      14.  00:8078  D9                  	EXX
      15.  00:8079                      	
      16.  00:8079  AF                  	XOR		 A
      17.  00:807A  06 31               	LD		 B, 49				;7 filas por 7 niveles menos el primero que lo hago diera del buble porque se suma 14 y no 16
      18.  00:807C  21 98 8F            	LD		HL, habitaciones_juego;tambíen puntero al primer nivel
      19.  00:807F  11 0E 00            	LD		DE,14
      20.  00:8082  19                  	ADD		HL,DE
      21.  00:8083  77                  	LD		(HL),A
      22.  00:8084  11 10 00            	LD		DE,16				;desde las col 15 de una fila a la siguiente
      23.  00:8087                      .bucle_borra_hab:
      24.  00:8087  19                  	ADD		HL,DE
      25.  00:8088  77                  	LD		(HL),A
      26.  00:8089  10 FC               	DJNZ	.bucle_borra_hab
      27.  00:808B                      	
      28.  00:808B  D9                  	EXX
      29.  00:808C                      fin_iniciliza_niveles:
      30.  00:808C  C9                  	RET
      31.  00:808D                      
      32.  00:808D                      
      33.  00:808D                      ;;=====================================================
      34.  00:808D                      ;;ACTUALIZA_MARCADOR_VIDAS
      35.  00:808D                      ;;=====================================================	
      36.  00:808D                      ; función:  actualiza el buffer de vidas
      37.  00:808D                      ; entrada: 	prota_vidas
      38.  00:808D                      ; salida: 	array_aux_vidas
      39.  00:808D                      ; toca:		A,B,HL
      40.  00:808D                      actualiza_marcador_vidas:
      41.  00:808D                      	;para no andar restando pongo todos los huecos a negro y luego en otro bucle las caras
      42.  00:808D                      	;1-pinto todo en blanco
      43.  00:808D  21 C7 92            	LD		HL,array_aux_vidas
      44.  00:8090  06 08               	LD		 B,NMAXVIDREL
      45.  00:8092                      loop_marcador_caras_negro:	;asignar espacios en negro
      46.  00:8092  36 00               	LD		(HL),0			;0 posición mapa tiles para nada (es transparente pero el fondo es negro)
      47.  00:8094  23                  	INC		HL
      48.  00:8095  10 FB               	DJNZ	loop_marcador_caras_negro
      49.  00:8097                      fin_loop_marcador_caras_negro:
      50.  00:8097                      	;2-pinto las caras según el n de vidas
      51.  00:8097  3A C2 92            	LD		 A, (prota_vidas)
      52.  00:809A  B7                  	OR		 A
      53.  00:809B  C8                  	RET 	 Z
      54.  00:809C  47                  	LD		 B, A
      55.  00:809D  21 C7 92            	LD		HL, array_aux_vidas
      56.  00:80A0                      loop_marcador_caras: ;asignar caras
      57.  00:80A0  36 0D               	LD		(HL), POSCARAMAP	;13 posición mapa tiles para cara
      58.  00:80A2  23                  	INC		HL
      59.  00:80A3  10 FB               	DJNZ	loop_marcador_caras
      60.  00:80A5                      fin_loop_marcador_caras:
      61.  00:80A5                      
      62.  00:80A5                      fin_actualiza_marcador_vidas:
      63.  00:80A5  C9                  	RET
      64.  00:80A6                      
      65.  00:80A6                      
      66.  00:80A6                      ;;=====================================================
      67.  00:80A6                      ;;ACTUALIZA_BUFFER_RELIQUIAS
      68.  00:80A6                      ;;=====================================================	
      69.  00:80A6                      ; función: 	actualiza buffer de reliquias
      70.  00:80A6                      ; entrada: 	prota_reliquias
      71.  00:80A6                      ; salida: 	array_aux_reliquias
      72.  00:80A6                      ; toca:		A,B,HL
      73.  00:80A6                      actualiza_buffer_reliquias:	
      74.  00:80A6                      	;para no andar restando pongo todos los huecos a negro y luego en otro bucle las reliquias
      75.  00:80A6                      	;1-pinto todo en blanco
      76.  00:80A6  21 CF 92            	LD		HL, array_aux_reliquias
      77.  00:80A9  06 08               	LD		 B, NMAXVIDREL
      78.  00:80AB  AF                  	XOR		 A
      79.  00:80AC                      loop_buffer_reliquias_negro:	;asignar espacios en negro
      80.  00:80AC  77                  	LD		(HL), A			;0 posición mapa tiles para nada (es transparente pero el fondo es negro)
      81.  00:80AD  23                  	INC		HL
      82.  00:80AE  10 FC               	DJNZ	loop_buffer_reliquias_negro
      83.  00:80B0                      
      84.  00:80B0                      	;2-pinto las cruces según el n de reliquias
      85.  00:80B0  21 CF 92            	LD		HL, array_aux_reliquias
      86.  00:80B3  3A C3 92            	LD		 A, (prota_reliquias)
      87.  00:80B6  B7                  	OR		 A
      88.  00:80B7  C8                  	RET		 Z
      89.  00:80B8  47                  	LD		 B, A
      90.  00:80B9                      loop_buffer_reliquias: ;asignar reliquias
      91.  00:80B9  36 11               	LD		(HL), POSRELIMAP	;17 posición mapa tiles para reliquia
      92.  00:80BB  23                  	INC		HL
      93.  00:80BC  10 FB               	DJNZ	loop_buffer_reliquias
      94.  00:80BE                      fin_actualiza_buffer_reliquias:
      95.  00:80BE  C9                  	RET
      96.  00:80BF                      
      97.  00:80BF                      
      98.  00:80BF                      
      99.  00:80BF                      ;;=====================================================
     100.  00:80BF                      ;;LOCALIZA_INFO_HABITACION
     101.  00:80BF                      ;;=====================================================	
     102.  00:80BF                      ; función: 	busca las puertas que hay que pintar egún la posición del usuario y las pone en habitacion_actual
     103.  00:80BF                      ; entrada: 	prota.pos_mapy, prota.pos_mapx, prota_nivel habitaciones_juego
     104.  00:80BF                      ; salida: 	habitacion_actual
     105.  00:80BF                      ; toca:		todo
     106.  00:80BF                      ;ejemplo: nivel 4, posy 5 y posx 3
     107.  00:80BF                      ;3 + 5 x 8 + 4 x 49
     108.  00:80BF                      localiza_info_habitacion:
     109.  00:80BF                      ;primera posición: me coloco en la columna correcta
     110.  00:80BF  21 98 8F            	LD		HL, habitaciones_juego
     111.  00:80C2                      .situo_columna:	
     112.  00:80C2  3A C4 92            	LD		 A, (prota_pos_mapx)
     113.  00:80C5  CB 27               	SLA		 A				;multiplico por dos ya que cada habitación va de dos en dos bytes
     114.  00:80C7  06 00               	LD		 B, 0
     115.  00:80C9  4F                  	LD		 C, A
     116.  00:80CA                      
     117.  00:80CA  09                  	ADD 	HL, BC			;sumo a la posición 0 la columnax2 en la que situarme
     118.  00:80CB                      	
     119.  00:80CB                      .situo_fila:
     120.  00:80CB  3A C5 92            	LD		A, (prota_pos_mapy)
     121.  00:80CE  B7                  	OR	 	A
     122.  00:80CF  CA DC 80            	JP		Z, .situo_nivel	;si la fila es 0 no es necesario seguir operando en fila
     123.  00:80D2                      	
     124.  00:80D2  47                  	LD		B, A
     125.  00:80D3  AF                  	XOR		A
     126.  00:80D4                      .loop_suma_fila:
     127.  00:80D4  C6 10               	ADD		16				;cada fila tiene 16 bytes
     128.  00:80D6  10 FC               	DJNZ	.loop_suma_fila
     129.  00:80D8                      	
     130.  00:80D8  06 00               	LD		 B, 0
     131.  00:80DA  4F                  	LD		 C, A
     132.  00:80DB                      
     133.  00:80DB  09                  	ADD 	HL, BC			;sumo a la columna 16 x filas para situarme en la fila correcta
     134.  00:80DC                      
     135.  00:80DC                      .situo_nivel:
     136.  00:80DC  3A C1 92            	LD		 A, (prota_nivel)
     137.  00:80DF  B7                  	OR	 	 A
     138.  00:80E0  CA F0 80            	JP		 Z, .actualiza_valiable_habitacion	;si el nivel es 0 al pasar por las anterirores ya estoy situado actualizo la variable y termino
     139.  00:80E3                      	
     140.  00:80E3  E5                  	PUSH	HL				;guardo el resultado intermedio
     141.  00:80E4                      	
     142.  00:80E4  47                  	LD		 B, A			;preparo la varible del bucle
     143.  00:80E5  11 70 00            	LD		DE, 112			;112 = 16x42 son los bytes de cada matriz-nivel
     144.  00:80E8  21 00 00            	LD		HL, 0
     145.  00:80EB                      .loop_suma_nivel:
     146.  00:80EB  19                  	ADD		HL,DE
     147.  00:80EC  10 FD               	DJNZ	.loop_suma_nivel
     148.  00:80EE                      	
     149.  00:80EE  D1                  	POP		DE				;devuelvo el resultado intermedio en DE que ya no lo necesito
     150.  00:80EF                      	
     151.  00:80EF  19                  	ADD		HL,DE			;sumo el resultdo del nivel al resultado intermedio anterior
     152.  00:80F0                      
     153.  00:80F0                      .actualiza_valiable_habitacion
     154.  00:80F0  7E                  	LD		 A, (HL)
     155.  00:80F1  32 96 8F            	LD		(habitacion_actual), A
     156.  00:80F4                      fin_localiza_info_habitacion:
     157.  00:80F4  C9                  	RET
     158.  00:80F5                      
     159.  00:80F5                      
     160.  00:80F5                      
     161.  00:80F5                      
     157   00:80F5                      	
     158   00:80F5                      	include "subr_pintapantalla.asm"
       1.  00:80F5                      ;;=====================================================
       2.  00:80F5                      ;;DEFINICIÓN DE SUBRUTINAS
       3.  00:80F5                      ;;=====================================================	
       4.  00:80F5                      ;relacionadas con pintado en pantalla (y no sprites)
       5.  00:80F5                      
       6.  00:80F5                      
       7.  00:80F5                      ;;=====================================================
       8.  00:80F5                      ;;COLOR_PANTALLA
       9.  00:80F5                      ;;=====================================================	
      10.  00:80F5                      ; función: 	el equivalente en basic a color 15,1,1
      11.  00:80F5                      ; entrada: 	HL	que apunta a un array de bytes con 3 bytes FORCLR, BAKCLR y BDRCLR
      12.  00:80F5                      ; salida: 	-
      13.  00:80F5                      ; toca: 	todo
      14.  00:80F5                      color_pantalla:
      15.  00:80F5  7E                  	LD		 A, (HL)			;FORCLR 
      16.  00:80F6  32 E9 F3            	LD 		(FORCLR),A
      17.  00:80F9  23                  	INC		HL
      18.  00:80FA                      	
      19.  00:80FA  7E                  	LD		 A, (HL)			;BAKCLR
      20.  00:80FB  32 EA F3            	LD 		(BAKCLR),A
      21.  00:80FE  23                  	INC		HL
      22.  00:80FF                      	
      23.  00:80FF  7E                  	LD		 A, (HL)
      24.  00:8100  32 EB F3            	LD 		(BDRCLR),A			;BDRCLR
      25.  00:8103  C3 62 00            	JP		CHGCLR 
      26.  00:8106                      fin_color_pantalla:
      27.  00:8106                      	;RET
      28.  00:8106                      
      29.  00:8106                      
      30.  00:8106                      ;;=====================================================
      31.  00:8106                      ;;PREPARAPANTALLA
      32.  00:8106                      ;;=====================================================	
      33.  00:8106                      ; función: elimina clic cuando se pulsa tecla, cls, screen 2,2
      34.  00:8106                      ; entrada: -
      35.  00:8106                      ; salida: -
      36.  00:8106                      ; toca: si no son todos los regristros, casi todos
      37.  00:8106                      sub_preparapantalla:
      38.  00:8106                      	;toca A y Z
      39.  00:8106                      elimina_clic;
      40.  00:8106  AF                  	XOR		 A
      41.  00:8107  32 DB F3            	LD		(CLIKSW),A
      42.  00:810A                      fin_elimina_clic:
      43.  00:810A                      
      44.  00:810A                      	;toca A
      45.  00:810A                      limpia_pantalla:
      46.  00:810A  AF                  	XOR		 A
      47.  00:810B  CD C3 00            	CALL 	CLS
      48.  00:810E                      fin_limpia_pantalla:
      49.  00:810E                      
      50.  00:810E                      	;toca A y direcciones #F3E9/#F3EA/#F3EB, poner en HL array con 3 valores
      51.  00:810E  21 A8 92            	LD		HL, color_base
      52.  00:8111  CD F5 80            	CALL	color_pantalla
      53.  00:8114                      	
      54.  00:8114                      	;cambiamos a SCREEN 2,2 del BASIC
      55.  00:8114                      	;toca A
      56.  00:8114                      screen2:
      57.  00:8114  3E 02               	LD		 A, 2
      58.  00:8116  CD 5F 00            	CALL	CHGMOD			;selecciona screen 2
      59.  00:8119                      sprites_16_16:
      60.  00:8119  3A E0 F3            	LD		 A, (RG1SAV)
      61.  00:811C  F6 02               	OR		00000010b		;fuerza sprites de 16x16
      62.  00:811E  32 E0 F3            	LD		(RG1SAV), A		;no lo guardamos en la copia de variables del sistema
      63.  00:8121  47                  	LD		 B, A
      64.  00:8122  0E 01               	LD		 C, 1
      65.  00:8124  C3 47 00            	JP		WRTVDP			;opción alternativa de escribir las tres lineas siguientes
      66.  00:8127                      	;~ CALL	WRTVDP			;lo escribe en el registro 1 del VDP
      67.  00:8127                      	;~ RET
      68.  00:8127                      fin_sub_preparapantalla:
      69.  00:8127                      	
      70.  00:8127                      
      71.  00:8127                      ;;=====================================================
      72.  00:8127                      ;;PINTA_PANTALLA_COMPLETA
      73.  00:8127                      ;;=====================================================	
      74.  00:8127                      ; función: pinta el escenario, las 3 partes
      75.  00:8127                      ; entrada: -
      76.  00:8127                      ; salida: -
      77.  00:8127                      ; toca: si no son todos los regristros, casi todos
      78.  00:8127                      pinta_pantalla_completa:
      79.  00:8127  CD 2E 81            	CALL 	pinta_parte_superior_pantalla
      80.  00:812A                      	
      81.  00:812A  CD 65 81            	CALL 	pinta_parte_inferior_pantalla	
      82.  00:812D                      fin_pinta_pantalla_completa:
      83.  00:812D  C9                  	RET
      84.  00:812E                      
      85.  00:812E                      
      86.  00:812E                      ;;=====================================================
      87.  00:812E                      ;;PINTA_PARTE_SUPERIOR_PANTALLA
      88.  00:812E                      ;;=====================================================	
      89.  00:812E                      ; función: pinta el escenario, las 2 partes superiores y actualiza puertas
      90.  00:812E                      ; entrada: -
      91.  00:812E                      ; salida: -
      92.  00:812E                      ; toca: si no son todos los regristros, casi todos
      93.  00:812E                      pinta_parte_superior_pantalla:
      94.  00:812E                      
      95.  00:812E                      ;************** preguntar cómo parametrizar esto **********************************************
      96.  00:812E                      
      97.  00:812E                      	;cangando banco 1
      98.  00:812E                      	;cargamos los patrones
      99.  00:812E  21 37 94            	LD		HL, tiles_patrones_pantalla11
     100.  00:8131  11 00 00            	LD		DE, CHRTBL
     101.  00:8134  CD AD 85            	CALL	depack_VRAM
     102.  00:8137                      	;cargamos mapa de pantalla
     103.  00:8137  21 72 94            	LD		HL, tiles_mapa_pantalla11
     104.  00:813A  11 00 18            	LD		DE, TILMAP
     105.  00:813D  CD AD 85            	CALL	depack_VRAM
     106.  00:8140                      	;cargamos los colores de los patrones
     107.  00:8140  21 5A 94            	LD		HL, tiles_color_pantalla11
     108.  00:8143  11 00 20            	LD		DE, CLRTBL
     109.  00:8146  CD AD 85            	CALL	depack_VRAM
     110.  00:8149                      	
     111.  00:8149                      	;cangando banco 2
     112.  00:8149                      	;cargamos los patrones
     113.  00:8149  21 37 94            	LD		HL, tiles_patrones_pantalla12
     114.  00:814C  11 00 08            	LD		DE, CHRTBL + #0800
     115.  00:814F  CD AD 85            	CALL	depack_VRAM	
     116.  00:8152                      	;cargamos mapa de pantalla
     117.  00:8152  21 8C 94            	LD		HL, tiles_mapa_pantalla12
     118.  00:8155  11 00 19            	LD		DE, TILMAP + #0100
     119.  00:8158  CD AD 85            	CALL	depack_VRAM
     120.  00:815B                      	;cargamos los colores de los patrones
     121.  00:815B  21 5A 94            	LD		HL, tiles_color_pantalla12
     122.  00:815E  11 00 28            	LD		DE, CLRTBL + #0800
     123.  00:8161                      	;JP		depack_VRAM
     124.  00:8161  CD AD 85            	CALL	depack_VRAM
     125.  00:8164                      fin_pinta_parte_superior_pantalla:
     126.  00:8164  C9                  	RET
     127.  00:8165                      
     128.  00:8165                      
     129.  00:8165                      ;;=====================================================
     130.  00:8165                      ;;PINTA_PARTE_INFERIOR_PANTALLA
     131.  00:8165                      ;;=====================================================	
     132.  00:8165                      ; función: pinta la parte inferior del escenario que es común
     133.  00:8165                      ; entrada: -
     134.  00:8165                      ; salida: -
     135.  00:8165                      ; toca: si no son todos los regristros, casi todos
     136.  00:8165                      pinta_parte_inferior_pantalla:
     137.  00:8165                      	;cangando banco 3
     138.  00:8165                      	;cargamos los patrones
     139.  00:8165  21 B6 94            	LD		HL,tiles_patrones_pantalla3
     140.  00:8168  11 00 10            	LD		DE,CHRTBL + #1000
     141.  00:816B  CD AD 85            	CALL	depack_VRAM	
     142.  00:816E                      	;cargamos mapa de pantalla
     143.  00:816E  21 31 96            	LD		HL,tiles_mapa_pantalla3
     144.  00:8171  11 00 1A            	LD		DE,TILMAP + #0200
     145.  00:8174  CD AD 85            	CALL	depack_VRAM
     146.  00:8177                      	;cargamos los colores de los patrones
     147.  00:8177  21 FC 95            	LD		HL,tiles_color_pantalla3
     148.  00:817A  11 00 30            	LD		DE,CLRTBL + #1000
     149.  00:817D  C3 AD 85            	JP		depack_VRAM
     150.  00:8180                      	;~ CALL	depack_VRAM
     151.  00:8180                      fin_pinta_parte_inferior_pantalla:
     152.  00:8180                      	;~ RET
     153.  00:8180                      
     154.  00:8180                      
     155.  00:8180                      
     156.  00:8180                      ;;=====================================================
     157.  00:8180                      ;;PINTA_VIDAS
     158.  00:8180                      ;;=====================================================	
     159.  00:8180                      ; función: 	actualiza el mapa de tiles para que en el próximo refresco se pinten y actualiza_vidas
     160.  00:8180                      ; entrada: 	array_aux_vidas
     161.  00:8180                      ; salida: 	actualiza_vidas_sn
     162.  00:8180                      ; toca:		todo
     163.  00:8180                      pinta_vidas:
     164.  00:8180  CD 8D 80            	CALL	actualiza_marcador_vidas
     165.  00:8183                      	
     166.  00:8183  21 C7 92            	LD		HL, array_aux_vidas
     167.  00:8186  11 48 1A            	LD		DE, TILMAP + POSVIDAS 	;inicio posición en el mapa de tiles de las vidas
     168.  00:8189  01 08 00            	LD		BC, NMAXVIDREL			;hay 8 posiciones para vidas/reliquias o espacios en negro si no tiene 8 vidas/reliquias
     169.  00:818C  C3 5C 00            	JP		LDIRVM
     170.  00:818F                      fin_pinta_vidas:
     171.  00:818F                      	;RET
     172.  00:818F                      	
     173.  00:818F                      	
     174.  00:818F                      
     175.  00:818F                      ;;=====================================================
     176.  00:818F                      ;;PINTA_RELIQUIAS
     177.  00:818F                      ;;=====================================================	
     178.  00:818F                      ; función: 	actualiza el mapa de tiles para que en el próximo refresco se pinten y actualiza_reliquias
     179.  00:818F                      ; entrada: 	array_aux_reliquias
     180.  00:818F                      ; salida: 	-
     181.  00:818F                      ; toca:		todo
     182.  00:818F                      pinta_reliquias:
     183.  00:818F  CD A6 80            	CALL	actualiza_buffer_reliquias
     184.  00:8192                      	
     185.  00:8192  21 CF 92            	LD		HL, array_aux_reliquias
     186.  00:8195  11 C8 1A            	LD		DE, TILMAP + POSRELIQ 	;inicio posición en el mapa de tiles de las vidas
     187.  00:8198  01 08 00            	LD		BC, NMAXVIDREL			;hay 8 posiciones para vidas/reliquias o espacios en negro si no tiene 8 vidas/reliquias
     188.  00:819B  C3 5C 00            	JP		LDIRVM
     189.  00:819E                      fin_pinta_reliquias:
     190.  00:819E                      	;RET
     191.  00:819E                      	
     192.  00:819E                      
     193.  00:819E                      
     194.  00:819E                      	
     195.  00:819E                      ;;=====================================================
     196.  00:819E                      ;;PINTA_NIVEL
     197.  00:819E                      ;;=====================================================	
     198.  00:819E                      ; función: 	actualiza el nivel en la parte de puntuación
     199.  00:819E                      ; entrada: 	prota_nivel
     200.  00:819E                      ; salida: 	-
     201.  00:819E                      ; toca:		HL,DE,BC
     202.  00:819E                      pinta_nivel:	
     203.  00:819E                      	;forma más avanzada sin llamada a la bios
     204.  00:819E  01 B4 1A            	LD		BC,TILMAP + POSNIVEL ;posición en el mapa de tiles del tile de nivel
     205.  00:81A1  3A C1 92            	LD		 A, (prota_nivel)	;seleccionando la pos del banco de tiles a poner en el mapa
     206.  00:81A4  C6 30               	ADD		'0'	
     207.  00:81A6  57                  	LD		 D, A
     208.  00:81A7                      	
     209.  00:81A7  CD AB 81            	CALL	pinta_tile_suelto	;nota ... un call+ret se debe poder sustiruir por un jp
     210.  00:81AA                      fin_pinta_nivel:
     211.  00:81AA  C9                  	RET
     212.  00:81AB                      
     213.  00:81AB                      
     214.  00:81AB                      
     215.  00:81AB                      ;;=====================================================
     216.  00:81AB                      ;;PINTA_TILE_SUELTO
     217.  00:81AB                      ;;=====================================================	
     218.  00:81AB                      ; función: 	pinta al tile que digamos en D, en la posición BC
     219.  00:81AB                      ; entrada: 	BC (posición a pintar en el mapa),D (qué se va a pintar el esa posición)
     220.  00:81AB                      ; salida: 	-
     221.  00:81AB                      ; toca:		-
     222.  00:81AB                      pinta_tile_suelto:
     223.  00:81AB  DB 99               	IN		 A,(REGEST)		;leer registro de estado (recomendado)
     224.  00:81AD  79                  	LD		 A,C			;primero byte bajo	
     225.  00:81AE  D3 99               	OUT		(REGEST),A
     226.  00:81B0  78                  	LD		 A,B			;después byte alto  ********************** preguntar a Fernando cómo que byte bajo es B
     227.  00:81B1  F6 40               	OR		1000000b		;+64
     228.  00:81B3  D3 99               	OUT		(REGEST),A
     229.  00:81B5                      	
     230.  00:81B5  7A                  	LD		A,D
     231.  00:81B6  D3 98               	OUT		(REGESCVDP),A	;escribe A en VRAM en la posición indicada por los dos OUT anteriores
     232.  00:81B8                      fin_pinta_tile_suelto:
     233.  00:81B8  C9                  	RET
     234.  00:81B9                      
     235.  00:81B9                      
     236.  00:81B9                      
     237.  00:81B9                      
     238.  00:81B9                      
     239.  00:81B9                      ;;=====================================================
     240.  00:81B9                      ;;MIRA_PINTA ENERGIA
     241.  00:81B9                      ;;=====================================================	
     242.  00:81B9                      ; función: 	actualiza el nivel de energia en la parte de puntuación
     243.  00:81B9                      ; nota:		el cuadrado más bajo de ejergía siempre estará pintado... se obviará
     244.  00:81B9                      ; entrada: 	prota.energia, array_aux_energia
     245.  00:81B9                      ; salida: 	-
     246.  00:81B9                      ; toca:		ninguno porque usa EXX
     247.  00:81B9                      
     248.  00:81B9                      ; nota importante... lo mismo interesa hacer esto con un array para comparar y un bucle
     249.  00:81B9                      
     250.  00:81B9                      
     251.  00:81B9                      mira_pinta_energia:
     252.  00:81B9  D9                  	EXX							;por si acaso guardo el contenido de HL (si veo que no es necesario guardarlo lo quito) uso esto en vez de push por el nº ciclos
     253.  00:81BA                      	
     254.  00:81BA  3A C6 92            	LD		 A,(prota_energia) 	;para las comparaciones A variable (actual) y B fijo (limites)
     255.  00:81BD                      
     256.  00:81BD  0E 00               	LD		 C,TILENEGRO		;para agilizar asignaciones en vez de un valor cte uso otro registro
     257.  00:81BF                      pinta_ener:
     258.  00:81BF                      pinta_ener_tile_8:
     259.  00:81BF  21 DE 92            	LD		HL,ultimo_pos_array_aux_energia	;coloco puntero en array e iré decrementando
     260.  00:81C2  06 D9               	LD		 B,TILEENERG8
     261.  00:81C4  B8                  	CP		 B
     262.  00:81C5  38 04               	JR		C,pinta_ener_tile_8_negro
     263.  00:81C7  36 0E               	LD		(HL),TILEMAPVERD
     264.  00:81C9  18 01               	JR		pinta_ener_tile_7
     265.  00:81CB                      pinta_ener_tile_8_negro:
     266.  00:81CB  71                  	LD		(HL),C
     267.  00:81CC                      
     268.  00:81CC                      pinta_ener_tile_7:
     269.  00:81CC  2B                  	DEC		HL
     270.  00:81CD  06 BA               	LD		 B,TILEENERG7
     271.  00:81CF  B8                  	CP		 B
     272.  00:81D0  38 04               	JR		C,pinta_ener_tile_7_negro
     273.  00:81D2  36 0E               	LD		(HL),TILEMAPVERD
     274.  00:81D4  18 01               	JR		pinta_ener_tile_6
     275.  00:81D6                      pinta_ener_tile_7_negro:
     276.  00:81D6  71                  	LD		(HL),C
     277.  00:81D7                      
     278.  00:81D7                      pinta_ener_tile_6:
     279.  00:81D7  2B                  	DEC		HL
     280.  00:81D8  06 9B               	LD		 B,TILEENERG6
     281.  00:81DA  B8                  	CP		 B
     282.  00:81DB  38 04               	JR		C,pinta_ener_tile_6_negro
     283.  00:81DD  36 0E               	LD		(HL),14
     284.  00:81DF  18 01               	JR		pinta_ener_tile_5
     285.  00:81E1                      pinta_ener_tile_6_negro:
     286.  00:81E1  71                  	LD		(HL),C
     287.  00:81E2                      
     288.  00:81E2                      pinta_ener_tile_5:
     289.  00:81E2  2B                  	DEC		HL
     290.  00:81E3  06 7C               	LD		 B,TILEENERG5
     291.  00:81E5  B8                  	CP		 B
     292.  00:81E6  38 04               	JR		C,pinta_ener_tile_5_negro
     293.  00:81E8  36 0E               	LD		(HL),TILEMAPVERD
     294.  00:81EA  18 01               	JR		pinta_ener_tile_4
     295.  00:81EC                      pinta_ener_tile_5_negro:
     296.  00:81EC  71                  	LD		(HL),C
     297.  00:81ED                      
     298.  00:81ED                      pinta_ener_tile_4:
     299.  00:81ED  2B                  	DEC		HL
     300.  00:81EE  06 5D               	LD		 B,TILEENERG4
     301.  00:81F0  B8                  	CP		 B
     302.  00:81F1  38 04               	JR		C,pinta_ener_tile_4_negro
     303.  00:81F3  36 0F               	LD		(HL),TILEMAPAMAR
     304.  00:81F5  18 01               	JR		pinta_ener_tile_3
     305.  00:81F7                      pinta_ener_tile_4_negro:
     306.  00:81F7  71                  	LD		(HL),C
     307.  00:81F8                      	
     308.  00:81F8                      pinta_ener_tile_3:
     309.  00:81F8  2B                  	DEC		HL
     310.  00:81F9  06 3E               	LD		 B,TILEENERG3
     311.  00:81FB  B8                  	CP		 B
     312.  00:81FC  38 04               	JR		C,pinta_ener_tile_3_negro
     313.  00:81FE  36 0F               	LD		(HL),TILEMAPAMAR
     314.  00:8200  18 01               	JR		pinta_ener_tile_2
     315.  00:8202                      pinta_ener_tile_3_negro:
     316.  00:8202  71                  	LD		(HL),C
     317.  00:8203                      
     318.  00:8203                      pinta_ener_tile_2:
     319.  00:8203  2B                  	DEC		HL
     320.  00:8204  06 1F               	LD		 B,TILEENERG2
     321.  00:8206  B8                  	CP		 B
     322.  00:8207  38 04               	JR		C,pinta_ener_tile_2_negro
     323.  00:8209  36 10               	LD		(HL),TILEMAPROJO
     324.  00:820B  18 01               	JR		fin_mira_pinta_energia		;siempre estará pintado el cuadro mínimo
     325.  00:820D                      pinta_ener_tile_2_negro:
     326.  00:820D  71                  	LD		(HL),C
     327.  00:820E                      
     328.  00:820E                      fin_mira_pinta_energia:
     329.  00:820E  D9                  	EXX
     330.  00:820F  C9                  	RET
     331.  00:8210                      
     332.  00:8210                      
     333.  00:8210                      ;;=====================================================
     334.  00:8210                      ;;PINTA_ENERGIA
     335.  00:8210                      ;;=====================================================	
     336.  00:8210                      ; función: 	actualiza el mapa de tiles para que en el próximo refresco se pinte la barra de energia actual
     337.  00:8210                      ; entrada: 	array_aux_energia
     338.  00:8210                      ; toca:		todo
     339.  00:8210                      pinta_energia:
     340.  00:8210  CD B9 81            	CALL	mira_pinta_energia
     341.  00:8213                      	
     342.  00:8213  21 D7 92            	LD		HL, array_aux_energia
     343.  00:8216  11 88 1A            	LD		DE, TILMAP + POSENERG 	;inicio posición en el mapa de tiles de las vidas
     344.  00:8219  01 08 00            	LD		BC, NMAXVIDREL			;hay 8 posiciones para vidas/reliquias o espacios en negro si no tiene 8 vidas/reliquias
     345.  00:821C  C3 5C 00            	JP		LDIRVM
     346.  00:821F                      fin_pinta_energia:
     347.  00:821F                      	;RET
     348.  00:821F                      
     349.  00:821F                      
     350.  00:821F                      
     351.  00:821F                      ;;=====================================================
     352.  00:821F                      ;;BORRA_MAPA
     353.  00:821F                      ;;=====================================================	
     354.  00:821F                      ; función: 	pone todas las habitaciones del mapa a negro (los tiles del mapa los rellena con un array a 0 - caracter en negro)
     355.  00:821F                      ; entrada: 	array_aux_mapa_limpiar
     356.  00:821F                      ; salida: 	-
     357.  00:821F                      ; toca:		AF
     358.  00:821F                      borra_mapa:
     359.  00:821F  D9                  	EXX
     360.  00:8220                      	
     361.  00:8220  21 DF 92            	LD		HL,array_aux_mapa_limpiar
     362.  00:8223  11 F8 1A            	LD		DE,TILMAP + POSMAPLIN1 	;inicio posición en el mapa de tiles de la primera fila del mapa
     363.  00:8226  01 07 00            	LD		BC,NHABNIVEL			;cada nivel son 7 filas con 7 habitaciones "posibles"
     364.  00:8229  CD 5C 00            	CALL	LDIRVM
     365.  00:822C                      	
     366.  00:822C  21 DF 92            	LD		HL,array_aux_mapa_limpiar
     367.  00:822F  11 D8 1A            	LD		DE,TILMAP + POSMAPLIN2
     368.  00:8232  01 07 00            	LD		BC,NHABNIVEL
     369.  00:8235  CD 5C 00            	CALL	LDIRVM
     370.  00:8238                      
     371.  00:8238  21 DF 92            	LD		HL,array_aux_mapa_limpiar
     372.  00:823B  11 B8 1A            	LD		DE,TILMAP + POSMAPLIN3
     373.  00:823E  01 07 00            	LD		BC,NHABNIVEL
     374.  00:8241  CD 5C 00            	CALL	LDIRVM
     375.  00:8244                      
     376.  00:8244  21 DF 92            	LD		HL,array_aux_mapa_limpiar	
     377.  00:8247  11 98 1A            	LD		DE,TILMAP + POSMAPLIN4
     378.  00:824A  01 07 00            	LD		BC,NHABNIVEL
     379.  00:824D  CD 5C 00            	CALL	LDIRVM
     380.  00:8250                      
     381.  00:8250  21 DF 92            	LD		HL,array_aux_mapa_limpiar	
     382.  00:8253  11 78 1A            	LD		DE,TILMAP + POSMAPLIN5
     383.  00:8256  01 07 00            	LD		BC,NHABNIVEL
     384.  00:8259  CD 5C 00            	CALL	LDIRVM
     385.  00:825C                      
     386.  00:825C  21 DF 92            	LD		HL,array_aux_mapa_limpiar	
     387.  00:825F  11 58 1A            	LD		DE,TILMAP + POSMAPLIN6
     388.  00:8262  01 07 00            	LD		BC,NHABNIVEL
     389.  00:8265  CD 5C 00            	CALL	LDIRVM
     390.  00:8268                      
     391.  00:8268  21 DF 92            	LD		HL,array_aux_mapa_limpiar	
     392.  00:826B  11 38 1A            	LD		DE,TILMAP + POSMAPLIN7
     393.  00:826E  01 07 00            	LD		BC,NHABNIVEL
     394.  00:8271  CD 5C 00            	CALL	LDIRVM
     395.  00:8274                      	
     396.  00:8274  D9                  	EXX
     397.  00:8275                      fin_borra_mapa:
     398.  00:8275  C9                  	RET
     399.  00:8276                      
     400.  00:8276                      
     401.  00:8276                      
     402.  00:8276                      
     403.  00:8276                      
     404.  00:8276                      
     405.  00:8276                      
     406.  00:8276                      
     407.  00:8276                      
     408.  00:8276                      ;=====================================================
     409.  00:8276                      ;;PINTA_ARRAY
     410.  00:8276                      ;;=====================================================	
     411.  00:8276                      ;;;funcion:  se le pasa un array con posiciones de tiles y coordenadas x e y y los pinta en screen 2
     412.  00:8276                      ;;entrada:	wordaux1 (pos inicio sc2 donde pintar) y wordaux2 (puntero al array a pintar), BC (posición en tilemap) , D filas y E columnas
     413.  00:8276                      ;;salida:	-
     414.  00:8276                      ;;importante: necesita de una variable wordaux1 tipo WD (wordaux1: 	DW	0)
     415.  00:8276                      ;; ejemplo llamada:
     416.  00:8276                      	;~ LD		HL,array_tiles					;guardo puntero al array a pintar (como psar por referencia)
     417.  00:8276                      	;~ LD		(wordaux2),HL					;en la variable wordaux2
     418.  00:8276                      	;~ LD		HL,SC2MAP + 256 + 32			;calcula posición en tilemap
     419.  00:8276                      	;~ LD		(wordaux1),HL					;guarda valor pos tilemap en wordaux1
     420.  00:8276                      	;~ LD		B,H								;coloca posición tilemap BC
     421.  00:8276                      	;~ LD		C,L
     422.  00:8276                      	;~ LD		D,2								;nº de filas
     423.  00:8276                      	;~ LD		E,3								;nº de columnas
     424.  00:8276                      	;~ CALL	pinta_array
     425.  00:8276                      
     426.  00:8276                      pinta_array:
     427.  00:8276  F5                  	PUSH	AF
     428.  00:8277                      	
     429.  00:8277                      	;contamos con que la posición "global" en el tilemap está ya en BC
     430.  00:8277                      	;y el puntero al array a pintar en wordaux2 y la posición en tilemap sc2 en wordaux1
     431.  00:8277                      	;inicializa
     432.  00:8277  DB 99               	IN		 A,(REGEST)		;leer registro de estado (recomendado)
     433.  00:8279                      	
     434.  00:8279                      	;coloca puntero para pintar tile según BC
     435.  00:8279  79                  	LD		 A,C			;primero byte bajo	
     436.  00:827A  D3 99               	OUT		(REGEST),A
     437.  00:827C  78                  	LD		 A,B			;después byte alto  ********************** preguntar a Fernando cómo que byte bajo es B
     438.  00:827D  F6 40               	OR		1000000b		;+64
     439.  00:827F  D3 99               	OUT		(REGEST),A
     440.  00:8281                      
     441.  00:8281                      	
     442.  00:8281  2A AB 82            	LD		HL,(wordaux2)	;HL es lo que se pintará y le he pasado el puntero del array tilemap a pintar
     443.  00:8284                      .pa_pinta_fila:
     444.  00:8284  43                  	LD		 B,E
     445.  00:8285                      .pa_pinta_columnas: 		;finta la fila (pintando las columnas)
     446.  00:8285  7E                  	LD		 A,(HL)
     447.  00:8286  D3 98               	OUT		(REGESCVDP),A	;escribe A en VRAM en la posición indicada por los dos OUT anteriores
     448.  00:8288  23                  	INC		HL
     449.  00:8289  10 FA               	DJNZ	.pa_pinta_columnas
     450.  00:828B                      	
     451.  00:828B                      	;no es una solución elegante lo de repetir código pero queda claro
     452.  00:828B                      	;por si hay otra fila
     453.  00:828B  E5                  	PUSH	HL
     454.  00:828C  2A A9 82            	LD		HL,(wordaux1)
     455.  00:828F  01 20 00            	LD		BC,32
     456.  00:8292  09                  	ADD		HL,BC
     457.  00:8293  22 A9 82            	LD		(wordaux1),HL
     458.  00:8296  44                  	LD		B,H
     459.  00:8297  4D                  	LD		C,L
     460.  00:8298  E1                  	POP		HL
     461.  00:8299                      	
     462.  00:8299  79                  	LD		 A,C			;primero byte bajo	
     463.  00:829A  D3 99               	OUT		(REGEST),A
     464.  00:829C  78                  	LD		 A,B			;después byte alto 
     465.  00:829D  F6 40               	OR		1000000b		;+64
     466.  00:829F  D3 99               	OUT		(REGEST),A
     467.  00:82A1                      	
     468.  00:82A1                      	;si hay otra fila repite
     469.  00:82A1  15                  	DEC		 D
     470.  00:82A2  7A                  	LD		 A,D		;¿hay otra fila?
     471.  00:82A3  B7                  	OR		 A
     472.  00:82A4  C2 84 82            	JP		NZ,.pa_pinta_fila
     473.  00:82A7                      	
     474.  00:82A7  F1                  	POP		AF
     475.  00:82A8                      	
     476.  00:82A8                      fin_pinta_array:
     477.  00:82A8  C9                  	RET
     478.  00:82A9                      ;;variables asocidas a la función (no sé si dejarlo aquí y encapsularlo todo o hacerla reutilizable)
     479.  00:82A9                      ;; por de pronto la dejo aquí
     480.  00:82A9  00 00               wordaux1:		DW	0	;almacena la posición en el tilemap 0 al 675
     481.  00:82AB  00 00               wordaux2:		DW	0	;almacena puntero a array de tiles (posiciones en realidad) a pintar (posiciones repetidas en los 3 bancos)
     482.  00:82AD                      
     483.  00:82AD                      
     484.  00:82AD                      
     485.  00:82AD                      
     486.  00:82AD                      
     487.  00:82AD                      ;;=====================================================
     488.  00:82AD                      ;;PINTA_PUERTAS
     489.  00:82AD                      ;;=====================================================	
     490.  00:82AD                      ; función: 	examina A y mira si tiene que pintar puertas de los lados, arriba o abrajo o las escaleras (o no)
     491.  00:82AD                      ; entrada: 	habitacion_actual 1 escalera 1 puerta arriba 1 pu der 1 pu aba 1 pu izq (si es 0 pinta pared)
     492.  00:82AD                      ; salida: 	-
     493.  00:82AD                      ; toca:		todo
     494.  00:82AD                      pinta_puertas:
     495.  00:82AD  CD 2E 81            	CALL	pinta_parte_superior_pantalla	;pinta pasillo y paredes
     496.  00:82B0                      
     497.  00:82B0  CD BF 80            	CALL	localiza_info_habitacion	;busca qué puertas debe pintar y lo mete en habitación_actual
     498.  00:82B3                      	
     499.  00:82B3  3A 96 8F            	LD		 A, (habitacion_actual)		;se mete en A porque la función pide A y para no buscar el valor 4 veces
     500.  00:82B6                      
     501.  00:82B6                      ;	BIT		 4, A
     502.  00:82B6                      ;	CALL	nz, pinta_escalera
     503.  00:82B6                      
     504.  00:82B6  CB 5F               	BIT		 3, A
     505.  00:82B8  C4 E0 82            	CALL	nz, pinta_puerta_arr
     506.  00:82BB                      
     507.  00:82BB  CB 57               	BIT		 2, A
     508.  00:82BD  C4 F5 82            	CALL	nz, pinta_puerta_der
     509.  00:82C0                      
     510.  00:82C0  CB 4F               	BIT		 1, A
     511.  00:82C2  C4 CB 82            	CALL	nz, pinta_puerta_aba
     512.  00:82C5                      	
     513.  00:82C5  CB 47               	BIT		 0, A
     514.  00:82C7  C4 0A 83            	CALL	nz, pinta_puerta_izq
     515.  00:82CA                      
     516.  00:82CA                      	;; sustituir el último call por jp *************************************************
     517.  00:82CA                      fin_pinta_puertas:
     518.  00:82CA  C9                  	RET
     519.  00:82CB                      
     520.  00:82CB                      
     521.  00:82CB                      
     522.  00:82CB                      
     523.  00:82CB                      ;;=====================================================
     524.  00:82CB                      ;;PINTA_PUERTA_ABA
     525.  00:82CB                      ;;=====================================================	
     526.  00:82CB                      ; función: 	pinta la puerta de abajo
     527.  00:82CB                      ; entrada: 	array_puerta_abajo, wordaux2, wordaux1
     528.  00:82CB                      ; salida: 	-
     529.  00:82CB                      ; toca:		HL,BC, DE
     530.  00:82CB                      pinta_puerta_aba:
     531.  00:82CB  21 10 93            	LD		HL,array_puerta_abajo			;guardo puntero al array a pintar (como psar por referencia)
     532.  00:82CE  22 AB 82            	LD		(wordaux2),HL					;en la variable wordaux2
     533.  00:82D1  21 EE 19            	LD		HL,TILMAP + POSPUERABAJ			;calcula posición en tilemap
     534.  00:82D4  22 A9 82            	LD		(wordaux1),HL					;guarda valor pos tilemap en wordaux1
     535.  00:82D7  44                  	LD		B,H								;coloca posición tilemap BC
     536.  00:82D8  4D                  	LD		C,L
     537.  00:82D9  16 01               	LD		D,1								;nº de filas
     538.  00:82DB  1E 04               	LD		E,4								;nº de columnas
     539.  00:82DD  C3 76 82            	JP		pinta_array
     540.  00:82E0                      	;~ CALL	pinta_array
     541.  00:82E0                      fin_pinta_puerta_aba:
     542.  00:82E0                      	;~ RET
     543.  00:82E0                      
     544.  00:82E0                      ;;=====================================================
     545.  00:82E0                      ;;PINTA_PUERTA_ARR
     546.  00:82E0                      ;;=====================================================	
     547.  00:82E0                      ; función: 	pinta la puerta de arriba
     548.  00:82E0                      ; entrada: 	array_puerta_arriba, wordaux2, wordaux1
     549.  00:82E0                      ; salida: 	-
     550.  00:82E0                      ; toca:		HL,BC, DE
     551.  00:82E0                      pinta_puerta_arr:
     552.  00:82E0  21 E7 92            	LD		HL,array_puerta_arriba			;guardo puntero al array a pintar (como psar por referencia)
     553.  00:82E3  22 AB 82            	LD		(wordaux2),HL					;en la variable wordaux2
     554.  00:82E6  21 8E 18            	LD		HL,TILMAP + POSPUERARRI			;calcula posición en tilemap
     555.  00:82E9  22 A9 82            	LD		(wordaux1),HL					;guarda valor pos tilemap en wordaux1
     556.  00:82EC  44                  	LD		B,H								;coloca posición tilemap BC
     557.  00:82ED  4D                  	LD		C,L
     558.  00:82EE  16 05               	LD		D,5								;nº de filas
     559.  00:82F0  1E 04               	LD		E,4								;nº de columnas
     560.  00:82F2  C3 76 82            	JP		pinta_array
     561.  00:82F5                      	;~ CALL	pinta_array
     562.  00:82F5                      fin_pinta_puerta_arr:
     563.  00:82F5                      	;~ RET
     564.  00:82F5                      
     565.  00:82F5                      ;;=====================================================
     566.  00:82F5                      ;;PINTA_PUERTA_DER
     567.  00:82F5                      ;;=====================================================	
     568.  00:82F5                      ; función: 	pinta la puerta de la derecha
     569.  00:82F5                      ; entrada: 	array_puerta_derecha, wordaux2, wordaux1
     570.  00:82F5                      ; salida: 	-
     571.  00:82F5                      ; toca:		HL,BC, DE
     572.  00:82F5                      pinta_puerta_der:
     573.  00:82F5  21 FB 92            	LD		HL,array_puerta_derecha			;guardo puntero al array a pintar (como psar por referencia)
     574.  00:82F8  22 AB 82            	LD		(wordaux2),HL					;en la variable wordaux2
     575.  00:82FB  21 FC 18            	LD		HL,TILMAP + POSPUERDERE			;calcula posición en tilemap
     576.  00:82FE  22 A9 82            	LD		(wordaux1),HL					;guarda valor pos tilemap en wordaux1
     577.  00:8301  44                  	LD		B,H								;coloca posición tilemap BC
     578.  00:8302  4D                  	LD		C,L
     579.  00:8303  16 07               	LD		D,7								;nº de filas
     580.  00:8305  1E 03               	LD		E,3								;nº de columnas
     581.  00:8307  C3 76 82            	JP		pinta_array
     582.  00:830A                      	;~ CALL	pinta_array
     583.  00:830A                      fin_pinta_puerta_der:
     584.  00:830A                      	;~ RET
     585.  00:830A                      	
     586.  00:830A                      ;;=====================================================
     587.  00:830A                      ;;PINTA_PUERTA_IZQ
     588.  00:830A                      ;;=====================================================	
     589.  00:830A                      ; función: 	pinta la puerta de la izquierda
     590.  00:830A                      ; entrada: 	array_puerta_izquierda, wordaux2, wordaux1
     591.  00:830A                      ; salida: 	-
     592.  00:830A                      ; toca:		HL,BC, DE
     593.  00:830A                      pinta_puerta_izq:
     594.  00:830A  21 14 93            	LD		HL,array_puerta_izquierda		;guardo puntero al array a pintar (como psar por referencia)
     595.  00:830D  22 AB 82            	LD		(wordaux2),HL					;en la variable wordaux2
     596.  00:8310  21 E1 18            	LD		HL,TILMAP + POSPUERIZQU			;calcula posición en tilemap
     597.  00:8313  22 A9 82            	LD		(wordaux1),HL					;guarda valor pos tilemap en wordaux1
     598.  00:8316  44                  	LD		B,H								;coloca posición tilemap BC
     599.  00:8317  4D                  	LD		C,L
     600.  00:8318  16 07               	LD		D,7								;nº de filas
     601.  00:831A  1E 03               	LD		E,3								;nº de columnas
     602.  00:831C  C3 76 82            	JP		pinta_array
     603.  00:831F                      	;~ CALL	pinta_array
     604.  00:831F                      fin_pinta_puerta_izq:
     605.  00:831F                      	;~ RET
     606.  00:831F                      
     607.  00:831F                      
     608.  00:831F                      
     609.  00:831F                      
     610.  00:831F                      
     611.  00:831F                      ;;=====================================================
     612.  00:831F                      ;;POSICIONA_EN_MAPA
     613.  00:831F                      ;;=====================================================	
     614.  00:831F                      ; función: 	en el mapa de marcadores de la derecha/abajo marca un cuadro en gris o con un muñeco
     615.  00:831F                      ;			según el valor de prota.posición pinta entrá un muñeco y por donde vaya pasando el prota
     616.  00:831F                      ;			quedará en gris
     617.  00:831F                      ; entrada: 	elemento_pintar_mapa, prota_pos_mapy, prota_pos_mapx
     618.  00:831F                      ; salida: 	-
     619.  00:831F                      ; toca:		todos
     620.  00:831F                      posiciona_en_mapa:
     621.  00:831F                      	;#0238 es la posición en mapa de tiles de la esquina superior izquierda del mapa (569 en decimal)
     622.  00:831F  21 38 1A            	LD		HL, TILMAP + POSMAPA;pos inicial
     623.  00:8322                      	
     624.  00:8322                      	;ahora se le calcula la fila a pintar ya que va de abajo a arriba y no como en el mapa + columna
     625.  00:8322                      .sumar_fila:
     626.  00:8322  3A C5 92            	LD		 A,(prota_pos_mapy)
     627.  00:8325  FE 01               	CP		 1
     628.  00:8327  28 2A               	JR		 Z, .fila_1
     629.  00:8329  3A C5 92            	LD		 A,(prota_pos_mapy)
     630.  00:832C  FE 02               	CP		 2
     631.  00:832E  28 2A               	JR		 Z, .fila_2
     632.  00:8330  3A C5 92            	LD		 A,(prota_pos_mapy)
     633.  00:8333  FE 03               	CP		 3
     634.  00:8335  28 2A               	JR		 Z, .fila_3
     635.  00:8337  3A C5 92            	LD		 A,(prota_pos_mapy)
     636.  00:833A  FE 04               	CP		 4
     637.  00:833C  28 2A               	JR		 Z, .fila_4
     638.  00:833E  3A C5 92            	LD		 A,(prota_pos_mapy)
     639.  00:8341  FE 05               	CP		 5
     640.  00:8343  28 2A               	JR		 Z, .fila_5
     641.  00:8345  3A C5 92            	LD		 A,(prota_pos_mapy)
     642.  00:8348  FE 06               	CP		 6
     643.  00:834A  28 2A               	JR		 Z, .sumar_columna
     644.  00:834C                      	;no consulto la 0 porque si no es ninguna de las anteriores es 0 y por tanto sería un jr fila_0
     645.  00:834C                      	
     646.  00:834C                      .fila_0:
     647.  00:834C  11 C0 00            	LD		DE, 192
     648.  00:834F  19                  	ADD		HL, DE			;nota: se que repito el ADD pero la otra opción es inicializar DE y ya tarda mucho la funicón (es por velicidad)
     649.  00:8350  C3 76 83            	JP		.sumar_columna
     650.  00:8353                      .fila_1:
     651.  00:8353  11 A0 00            	LD		DE, 160
     652.  00:8356  19                  	ADD		HL, DE
     653.  00:8357  C3 76 83            	JP		.sumar_columna
     654.  00:835A                      .fila_2:
     655.  00:835A  11 80 00            	LD		DE, 128
     656.  00:835D  19                  	ADD		HL, DE
     657.  00:835E  C3 76 83            	JP		.sumar_columna
     658.  00:8361                      .fila_3:
     659.  00:8361  11 60 00            	LD		DE, 96
     660.  00:8364  19                  	ADD		HL, DE
     661.  00:8365  C3 76 83            	JP		.sumar_columna
     662.  00:8368                      .fila_4:
     663.  00:8368  11 40 00            	LD		DE, 64
     664.  00:836B  19                  	ADD		HL, DE
     665.  00:836C  C3 76 83            	JP		.sumar_columna
     666.  00:836F                      .fila_5:
     667.  00:836F  11 20 00            	LD		DE, 32
     668.  00:8372  19                  	ADD		HL, DE
     669.  00:8373  C3 76 83            	JP		.sumar_columna
     670.  00:8376                      .fila_6:
     671.  00:8376                      	;pongo fila_6 por poner ya que si es la fila 6 equiv. a primera fila del mapa y por tanto no suma fila
     672.  00:8376                      	
     673.  00:8376                      	
     674.  00:8376                      .sumar_columna:
     675.  00:8376  3A C4 92            	LD 		 A, (prota_pos_mapx) ;POS X
     676.  00:8379  16 00               	LD		 D, 0
     677.  00:837B  5F                  	LD		 E, A
     678.  00:837C  19                  	ADD		HL, DE
     679.  00:837D                      	
     680.  00:837D                      	;resultado en BC para usar en la función pinta_tile_suelto
     681.  00:837D  44                  	LD		 B, H
     682.  00:837E  4D                  	LD		 C, L
     683.  00:837F                      	
     684.  00:837F                      	;terminado de fijar la coordenada recuperamos a para ver el tipo
     685.  00:837F  3A E6 92            	LD		 A, (elemento_pintar_mapa)
     686.  00:8382  FE 09               	CP		 TILEGRISM
     687.  00:8384  CA 8C 83            	JP		 Z, pinta_pos_mapa_vacio
     688.  00:8387  16 13               	LD		 D, TILEPROTAM
     689.  00:8389  C3 8E 83            	JP		fin_pinta_pos_mapa
     690.  00:838C                      pinta_pos_mapa_vacio:
     691.  00:838C  16 09               	LD		 D, TILEGRISM	
     692.  00:838E                      
     693.  00:838E                      fin_pinta_pos_mapa:
     694.  00:838E  C3 AB 81            	JP		pinta_tile_suelto
     695.  00:8391                      fin_posiciona_en_mapa:
     696.  00:8391                      	;~ -CALL/RET
     697.  00:8391                      
     698.  00:8391                      
     699.  00:8391                      
     700.  00:8391                      ;;=====================================================
     701.  00:8391                      ;;EFECTO_IMAGEN_TIRA_RELIQUIA
     702.  00:8391                      ;;=====================================================	
     703.  00:8391                      ; función: 	hace que el fondo de la pantalla parpadee N veces
     704.  00:8391                      ; entrada: 	actualiza_reliquias_sn
     705.  00:8391                      ; salida: 	-
     706.  00:8391                      ; toca: 	todo
     707.  00:8391                      efecto_imagen_tira_reliquia:
     708.  00:8391  3E 14               	LD		 A, 20;RETARDOREL
     709.  00:8393  47                  	LD		 B, A
     710.  00:8394                      
     711.  00:8394                      .parpadea_fondo:
     712.  00:8394  C5                  	PUSH	BC
     713.  00:8395  21 AB 92            	LD		HL, color_bomba1
     714.  00:8398  CD F5 80            	CALL	color_pantalla
     715.  00:839B                      	
     716.  00:839B                      	;~ PUSH	BC
     717.  00:839B                      	;~ LD		 A, 255
     718.  00:839B                      	;~ LD		 B, A
     719.  00:839B                      ;~ .bucle_de_espera:
     720.  00:839B                      	;~ NOP
     721.  00:839B                      	;~ DJNZ	 .bucle_de_espera
     722.  00:839B                      	;~ POP		BC
     723.  00:839B  76                  	HALT
     724.  00:839C                      
     725.  00:839C                      	
     726.  00:839C  21 AE 92            	LD		HL, color_bomba2
     727.  00:839F  CD F5 80            	CALL	color_pantalla
     728.  00:83A2  C1                  	POP		BC
     729.  00:83A3  10 EF               	DJNZ	.parpadea_fondo
     730.  00:83A5                      	
     731.  00:83A5  21 A8 92            	LD		HL, color_base
     732.  00:83A8  C3 F5 80            	JP		color_pantalla
     733.  00:83AB                      fin_efecto_imagen_tira_reliquia:
     734.  00:83AB                      	;CALL/RET
     735.  00:83AB                      
     159   00:83AB                      	
     160   00:83AB                      	include "subr_sprites.asm"
       1.  00:83AB                      
       2.  00:83AB                      ;;=====================================================
       3.  00:83AB                      ;;SUBRUTINAS ENCARGADAS DE MANEJAR LOS SPRITES
       4.  00:83AB                      ;;=====================================================	
       5.  00:83AB                      
       6.  00:83AB                      
       7.  00:83AB                      ;; PREGUNTAR SI A FERNANDO SI ES MEJOR USAR LISTAS O ALGO PARA AHORRAR CÓDIGO
       8.  00:83AB                      
       9.  00:83AB                      
      10.  00:83AB                      ;;=====================================================
      11.  00:83AB                      ;;CARGA_PATRONES_SPRITES_NIVEL1
      12.  00:83AB                      ;;=====================================================	
      13.  00:83AB                      ; función: 	copia los patrones de los sprites que e van a usar en el nivel 1 en vram
      14.  00:83AB                      ; entrada: 	-
      15.  00:83AB                      ; salida: 	-
      16.  00:83AB                      ; toca: 	-
      17.  00:83AB                      carga_patrones_sprites_nivel1:
      18.  00:83AB  F5                  	PUSH	AF					;guardo copia de AF
      19.  00:83AC  D9                  	EXX							;guardo copia de BC,DE y HL
      20.  00:83AD                      	
      21.  00:83AD                      	;sprite punto de mira		(este no será necesario cargarlo en ningún otro nivel del juego, sólo el primero)
      22.  00:83AD  21 76 8D            	LD		HL,sprite_punto_mira_1
      23.  00:83B0  11 00 38            	LD		DE,#3800
      24.  00:83B3  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      25.  00:83B6  CD 5C 00            	CALL	LDIRVM
      26.  00:83B9  21 96 8D            	LD		HL,sprite_punto_mira_2
      27.  00:83BC  11 20 38            	LD		DE,#3820
      28.  00:83BF  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      29.  00:83C2  CD 5C 00            	CALL	LDIRVM
      30.  00:83C5                      	
      31.  00:83C5                      	;sprite sprite_punto_mira_1_mejorado
      32.  00:83C5  21 B6 8D            	LD		HL,sprite_punto_mira_1_mejorado
      33.  00:83C8  11 40 38            	LD		DE,#3840
      34.  00:83CB  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      35.  00:83CE  CD 5C 00            	CALL	LDIRVM
      36.  00:83D1  21 D6 8D            	LD		HL,sprite_punto_mira_2_mejorado
      37.  00:83D4  11 60 38            	LD		DE,#3860
      38.  00:83D7  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      39.  00:83DA  CD 5C 00            	CALL	LDIRVM
      40.  00:83DD                      
      41.  00:83DD                      	;sprite sprite_reliquia
      42.  00:83DD  21 F6 8D            	LD		HL,sprite_reliquia
      43.  00:83E0  11 80 38            	LD		DE,#3880
      44.  00:83E3  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      45.  00:83E6  CD 5C 00            	CALL	LDIRVM
      46.  00:83E9                      
      47.  00:83E9                      	;sprite sprite_vida_extra
      48.  00:83E9  21 F6 8D            	LD		HL,sprite_reliquia
      49.  00:83EC  11 A0 38            	LD		DE,#38A0
      50.  00:83EF  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      51.  00:83F2  CD 5C 00            	CALL	LDIRVM
      52.  00:83F5                      
      53.  00:83F5                      	;sprite sprite_planta
      54.  00:83F5  21 36 8E            	LD		HL,sprite_planta
      55.  00:83F8  11 C0 38            	LD		DE,#38C0
      56.  00:83FB  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      57.  00:83FE  CD 5C 00            	CALL	LDIRVM
      58.  00:8401                      	
      59.  00:8401                      	;sprite sprite_ballesta_mejorada
      60.  00:8401  21 56 8E            	LD		HL,sprite_ballesta_mejorada
      61.  00:8404  11 E0 38            	LD		DE,#38E0
      62.  00:8407  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      63.  00:840A  CD 5C 00            	CALL	LDIRVM
      64.  00:840D                      
      65.  00:840D                      	;sprite sprite_ciempies
      66.  00:840D  21 76 8E            	LD		HL,sprite_ciempies1
      67.  00:8410  11 00 39            	LD		DE,#3900
      68.  00:8413  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      69.  00:8416  CD 5C 00            	CALL	LDIRVM
      70.  00:8419  21 96 8E            	LD		HL,sprite_ciempies2
      71.  00:841C  11 20 39            	LD		DE,#3920
      72.  00:841F  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      73.  00:8422  CD 5C 00            	CALL	LDIRVM		
      74.  00:8425                      
      75.  00:8425                      	;sprite sprite_arana
      76.  00:8425  21 B6 8E            	LD		HL,sprite_arana1
      77.  00:8428  11 40 39            	LD		DE,#3940
      78.  00:842B  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      79.  00:842E  CD 5C 00            	CALL	LDIRVM
      80.  00:8431  21 D6 8E            	LD		HL,sprite_arana2
      81.  00:8434  11 60 39            	LD		DE,#3960
      82.  00:8437  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      83.  00:843A  CD 5C 00            	CALL	LDIRVM	
      84.  00:843D                      
      85.  00:843D                      	;sprite sprite_serpiente
      86.  00:843D  21 F6 8E            	LD		HL,sprite_serpiente1
      87.  00:8440  11 80 39            	LD		DE,#3980
      88.  00:8443  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      89.  00:8446  CD 5C 00            	CALL	LDIRVM
      90.  00:8449  21 16 8F            	LD		HL,sprite_serpiente2
      91.  00:844C  11 A0 39            	LD		DE,#39A0
      92.  00:844F  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      93.  00:8452  CD 5C 00            	CALL	LDIRVM	
      94.  00:8455                      
      95.  00:8455                      	;sprite sprite_murcielago
      96.  00:8455  21 36 8F            	LD		HL,sprite_murcielago1
      97.  00:8458  11 C0 39            	LD		DE,#39C0
      98.  00:845B  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
      99.  00:845E  CD 5C 00            	CALL	LDIRVM
     100.  00:8461  21 56 8F            	LD		HL,sprite_murcielago2
     101.  00:8464  11 E0 39            	LD		DE,#39E0
     102.  00:8467  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
     103.  00:846A  CD 5C 00            	CALL	LDIRVM
     104.  00:846D                      	
     105.  00:846D                      	;sprite sprite_explosion
     106.  00:846D  21 76 8F            	LD		HL,sprite_explosion
     107.  00:8470  11 20 3A            	LD		DE,#3A20
     108.  00:8473  01 20 00            	LD		BC,32				;32 bytes (sprites de 2 x 2)
     109.  00:8476  CD 5C 00            	CALL	LDIRVM
     110.  00:8479                      	
     111.  00:8479  D9                  	EXX							;recupero copia de BC,DE y HL
     112.  00:847A  F1                  	POP		AF					;recupero copia de AF
     113.  00:847B                      fin_carga_patrones_sprites:
     114.  00:847B  C9                  	RET
     115.  00:847C                      
     116.  00:847C                      
     117.  00:847C                      ;;=====================================================
     118.  00:847C                      ;;ACTUALIZA_ARRAY_SPRITES_VRAM
     119.  00:847C                      ;;=====================================================	
     120.  00:847C                      ; función: 	copia el array con los valores de los sprites (pos, color, plano) en VRAM
     121.  00:847C                      ; entrada: 	-
     122.  00:847C                      ; salida: 	-
     123.  00:847C                      ; toca: 	todos los registros. Como me interesa la velocidad, si necesito copiar de algo lo hago fuera
     124.  00:847C                      render_sprites:
     125.  00:847C                      	;volcando el array con toda la info de los sprites a la zona de atributos de sprites
     126.  00:847C  21 29 93            	LD		HL,array_sprites
     127.  00:847F  11 00 1B            	LD		DE,SPRART
     128.  00:8482  01 80 00            	LD		BC,4 * 32				;32 sprites x 4 bytes controlando el sprite (Y, X, plano, color)
     129.  00:8485  C3 5C 00            	JP		LDIRVM
     130.  00:8488                      	;~ CALL	LDIRVM
     131.  00:8488                      fin_actualiza_array_sprites_vram:
     132.  00:8488                      	;~ RET
     133.  00:8488                      
     134.  00:8488                      
     135.  00:8488                      ;;=====================================================
     136.  00:8488                      ;;VUELCA_RESULTADO_PUNTOMIRA_ARRAY
     137.  00:8488                      ;;=====================================================	
     138.  00:8488                      ; función: 	coloca los valores del punto de mira en la variable array_sprites para ser volcados en VRAM
     139.  00:8488                      ; entrada: 	array_sprites_pm, prota.XXXXX
     140.  00:8488                      ; salida: 	-
     141.  00:8488                      ; toca: 	-
     142.  00:8488                      vuelca_resultado_puntomira_array:
     143.  00:8488  DD 21 29 93         	LD		IX, array_sprites_pm
     144.  00:848C                      	;posición y de los dos sprites que conforman el punto de mira
     145.  00:848C  3A B2 92            	LD		 A, (prota.posy)
     146.  00:848F  DD 77 00            	LD		(IX  ), A
     147.  00:8492  DD 77 04            	LD		(IX+4), A
     148.  00:8495                      	;posición x de los dos sprites que conforman el punto de mira
     149.  00:8495  3A B1 92            	LD		 A, (prota.posx)
     150.  00:8498  DD 77 01            	LD		(IX+1), A
     151.  00:849B  DD 77 05            	LD		(IX+5), A
     152.  00:849E                      	;plano
     153.  00:849E  DD 36 02 00         	LD		(IX+2), 0
     154.  00:84A2  DD 36 06 04         	LD		(IX+6), 4	;al ser sprites de 16x16 hay que ir de 4 en 4
     155.  00:84A6                      	;color
     156.  00:84A6  3A B3 92            	LD		 A, (prota.escena)
     157.  00:84A9  B7                  	OR		 A
     158.  00:84AA  C2 B6 84            	JP		NZ,.codigo_color_2
     159.  00:84AD                      .codigo_color_1:
     160.  00:84AD  DD 36 03 0F         	LD		(IX+3), COLBLANCO
     161.  00:84B1  DD 36 07 08         	LD		(IX+7), COLROJO
     162.  00:84B5  C9                  	RET
     163.  00:84B6                      .codigo_color_2:
     164.  00:84B6  DD 36 03 08         	LD		(IX+3), COLROJO
     165.  00:84BA  DD 36 07 0F         	LD		(IX+7), COLBLANCO
     166.  00:84BE  C9                  	RET
     167.  00:84BF                      fin_vuelca_resultado_puntomira_array:
     168.  00:84BF                      
     169.  00:84BF                      
     170.  00:84BF                      ;;=====================================================
     171.  00:84BF                      ;;CHECK_PLAYER
     172.  00:84BF                      ;;=====================================================	
     173.  00:84BF                      ; función: 	MIRA EL CONTROL Y APLICA LA LOGICA DE MOVIMIENTO DEL PROTAGONISTA
     174.  00:84BF                      ; entrada: 	-
     175.  00:84BF                      ; salida: 	-
     176.  00:84BF                      ; toca: 	A
     177.  00:84BF                      check_player:
     178.  00:84BF  CD 46 85            	CALL	update_controllers_status
     179.  00:84C2  B7                  	OR		 A
     180.  00:84C3  C8                  	RET		 Z						;si no se ha pulsado nada no se necesita mirar nada
     181.  00:84C4                      
     182.  00:84C4  CB 1F               	RR		 A
     183.  00:84C6  DC DF 84            	CALL	 C, mueve_arriba
     184.  00:84C9  CB 1F               	RR		 A
     185.  00:84CB  DC FB 84            	CALL	 C, mueve_abajo
     186.  00:84CE  CB 1F               	RR		 A
     187.  00:84D0  DC 0A 85            	CALL	 C, mueve_izquierda
     188.  00:84D3  CB 1F               	RR		 A
     189.  00:84D5  DC EC 84            	CALL	 C, mueve_derecha
     190.  00:84D8                      	
     191.  00:84D8                      	;zona para mirar disparo Recibe A que tendrá 0000 0 0 X-letra M X-espacio 
     192.  00:84D8  CD 17 85            	CALL	mira_disparo
     193.  00:84DB                      	
     194.  00:84DB  C3 88 84            	JP		vuelca_resultado_puntomira_array
     195.  00:84DE                      f;in_check_player:
     196.  00:84DE  C9                  	RET
     197.  00:84DF                      
     161   00:84DF                      	
     162   00:84DF                      	include "subr_teclado_joy.asm"
       1.  00:84DF                      ;;=====================================================
       2.  00:84DF                      ;;SUBRUTINAS QUE CAPTURN EL JOYSTICK Y TECLADO Y MUEVEN PUNTO DE MIRA
       3.  00:84DF                      ;;=====================================================
       4.  00:84DF                      
       5.  00:84DF                      ;;=====================================================
       6.  00:84DF                      ;;MUEVE_ARRIBA
       7.  00:84DF                      ;;=====================================================	
       8.  00:84DF                      ; función: 	decrementa y si se no sale de los límites el valor del punto de mira a la derecha
       9.  00:84DF                      ; entrada: 	-
      10.  00:84DF                      ; salida: 	-
      11.  00:84DF                      ; toca: 	-
      12.  00:84DF                      mueve_arriba:
      13.  00:84DF  F5                  	PUSH		AF
      14.  00:84E0                      	
      15.  00:84E0  3A B2 92            	LD		 	 A, (prota.posy)
      16.  00:84E3  3D                  	DEC			 A
      17.  00:84E4  CA EA 84            	JP			 Z,.no_decrementa_y
      18.  00:84E7  32 B2 92            	LD			(prota.posy), A
      19.  00:84EA                      	
      20.  00:84EA                      .no_decrementa_y:
      21.  00:84EA  F1                  	POP			AF
      22.  00:84EB                      fin_mueve_arriba:
      23.  00:84EB  C9                  	RET
      24.  00:84EC                      
      25.  00:84EC                      
      26.  00:84EC                      ;;=====================================================
      27.  00:84EC                      ;;MUEVE_DERECHA
      28.  00:84EC                      ;;=====================================================	
      29.  00:84EC                      ; función: 	incrementa si se no sale de los límites el valor del punto de mira a la derecha
      30.  00:84EC                      ; entrada: 	-
      31.  00:84EC                      ; salida: 	-
      32.  00:84EC                      ; toca: 	-
      33.  00:84EC                      mueve_derecha:
      34.  00:84EC  F5                  	PUSH		AF
      35.  00:84ED                      	
      36.  00:84ED  3A B1 92            	LD		 	 A, (prota.posx)
      37.  00:84F0  3C                  	INC			 A
      38.  00:84F1  FE EF               	CP			 A, LIMPANTDER - 16
      39.  00:84F3  CA F9 84            	JP			 Z, .no_incrementa_x
      40.  00:84F6  32 B1 92            	LD			(prota.posx), A
      41.  00:84F9                      	
      42.  00:84F9                      .no_incrementa_x:
      43.  00:84F9  F1                  	POP			AF
      44.  00:84FA                      fin_mueve_derecha:
      45.  00:84FA  C9                  	RET
      46.  00:84FB                      
      47.  00:84FB                      
      48.  00:84FB                      ;;=====================================================
      49.  00:84FB                      ;;MUEVE_ABAJO
      50.  00:84FB                      ;;=====================================================	
      51.  00:84FB                      ; función: 	incrementa y si se no sale de los límites el valor del punto de mira abajo
      52.  00:84FB                      ; entrada: 	-
      53.  00:84FB                      ; salida: 	-
      54.  00:84FB                      ; toca: 	-
      55.  00:84FB                      mueve_abajo:
      56.  00:84FB  F5                  	PUSH		AF
      57.  00:84FC                      	
      58.  00:84FC  3A B2 92            	LD		 	 A, (prota.posy)
      59.  00:84FF  3C                  	INC			 A
      60.  00:8500  FE 70               	CP			 A, LIMPANTABA - 16
      61.  00:8502  CA 08 85            	JP			 Z,.no_incrementa_y
      62.  00:8505  32 B2 92            	LD			(prota.posy), A
      63.  00:8508                      	
      64.  00:8508                      .no_incrementa_y:
      65.  00:8508  F1                  	POP			AF
      66.  00:8509                      fin_mueve_abajo:
      67.  00:8509  C9                  	RET
      68.  00:850A                      	
      69.  00:850A                      	
      70.  00:850A                      ;;=====================================================
      71.  00:850A                      ;;MUEVE_IZQUIERDA
      72.  00:850A                      ;;=====================================================	
      73.  00:850A                      ; función: 	decrementa x si se no sale de los límites el valor del punto de mira a la izquierda
      74.  00:850A                      ; entrada: 	-
      75.  00:850A                      ; salida: 	-
      76.  00:850A                      ; toca: 	-
      77.  00:850A                      mueve_izquierda:
      78.  00:850A  F5                  	PUSH		AF
      79.  00:850B                      	
      80.  00:850B  3A B1 92            	LD		 	 A, (prota.posx)
      81.  00:850E  3D                  	DEC			 A
      82.  00:850F                      ;	CP			 A, LIMPANTIZQ
      83.  00:850F  CA 15 85            	JP			 Z,.no_decrementa_x
      84.  00:8512  32 B1 92            	LD			(prota.posx), A
      85.  00:8515                      	
      86.  00:8515                      .no_decrementa_x:
      87.  00:8515  F1                  	POP			AF
      88.  00:8516                      fin_mueve_izquierda:
      89.  00:8516  C9                  	RET
      90.  00:8517                      
      91.  00:8517                      
      92.  00:8517                      
      93.  00:8517                      ;;=====================================================
      94.  00:8517                      ;;MIRA_DISPARO
      95.  00:8517                      ;;=====================================================	
      96.  00:8517                      ; función: 	Mira si se ha pulsado alguno de los dos disparos
      97.  00:8517                      ; entrada: 	A que tendrá 0000 0 0 X-letra M X-espacio 
      98.  00:8517                      ; salida: 	-
      99.  00:8517                      ; toca: 	A, B
     100.  00:8517                      mira_disparo:
     101.  00:8517                      .mira_boton_pulsado1:
     102.  00:8517  CB 1F               	RR		 A						;preparo en el carry si se ha pulsado botón 1
     103.  00:8519  D2 2B 85            	JP		 NC, .mira_boton_pulsado2					
     104.  00:851C  F5                  	PUSH	AF						;copia A para usarlo después
     105.  00:851D                      	;se ha pulsado barra o boton 1
     106.  00:851D  3A B3 92            	LD		 A, (prota.escena)
     107.  00:8520  2F                  	CPL		 
     108.  00:8521  32 B3 92            	LD		(prota.escena), A
     109.  00:8524                      	
     110.  00:8524  AF                  	XOR		 A
     111.  00:8525  0E 01               	LD		 C, 1
     112.  00:8527  CD AB 8C            	CALL	ayFX_INIT	
     113.  00:852A                      	
     114.  00:852A  F1                  	POP		AF
     115.  00:852B                      .mira_boton_pulsado2:
     116.  00:852B  CB 1F               	RR		 A
     117.  00:852D  D0                  	RET		 NC
     118.  00:852E                      	;se ha pulsado shift o boton 2
     119.  00:852E                      	
     120.  00:852E  3A C3 92            	LD		 A, (prota_reliquias)	;miro si le quedan reliquias
     121.  00:8531  B7                  	OR		 A
     122.  00:8532  C8                  	RET		 Z						;si no le quedan salgo ya
     123.  00:8533                      	
     124.  00:8533                      	;actuaciones si se usa la reliquia botón 2 o M y quedn reliquias.. (antes ya se puso el valor en A)
     125.  00:8533  3A C3 92            	LD		A, (prota_reliquias)
     126.  00:8536  3D                  	DEC		 A
     127.  00:8537  32 C3 92            	LD		(prota_reliquias), A
     128.  00:853A                      	
     129.  00:853A  AF                  	XOR		 A
     130.  00:853B  0E 02               	LD		 C, 2
     131.  00:853D  CD AB 8C            	CALL	ayFX_INIT
     132.  00:8540                      	
     133.  00:8540  CD 91 83            	CALL 	efecto_imagen_tira_reliquia
     134.  00:8543                      	
     135.  00:8543  C3 8F 81            	JP		pinta_reliquias
     136.  00:8546                      fin_mira_disparo:
     137.  00:8546                      ;	RET		
     138.  00:8546                      
     139.  00:8546                      
     140.  00:8546                      ;;============================================================
     141.  00:8546                      ;;Código de D. Fernando García (BitVision) (al que siempre le estaré agradecido)
     142.  00:8546                      ;check_8th_keyboard_row
     143.  00:8546                      ;read_joy_0
     144.  00:8546                      ;check_8th_keyboard_row
     145.  00:8546                      ;check_4th_keyboard_row
     146.  00:8546                      ;;============================================================
     147.  00:8546                      ;;  usa constantes:
     148.  00:8546                      ;PSG_A  equ  0a0h  ;reg address
     149.  00:8546                      ;PSG_W  equ  0a1h  ;reg data WR
     150.  00:8546                      ;PSG_R  equ  0a2h  ;reg data
     151.  00:8546                      
     152.  00:8546                      ;;=====================================================
     153.  00:8546                      ;;update_controllers_status
     154.  00:8546                      ;;=====================================================	
     155.  00:8546                      ;depends on the next rountine
     156.  00:8546                      ;  returns
     157.  00:8546                      ;  a - 0P2TRLDU
     158.  00:8546                      
     159.  00:8546                      update_controllers_status:
     160.  00:8546  CD 91 85                 call  check_8th_keyboard_row
     161.  00:8549                      [4]  rrc    a
     161.  00:8549  CB 0F CB 0F CB 0F CB 0F 
     162.  00:8551  47                       ld    b,a    		;save for later  xxxTRDUL
     163.  00:8552                      
     164.  00:8552  E6 01                    and    #01    		;save L
     165.  00:8554  CB 27                    sla    a
     166.  00:8556  CB 27                    sla    a    		;now 00000L00
     167.  00:8558  4F                       ld    c,a    		;save for later
     168.  00:8559                      
     169.  00:8559  78                       ld    a,b    		;again we've got xxxTRDUL. I am interested on leaving 000000DU on a
     170.  00:855A  CB 3F                    srl    a
     171.  00:855C  E6 03                    and    00000011b
     172.  00:855E                      						;we've got 000000DU on a
     173.  00:855E  B1                       or    c    		;now we've got 00000LDU
     174.  00:855F  4F                       ld    c,a    		;save for later
     175.  00:8560                      
     176.  00:8560  78                       ld    a,b
     177.  00:8561  E6 18                    and    00011000b 	;we've got 000TR000
     178.  00:8563  B1                       or    c
     179.  00:8564                           ;finally    000TRLDU
     180.  00:8564                      
     181.  00:8564                           ;and    00000100   ;preserve just
     182.  00:8564  47                       ld    b,a    		;save for later
     183.  00:8565  CD 9F 85                 call  check_4th_keyboard_row      ;check M & P
     184.  00:8568  F5                       push  af
     185.  00:8569  E6 04                    and    00000100b	;filter just M
     186.  00:856B  87                       add    a
     187.  00:856C  87                       add    a
     188.  00:856D  87                       add    a           ;shift 3th to 6th bit
     189.  00:856E  B0                       or    b           	;merge with previous
     190.  00:856F  47                       ld    b,a
     191.  00:8570                      
     192.  00:8570  CD 7D 85                 call  read_joy_0
     193.  00:8573  E6 3F                    and    00111111b  	;we want just 002TRLDU  from joystick    (2 is second trigger)
     194.  00:8575  B0                       or    b      		;added 000TRLDU from keyboard
     195.  00:8576  47                       ld    b,a      	;save for later
     196.  00:8577  F1                       pop    af      	; let's check on P
     197.  00:8578                      
     198.  00:8578  E6 20                    and    00100000b
     199.  00:857A  87                       add    a      		;P status on 6th bit  ... so 0P2TRLDU
     200.  00:857B  B0                       or    b
     201.  00:857C                      
     202.  00:857C  C9                       ret
     203.  00:857D                      
     204.  00:857D                      
     205.  00:857D                      ;ret
     206.  00:857D                      ;  a -            xx2TRLDU
     207.  00:857D                      read_joy_0:
     208.  00:857D  F3                         di
     209.  00:857E  3E 0F                      ld    a,15
     210.  00:8580  D3 A0                      out    [PSG_A],a
     211.  00:8582  DB A2                      in    a,[PSG_R]
     212.  00:8584  E6 BF                      and    10111111b        ;joy0
     213.  00:8586                      
     214.  00:8586  D3 A1                      out    [PSG_W],a        ;set joy0
     215.  00:8588                      
     216.  00:8588  3E 0E                      ld    a,14
     217.  00:858A  D3 A0                      out    [PSG_A],a
     218.  00:858C  DB A2                      in    a,[PSG_R]
     219.  00:858E                      
     220.  00:858E  FB                         ei
     221.  00:858F  2F                         cpl
     222.  00:8590                      
     223.  00:8590  C9                         ret
     224.  00:8591                      
     225.  00:8591                      
     226.  00:8591                      ;ret
     227.  00:8591                      ;  a -      RDULxxxT
     228.  00:8591                      check_8th_keyboard_row:
     229.  00:8591  F3                       di
     230.  00:8592  DB AA                    in    a,(#aa)
     231.  00:8594  E6 F0                    and    #f0
     232.  00:8596  F6 08                    or    8
     233.  00:8598  D3 AA                    out    (#aa),a
     234.  00:859A  DB A9                    in    a,(#a9)
     235.  00:859C  FB                       ei
     236.  00:859D  2F                       cpl
     237.  00:859E                      
     238.  00:859E  C9                       ret
     239.  00:859F                      
     240.  00:859F                      
     241.  00:859F                      ;ret
     242.  00:859F                      ;  a -      xxxxxMxx
     243.  00:859F                      check_4th_keyboard_row:
     244.  00:859F  F3                       di
     245.  00:85A0  DB AA                    in    a,(#aa)
     246.  00:85A2  E6 F0                    and    #f0
     247.  00:85A4  F6 04                    or    4
     248.  00:85A6  D3 AA                    out    (#aa),a
     249.  00:85A8  DB A9                    in    a,(#a9)
     250.  00:85AA  FB                       ei
     251.  00:85AB  2F                       cpl
     252.  00:85AC                      
     253.  00:85AC  C9                       ret
     254.  00:85AD                      
     255.  00:85AD                      ;--------------------------------------------
     256.  00:85AD                      
     257.  00:85AD                      
     258.  00:85AD                      
     259.  00:85AD                      
     260.  00:85AD                      
     261.  00:85AD                      
     262.  00:85AD                      
     263.  00:85AD                      
     163   00:85AD                      	
     164   00:85AD                      
     165   00:85AD                      ;;=====================================================
     166   00:85AD                      ;;DEFINICIÓN DE SUBRUTINAS DE FERNANDO PARA COMPRESIÓN Y SONIDO
     167   00:85AD                      ;;=====================================================
     168   00:85AD                      ;Este include lleva la rutina de descompresión de ROM/RAM a VRAM de pletter
     169   00:85AD                      ;Está adaptada de la original a sjasm
     170   00:85AD                      ;	HL = RAM/ROM source	; DE = VRAM destination
     171   00:85AD                      depack_VRAM:
     172   00:85AD                      	include "PL_VRAM_Depack_SJASM.asm"
       1.  00:85AD                      ;-----------------------------------------------------------
       2.  00:85AD                      ; Pletter v0.5b VRAM Depacker v1.1 - 16Kb version
       3.  00:85AD                      ; HL = RAM/ROM source ; DE = VRAM destination
       4.  00:85AD                      ;-----------------------------------------------------------
       5.  00:85AD  F3                  	di
       6.  00:85AE                      
       7.  00:85AE                      ; VRAM address setup
       8.  00:85AE  7B                  	ld	a,e
       9.  00:85AF  D3 99               	out	[099h],a
      10.  00:85B1  7A                  	ld	a,d
      11.  00:85B2  F6 40               	or	040h
      12.  00:85B4  D3 99               	out	[099h],a
      13.  00:85B6                      
      14.  00:85B6                      ; Initialization
      15.  00:85B6  7E                  	ld	a,[hl]
      16.  00:85B7  23                  	inc	hl
      17.  00:85B8  D9                  	exx
      18.  00:85B9  11 00 00            	ld	de,0
      19.  00:85BC  87                  	add	a,a
      20.  00:85BD  3C                  	inc	a
      21.  00:85BE  CB 13               	rl	e
      22.  00:85C0  87                  	add	a,a
      23.  00:85C1  CB 13               	rl	e
      24.  00:85C3  87                  	add	a,a
      25.  00:85C4  CB 13               	rl	e
      26.  00:85C6  CB 13               	rl	e
      27.  00:85C8  21 7F 86            	ld	hl,modes
      28.  00:85CB  19                  	add	hl,de
      29.  00:85CC  5E                  	ld	e,[hl]
      30.  00:85CD  DD 6B               	ld	ixl,e
      31.  00:85CF  23                  	inc	hl
      32.  00:85D0  5E                  	ld	e,[hl]
      33.  00:85D1  DD 63               	ld	ixh,e
      34.  00:85D3  1E 01               	ld	e,1
      35.  00:85D5  D9                  	exx
      36.  00:85D6  FD 21 DF 85         	ld	iy,loop
      37.  00:85DA                      
      38.  00:85DA                      ; Main depack loop
      39.  00:85DA  0E 98               literal:ld	c,098h
      40.  00:85DC  ED A3               	outi
      41.  00:85DE  13                  	inc	de
      42.  00:85DF  87                  loop:	add	a,a
      43.  00:85E0  CC 73 86              	call	z,getbit
      44.  00:85E3  30 F5               	jr	nc,literal
      45.  00:85E5                      
      46.  00:85E5                      ; Compressed data
      47.  00:85E5  D9                  	exx
      48.  00:85E6  62                  	ld	h,d
      49.  00:85E7  6B                  	ld	l,e
      50.  00:85E8  87                  getlen: add	a,a
      51.  00:85E9  CC 77 86            	call	z,getbitexx
      52.  00:85EC  30 1D               	jr	nc,lenok
      53.  00:85EE  87                  lus:	add	a,a
      54.  00:85EF  CC 77 86            	call	z,getbitexx
      55.  00:85F2  ED 6A               	adc	hl,hl
      56.  00:85F4  D8                  	ret	c
      57.  00:85F5  87                  	add	a,a
      58.  00:85F6  CC 77 86            	call	z,getbitexx
      59.  00:85F9  30 10               	jr	nc,lenok
      60.  00:85FB  87                  	add	a,a
      61.  00:85FC  CC 77 86            	call	z,getbitexx
      62.  00:85FF  ED 6A               	adc	hl,hl
      63.  00:8601  DA 7D 86            	jp	c,Depack_out
      64.  00:8604  87                  	add	a,a
      65.  00:8605  CC 77 86            	call	z,getbitexx
      66.  00:8608  DA EE 85            	jp	c,lus
      67.  00:860B  23                  lenok:  inc	hl
      68.  00:860C  D9                  	exx
      69.  00:860D  4E                  	ld	c,[hl]
      70.  00:860E  23                  	inc	hl
      71.  00:860F  06 00               	ld	b,0
      72.  00:8611  CB 79               	bit	7,c
      73.  00:8613  CA 46 86            	jp	z,offsok
      74.  00:8616  DD E9               	jp	ix
      75.  00:8618                      
      76.  00:8618  87                  mode7:  add	a,a
      77.  00:8619  CC 73 86              	call	z,getbit
      78.  00:861C  CB 10               	rl	b
      79.  00:861E  87                  mode6:	add	a,a
      80.  00:861F  CC 73 86              	call	z,getbit
      81.  00:8622  CB 10               	rl	b
      82.  00:8624  87                  mode5:  add	a,a
      83.  00:8625  CC 73 86              	call	z,getbit
      84.  00:8628  CB 10               	rl	b
      85.  00:862A  87                  mode4:  add	a,a
      86.  00:862B  CC 73 86              	call	z,getbit
      87.  00:862E  CB 10               	rl	b
      88.  00:8630  87                  mode3:  add	a,a
      89.  00:8631  CC 73 86              	call	z,getbit
      90.  00:8634  CB 10               	rl	b
      91.  00:8636  87                  mode2:	add	a,a
      92.  00:8637  CC 73 86              	call	z,getbit
      93.  00:863A  CB 10               	rl	b
      94.  00:863C  87                  	add	a,a
      95.  00:863D  CC 73 86              	call	z,getbit
      96.  00:8640  30 04               	jr	nc,offsok
      97.  00:8642  B7                  	or	a
      98.  00:8643  04                  	inc	b
      99.  00:8644  CB B9               	res	7,c
     100.  00:8646  03                  offsok: inc	bc
     101.  00:8647  E5                  	push	hl
     102.  00:8648  D9                  	exx
     103.  00:8649  E5                  	push	hl
     104.  00:864A  D9                  	exx
     105.  00:864B  6B                  	ld	l,e
     106.  00:864C  62                  	ld	h,d
     107.  00:864D  ED 42               	sbc	hl,bc
     108.  00:864F  C1                  	pop	bc
     109.  00:8650  F5                  	push	af
     110.  00:8651  7D                  .loop:	ld	a,l
     111.  00:8652  D3 99               	out	[099h],a
     112.  00:8654  7C                  	ld	a,h
     113.  00:8655  00                  	nop                     ; VDP timing
     114.  00:8656  D3 99               	out	[099h],a
     115.  00:8658  00                  	nop                     ; VDP timing
     116.  00:8659  DB 98               	in	a,[098h]
     117.  00:865B  08                  	ex	af,af'
     118.  00:865C  7B                  	ld	a,e
     119.  00:865D  00                  	nop			; VDP timing
     120.  00:865E  D3 99               	out	[099h],a
     121.  00:8660  7A                  	ld	a,d
     122.  00:8661  F6 40               	or	040h
     123.  00:8663  D3 99               	out	[099h],a
     124.  00:8665  08                  	ex	af,af'
     125.  00:8666  00                  	nop			; VDP timing
     126.  00:8667  D3 98               	out	[098h],a
     127.  00:8669  13                  	inc	de
     128.  00:866A  ED A1               	cpi
     129.  00:866C  EA 51 86            	jp	pe,.loop
     130.  00:866F  F1                  	pop	af
     131.  00:8670  E1                  	pop	hl
     132.  00:8671  FD E9               	jp	iy
     133.  00:8673                      
     134.  00:8673  7E                  getbit: ld	a,[hl]
     135.  00:8674  23                  	inc	hl
     136.  00:8675  17                  	rla
     137.  00:8676  C9                  	ret
     138.  00:8677                      
     139.  00:8677                      getbitexx:
     140.  00:8677  D9                  	exx
     141.  00:8678  7E                  	ld	a,[hl]
     142.  00:8679  23                  	inc	hl
     143.  00:867A  D9                  	exx
     144.  00:867B  17                  	rla
     145.  00:867C  C9                  	ret
     146.  00:867D                      
     147.  00:867D                      ; Depacker exit
     148.  00:867D                      Depack_out:
     149.  00:867D  FB                  	ei
     150.  00:867E  C9                  	ret
     151.  00:867F                      
     152.  00:867F                      modes:
     153.  00:867F  46 86               	dw	offsok
     154.  00:8681  36 86               	dw	mode2
     155.  00:8683  30 86               	dw	mode3
     156.  00:8685  2A 86               	dw	mode4
     157.  00:8687  24 86               	dw	mode5
     158.  00:8689  1E 86               	dw	mode6
     159.  00:868B  18 86               	dw	mode7
     173   00:868D                      
     174   00:868D                      subrutinas_sonido:
     175   00:868D                      	include	"PT3-ROM_sjasm.asm"
       1.  00:868D                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2.  00:868D                      		; --- Can be assembled with asMSX ---
       3.  00:868D                      		; --- ROM version: MSX-KUN        ---
       4.  00:868D                      		; --- asMSX version 2: SapphiRe   ---
       5.  00:868D                      
       6.  00:868D                      ; Based on MSX full version of PT3 by Dioniso
       7.  00:868D                      ;
       8.  00:868D                      ; This version of the replayer can be used with any note table
       9.  00:868D                      ; This version also allows the use of PT3 commands
      10.  00:868D                      ; First 99 bytes of each PT3 module should be stripped off
      11.  00:868D                      ;
      12.  00:868D                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      13.  00:868D                      ;
      14.  00:868D                      ; ROM LENGTH: 1549 bytes
      15.  00:868D                      ; RAM LENGTH:  576 bytes
      16.  00:868D                      
      17.  00:868D                      
      18.  00:868D                      
      19.  00:868D                      ;SJASM version by BTV 2016
      20.  00:868D                      
      21.  00:868D                      
      22.  00:868D                      		; --- CONSTANT VALUES DEFINITION ---
      23.  00:868D                      
      24.  00:868D                      ;ChannelsVars
      25.  00:868D                      ;struc	CHNPRM
      26.  00:868D                      ;reset group
      27.  00:868D  (00:0000)           CHNPRM_PsInOr	equ 0	;RESB 1
      28.  00:868D  (00:0001)           CHNPRM_PsInSm	equ 1	;RESB 1
      29.  00:868D  (00:0002)           CHNPRM_CrAmSl	equ 2	;RESB 1
      30.  00:868D  (00:0003)           CHNPRM_CrNsSl	equ 3	;RESB 1
      31.  00:868D  (00:0004)           CHNPRM_CrEnSl	equ 4	;RESB 1
      32.  00:868D  (00:0005)           CHNPRM_TSlCnt	equ 5	;RESB 1
      33.  00:868D  (00:0006)           CHNPRM_CrTnSl	equ 6	;RESW 1
      34.  00:868D  (00:0008)           CHNPRM_TnAcc	equ 8	;RESW 1
      35.  00:868D  (00:000A)           CHNPRM_COnOff	equ 10	;RESB 1
      36.  00:868D                      ;reset group
      37.  00:868D                      
      38.  00:868D  (00:000B)           CHNPRM_OnOffD	equ 11	;RESB 1
      39.  00:868D                      
      40.  00:868D                      ;IX for PTDECOD here [+12]
      41.  00:868D  (00:000C)           CHNPRM_OffOnD	equ 12	;RESB 1
      42.  00:868D  (00:000D)           CHNPRM_OrnPtr	equ 13	;RESW 1
      43.  00:868D  (00:000F)           CHNPRM_SamPtr	equ 15	;RESW 1
      44.  00:868D  (00:0011)           CHNPRM_NNtSkp	equ 17	;RESB 1
      45.  00:868D  (00:0012)           CHNPRM_Note	equ 18	;RESB 1
      46.  00:868D  (00:0013)           CHNPRM_SlToNt	equ 19	;RESB 1
      47.  00:868D  (00:0014)           CHNPRM_Env_En	equ 20	;RESB 1
      48.  00:868D  (00:0015)           CHNPRM_Flags	equ 21	;RESB 1
      49.  00:868D                       ;Enabled - 0,SimpleGliss - 2
      50.  00:868D  (00:0016)           CHNPRM_TnSlDl	equ 22	;RESB 1
      51.  00:868D  (00:0017)           CHNPRM_TSlStp	equ 23	;RESW 1
      52.  00:868D  (00:0019)           CHNPRM_TnDelt	equ 25	;RESW 1
      53.  00:868D  (00:001B)           CHNPRM_NtSkCn	equ 27	;RESB 1
      54.  00:868D  (00:001C)           CHNPRM_Volume	equ 28	;RESB 1
      55.  00:868D  (00:001D)           CHNPRM_Size	equ 29	;RESB 1
      56.  00:868D                      ;endstruc
      57.  00:868D                      
      58.  00:868D                      ;struc	AR
      59.  00:868D  (00:0000)           AR_TonA		equ 0	;RESW 1
      60.  00:868D  (00:0002)           AR_TonB		equ 2	;RESW 1
      61.  00:868D  (00:0004)           AR_TonC		equ 4	;RESW 1
      62.  00:868D  (00:0006)           AR_Noise	equ 6	;RESB 1
      63.  00:868D  (00:0007)           AR_Mixer	equ 7	;RESB 1
      64.  00:868D  (00:0008)           AR_AmplA	equ 8	;RESB 1
      65.  00:868D  (00:0009)           AR_AmplB	equ 9	;RESB 1
      66.  00:868D  (00:000A)           AR_AmplC	equ 10	;RESB 1
      67.  00:868D  (00:000B)           AR_Env		equ 11	;RESW 1
      68.  00:868D  (00:000D)           AR_EnvTp	equ 13	;RESB 1
      69.  00:868D                      ;endstruc
      70.  00:868D                      
      71.  00:868D                      		; --- CODE STARTS HERE ---
      72.  00:868D                      
      73.  00:868D  21 00 F0            CHECKLP:	LD	HL,PT3_SETUP
      74.  00:8690  CB FE               		SET	7,[HL]
      75.  00:8692  CB 46               		BIT	0,[HL]
      76.  00:8694  C8                  		RET	Z
      77.  00:8695  E1                  		POP	HL
      78.  00:8696  21 7A F0            		LD	HL,DelyCnt
      79.  00:8699  34                  		INC	[HL]
      80.  00:869A  21 3E F0            		LD	HL,ChanA+CHNPRM_NtSkCn
      81.  00:869D  34                  		INC	[HL]
      82.  00:869E  AF                  PT3_MUTE:	XOR	A
      83.  00:869F  67                  		LD	H,A
      84.  00:86A0  6F                  		LD	L,A
      85.  00:86A1  32 48 F1            		LD	[AYREGS+AR_AmplA],A
      86.  00:86A4  22 49 F1            		LD	[AYREGS+AR_AmplB],HL
      87.  00:86A7  C3 F0 8B            		JP	ROUT_A0
      88.  00:86AA                      
      89.  00:86AA                      PT3_INIT:	;HL - AddressOfModule - 100
      90.  00:86AA  22 01 F0            		LD [PT3_MODADDR],HL
      91.  00:86AD  E5                  		PUSH HL
      92.  00:86AE  11 64 00            		LD DE,100
      93.  00:86B1  19                  		ADD HL,DE
      94.  00:86B2  7E                  		LD A,[HL]
      95.  00:86B3  32 1C F0            		LD [PT3_Delay],A
      96.  00:86B6  E5                  		PUSH HL
      97.  00:86B7  DD E1               		POP IX
      98.  00:86B9  19                  		ADD HL,DE
      99.  00:86BA  22 03 F0            		LD [PT3_CrPsPtr],HL
     100.  00:86BD  DD 5E 02            		LD E,[IX+102-100]
     101.  00:86C0  19                  		ADD HL,DE
     102.  00:86C1  23                  		INC HL
     103.  00:86C2  22 18 F0            		LD [PT3_LPosPtr],HL
     104.  00:86C5  D1                  		POP DE
     105.  00:86C6  DD 6E 03            		LD L,[IX+103-100]
     106.  00:86C9  DD 66 04            		LD H,[IX+104-100]
     107.  00:86CC  19                  		ADD HL,DE
     108.  00:86CD  22 1A F0            		LD [PT3_PatsPtr],HL
     109.  00:86D0  21 A9 00            		LD HL,169
     110.  00:86D3  19                  		ADD HL,DE
     111.  00:86D4  22 07 F0            		LD [PT3_OrnPtrs],HL
     112.  00:86D7  21 69 00            		LD HL,105
     113.  00:86DA  19                  		ADD HL,DE
     114.  00:86DB  22 05 F0            		LD [PT3_SAMPTRS],HL
     115.  00:86DE  21 00 F0            		LD HL,PT3_SETUP
     116.  00:86E1  CB BE               		RES 7,[HL]
     117.  00:86E3                      
     118.  00:86E3                      		; --- note table data depacker ---
     119.  00:86E3                      		; Depacks first 12 tones of each tone table
     120.  00:86E3                      
     121.  00:86E3  11 64 8C            		LD DE,T_PACK
     122.  00:86E6  01 B1 F1            		LD BC,T1_+(2*49)-1
     123.  00:86E9  1A                  .TP_0:		LD A,[DE]
     124.  00:86EA  13                  		INC DE
     125.  00:86EB  FE 1E               		CP 15*2
     126.  00:86ED  30 06               		JR NC,.TP_1
     127.  00:86EF  67                  		LD H,A
     128.  00:86F0  1A                  		LD A,[DE]
     129.  00:86F1  6F                  		LD L,A
     130.  00:86F2  13                  		INC DE
     131.  00:86F3  18 07               		JR .TP_2
     132.  00:86F5  D5                  .TP_1:		PUSH DE
     133.  00:86F6  16 00               		LD D,0
     134.  00:86F8  5F                  		LD E,A
     135.  00:86F9  19                  		ADD HL,DE
     136.  00:86FA  19                  		ADD HL,DE
     137.  00:86FB  D1                  		POP DE
     138.  00:86FC  7C                  .TP_2:		LD A,H
     139.  00:86FD  02                  		LD [BC],A
     140.  00:86FE  0B                  		DEC BC
     141.  00:86FF  7D                  		LD A,L
     142.  00:8700  02                  		LD [BC],A
     143.  00:8701  0B                  		DEC BC
     144.  00:8702  D6 F0               		SUB $F0
     145.  00:8704  20 E3               		JR NZ,.TP_0
     146.  00:8706                      
     147.  00:8706                      		; --- INITIALIZE PT3 VARIABLES ---
     148.  00:8706  21 23 F0            		LD HL,VARS
     149.  00:8709  77                  		LD [HL],A
     150.  00:870A  11 24 F0            		LD DE,VARS+1
     151.  00:870D  01 2C 01            		LD BC,VAR0END-VARS-1
     152.  00:8710  ED B0               		LDIR
     153.  00:8712                      
     154.  00:8712  3C                  		INC A
     155.  00:8713  32 7A F0            		LD [DelyCnt],A
     156.  00:8716  21 01 F0            		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     157.  00:8719  22 3E F0            		LD [ChanA+CHNPRM_NtSkCn],HL
     158.  00:871C  22 5B F0            		LD [ChanB+CHNPRM_NtSkCn],HL
     159.  00:871F  22 78 F0            		LD [ChanC+CHNPRM_NtSkCn],HL
     160.  00:8722                      
     161.  00:8722  21 60 8C            		LD HL,EMPTYSAMORN
     162.  00:8725  22 12 F0            		LD [PT3_AdInPtA],HL ;ptr to zero
     163.  00:8728  22 30 F0            		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     164.  00:872B  22 4D F0            		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     165.  00:872E  22 6A F0            		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     166.  00:8731                      
     167.  00:8731  22 32 F0            		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     168.  00:8734  22 4F F0            		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     169.  00:8737  22 6C F0            		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     170.  00:873A                      					    ;also EMPTYSAMORN comment
     171.  00:873A                      
     172.  00:873A                      		; --- NOTE TABLE CREATOR (c) Ivan Roshin, adapted by SapphiRe ---
     173.  00:873A  DD 7E FF            		LD A,[IX+99-100] ;TONE TABLE NUMBER
     174.  00:873D  17                  		RLA
     175.  00:873E  E6 07               		AND 7
     176.  00:8740  21 10 8C            		LD HL,NT_DATA
     177.  00:8743  D5                  		PUSH DE
     178.  00:8744  50                  		LD D,B		; ld d,0 (bc is 0000 after LDIR)
     179.  00:8745  87                  		ADD A,A
     180.  00:8746  5F                  		LD E,A
     181.  00:8747  19                  		ADD HL,DE	; hl -> init of correct note table data
     182.  00:8748  5E                  		LD E,[HL]
     183.  00:8749  23                  		INC HL
     184.  00:874A  CB 3B               		SRL E
     185.  00:874C  9F                  		SBC A,A
     186.  00:874D  E6 A7               		AND $A7			;$00 (NOP) or $A7 (AND A)
     187.  00:874F  32 21 F0            		LD [PT3_NTL3],A		; CORRECT INSTRUCTION, DEPENDS OF SELECTED TABLE
     188.  00:8752  3E C9               		LD A,$C9		; RET CODE
     189.  00:8754  32 22 F0            		LD [PT3_NTL3+1],A	; RET PLACED
     190.  00:8757  EB                  		EX DE,HL
     191.  00:8758  C1                  		POP BC ;BC=T1_
     192.  00:8759  09                  		ADD HL,BC
     193.  00:875A                      
     194.  00:875A  1A                  		LD A,[DE]                           
     195.  00:875B                      
     196.  00:875B  01 20 8C            		LD BC,T_
     197.  00:875E  81                  		ADD A,C
     198.  00:875F  4F                  		LD C,A
     199.  00:8760  88                  		ADC A,B
     200.  00:8761                      
     201.  00:8761  91                  		SUB C
     202.  00:8762  47                  		LD B,A
     203.  00:8763  C5                  		PUSH BC
     204.  00:8764  11 80 F0            		LD DE,NT_
     205.  00:8767  D5                  		PUSH DE
     206.  00:8768                      
     207.  00:8768  06 0C               		LD B,12
     208.  00:876A  C5                  .L1:		PUSH BC
     209.  00:876B  4E                  		LD C,[HL]
     210.  00:876C  23                  		INC HL
     211.  00:876D  E5                  		PUSH HL
     212.  00:876E  46                  		LD B,[HL]
     213.  00:876F                      
     214.  00:876F  D5                  		PUSH DE
     215.  00:8770  EB                  		EX DE,HL
     216.  00:8771  11 17 00            		LD DE,23
     217.  00:8774  DD 26 08            		db $DD,$26,$08	;LD XH,8
     218.  00:8777                      
     219.  00:8777  CB 38               .L2:		SRL B
     220.  00:8779  CB 19               		RR C
     221.  00:877B  CD 21 F0            .L3:		CALL PT3_NTL3	;AND A or NOP
     222.  00:877E  79                  		LD A,C
     223.  00:877F  8A                  		ADC A,D	;=ADC 0
     224.  00:8780  77                  		LD [HL],A
     225.  00:8781  23                  		INC HL
     226.  00:8782  78                  		LD A,B
     227.  00:8783  8A                  		ADC A,D
     228.  00:8784  77                  		LD [HL],A
     229.  00:8785  19                  		ADD HL,DE
     230.  00:8786  DD 25               		db $DD,$25	;DEC XH
     231.  00:8788  20 ED               		JR NZ,.L2
     232.  00:878A                      
     233.  00:878A  D1                  		POP DE
     234.  00:878B  13                  		INC DE
     235.  00:878C  13                  		INC DE
     236.  00:878D  E1                  		POP HL
     237.  00:878E  23                  		INC HL
     238.  00:878F  C1                  		POP BC
     239.  00:8790  10 D8               		DJNZ .L1
     240.  00:8792                      
     241.  00:8792  E1                  		POP HL
     242.  00:8793  D1                  		POP DE
     243.  00:8794                      
     244.  00:8794  7B                  		LD A,E
     245.  00:8795  D5                  		PUSH DE
     246.  00:8796  11 2C 8C            		LD DE,TCOLD_1
     247.  00:8799  BB                  		CP E
     248.  00:879A  D1                  		POP DE
     249.  00:879B  20 05               		JR NZ,.CORR_1
     250.  00:879D  3E FD               		LD A,$FD
     251.  00:879F  32 AE F0            		LD [NT_+$2E],A
     252.  00:87A2                      
     253.  00:87A2  1A                  .CORR_1:	LD A,[DE]
     254.  00:87A3  A7                  		AND A
     255.  00:87A4  28 11               		JR Z,.TC_EXIT
     256.  00:87A6  1F                  		RRA
     257.  00:87A7  F5                  		PUSH AF
     258.  00:87A8  87                  		ADD A,A
     259.  00:87A9  4F                  		LD C,A
     260.  00:87AA  09                  		ADD HL,BC
     261.  00:87AB  F1                  		POP AF
     262.  00:87AC  30 02               		JR NC,.CORR_2
     263.  00:87AE  35                  		DEC [HL]
     264.  00:87AF  35                  		DEC [HL]
     265.  00:87B0  34                  .CORR_2:	INC [HL]
     266.  00:87B1  A7                  		AND A
     267.  00:87B2  ED 42               		SBC HL,BC
     268.  00:87B4  13                  		INC DE
     269.  00:87B5  18 EB               		JR .CORR_1
     270.  00:87B7                      
     271.  00:87B7                      .TC_EXIT:	;POP AF
     272.  00:87B7                      
     273.  00:87B7                      		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     274.  00:87B7  21 11 00            		ld	hl,$11
     275.  00:87BA  54                  		ld	d,h
     276.  00:87BB  5C                  		ld	e,h
     277.  00:87BC  DD 21 50 F1         		ld	IX,VT_+16
     278.  00:87C0  06 0F               		ld	b,15
     279.  00:87C2  E5                  .INITV1:	push	hl
     280.  00:87C3  19                  		add	hl,de
     281.  00:87C4  EB                  		ex	de,hl
     282.  00:87C5  ED 62               		sbc	hl,hl
     283.  00:87C7  48                  		ld	c,b
     284.  00:87C8  06 10               		ld	b,16
     285.  00:87CA  7D                  .INITV2:	ld	a,l
     286.  00:87CB  17                  		rla
     287.  00:87CC  7C                  		ld	a,h
     288.  00:87CD  CE 00               		adc	a,0
     289.  00:87CF  DD 77 00            		ld	[ix],a
     290.  00:87D2  DD 23               		inc	ix
     291.  00:87D4  19                  		add	hl,de
     292.  00:87D5  10 F3               		djnz	.INITV2
     293.  00:87D7  E1                  		pop	hl
     294.  00:87D8  7B                  		ld	a,e
     295.  00:87D9  FE 77               		cp	$77
     296.  00:87DB  20 01               		jr	nz,.INITV3
     297.  00:87DD  1C                  		inc	e
     298.  00:87DE  41                  .INITV3:	ld	b,c
     299.  00:87DF  10 E1               		djnz	.INITV1
     300.  00:87E1                      
     301.  00:87E1  C9                  		RET
     302.  00:87E2                      
     303.  00:87E2                      		;pattern decoder
     304.  00:87E2  DD 36 08 00         PD_OrSm:	LD [IX+(CHNPRM_Env_En-12)],0
     305.  00:87E6  CD 6C 89            		CALL SETORN
     306.  00:87E9  0A                  		LD A,[BC]
     307.  00:87EA  03                  		INC BC
     308.  00:87EB  0F                  		RRCA
     309.  00:87EC                      
     310.  00:87EC  87                  PD_SAM:		ADD A,A
     311.  00:87ED  5F                  PD_SAM_:	LD E,A
     312.  00:87EE  16 00               		LD D,0
     313.  00:87F0  2A 05 F0            		LD HL,[PT3_SAMPTRS]
     314.  00:87F3  19                  		ADD HL,DE
     315.  00:87F4  5E                  		LD E,[HL]
     316.  00:87F5  23                  		INC HL
     317.  00:87F6  56                  		LD D,[HL]
     318.  00:87F7  2A 01 F0            		LD HL,[PT3_MODADDR]
     319.  00:87FA  19                  		ADD HL,DE
     320.  00:87FB  DD 75 03            		LD [IX+(CHNPRM_SamPtr-12)],L
     321.  00:87FE  DD 74 04            		LD [IX+(CHNPRM_SamPtr+1-12)],H
     322.  00:8801  18 41               		JR PD_LOOP
     323.  00:8803                      
     324.  00:8803  07                  PD_VOL:		RLCA
     325.  00:8804  07                  		RLCA
     326.  00:8805  07                  		RLCA
     327.  00:8806  07                  		RLCA
     328.  00:8807  DD 77 10            		LD [IX+(CHNPRM_Volume-12)],A
     329.  00:880A  18 3B               		JR PD_LP2
     330.  00:880C                      	
     331.  00:880C  DD 77 08            PD_EOff:	LD [IX+(CHNPRM_Env_En-12)],A
     332.  00:880F  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     333.  00:8812  18 33               		JR PD_LP2
     334.  00:8814                      
     335.  00:8814  3D                  PD_SorE:	DEC A
     336.  00:8815  20 07               		JR NZ,PD_ENV
     337.  00:8817  0A                  		LD A,[BC]
     338.  00:8818  03                  		INC BC
     339.  00:8819  DD 77 05            		LD [IX+(CHNPRM_NNtSkp-12)],A
     340.  00:881C  18 29               		JR PD_LP2
     341.  00:881E                      
     342.  00:881E  CD 50 89            PD_ENV:		CALL SETENV
     343.  00:8821  18 24               		JR PD_LP2
     344.  00:8823                      
     345.  00:8823  CD 6C 89            PD_ORN:		CALL SETORN
     346.  00:8826  18 1C               		JR PD_LOOP
     347.  00:8828                             
     348.  00:8828  DD 77 08            PD_ESAM:	LD [IX+(CHNPRM_Env_En-12)],A
     349.  00:882B  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     350.  00:882E  C4 50 89            		CALL NZ,SETENV
     351.  00:8831  0A                  		LD A,[BC]
     352.  00:8832  03                  		INC BC
     353.  00:8833  18 B8               		JR PD_SAM_
     354.  00:8835                      
     355.  00:8835  DD 7E 06            PTDECOD:	LD A,[IX+(CHNPRM_Note-12)]
     356.  00:8838  32 0F F0            		LD [PT3_PrNote],A
     357.  00:883B  DD 6E FA            		LD L,[IX+(CHNPRM_CrTnSl-12)]
     358.  00:883E  DD 66 FB            		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     359.  00:8841  22 10 F0            		LD [PT3_PrSlide],HL
     360.  00:8844                      
     361.  00:8844  11 10 20            PD_LOOP:	LD DE,$2010
     362.  00:8847  0A                  PD_LP2:		LD A,[BC]
     363.  00:8848  03                  		INC BC
     364.  00:8849  83                  		ADD A,E
     365.  00:884A  38 96               		JR C,PD_OrSm
     366.  00:884C  82                  		ADD A,D
     367.  00:884D  28 4A               		JR Z,PD_FIN
     368.  00:884F  38 9B               		JR C,PD_SAM
     369.  00:8851  83                  		ADD A,E
     370.  00:8852  28 25               		JR Z,PD_REL
     371.  00:8854  38 AD               		JR C,PD_VOL
     372.  00:8856  83                  		ADD A,E
     373.  00:8857  28 B3               		JR Z,PD_EOff
     374.  00:8859  38 B9               		JR C,PD_SorE
     375.  00:885B  C6 60               		ADD A,96
     376.  00:885D  38 20               		JR C,PD_NOTE
     377.  00:885F  83                  		ADD A,E
     378.  00:8860  38 C1               		JR C,PD_ORN
     379.  00:8862  82                  		ADD A,D
     380.  00:8863  38 0F               		JR C,PD_NOIS
     381.  00:8865  83                  		ADD A,E
     382.  00:8866  38 C0               		JR C,PD_ESAM
     383.  00:8868  87                  		ADD A,A
     384.  00:8869  5F                  		LD E,A
     385.  00:886A  21 A5 68            		LD HL,(SPCCOMS+$DF20) % 65536	; Adapted from original Speccy version (saves 6 bytes)
     386.  00:886D  19                  		ADD HL,DE
     387.  00:886E  5E                  		LD E,[HL]
     388.  00:886F  23                  		INC HL
     389.  00:8870  56                  		LD D,[HL]
     390.  00:8871  D5                  		PUSH DE
     391.  00:8872  18 D0               		JR PD_LOOP
     392.  00:8874                      
     393.  00:8874  32 7E F0            PD_NOIS:	LD [Ns_Base],A
     394.  00:8877  18 CE               		JR PD_LP2
     395.  00:8879                      
     396.  00:8879  DD CB 09 86         PD_REL:		RES 0,[IX+(CHNPRM_Flags-12)]
     397.  00:887D  18 08               		JR PD_RES
     398.  00:887F                      	
     399.  00:887F  DD 77 06            PD_NOTE:	LD [IX+(CHNPRM_Note-12)],A
     400.  00:8882  DD CB 09 C6         		SET 0,[IX+(CHNPRM_Flags-12)]
     401.  00:8886  AF                  		XOR A
     402.  00:8887                      
     403.  00:8887  ED 73 09 F0         PD_RES:		LD [PT3_PDSP],SP
     404.  00:888B  DD F9               		LD SP,IX
     405.  00:888D  67                  		LD H,A
     406.  00:888E  6F                  		LD L,A
     407.  00:888F  E5                  		PUSH HL
     408.  00:8890  E5                  		PUSH HL
     409.  00:8891  E5                  		PUSH HL
     410.  00:8892  E5                  		PUSH HL
     411.  00:8893  E5                  		PUSH HL
     412.  00:8894  E5                  		PUSH HL
     413.  00:8895  ED 7B 09 F0         		LD SP,[PT3_PDSP]
     414.  00:8899                      
     415.  00:8899  DD 7E 05            PD_FIN:		LD A,[IX+(CHNPRM_NNtSkp-12)]
     416.  00:889C  DD 77 0F            		LD [IX+(CHNPRM_NtSkCn-12)],A
     417.  00:889F  C9                  		RET
     418.  00:88A0                      
     419.  00:88A0  DD CB 09 96         C_PORTM:	RES 2,[IX+(CHNPRM_Flags-12)]
     420.  00:88A4  0A                  		LD A,[BC]
     421.  00:88A5  03                  		INC BC
     422.  00:88A6                      		;SKIP PRECALCULATED TONE DELTA [BECAUSE
     423.  00:88A6                      		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
     424.  00:88A6  03                  		INC BC
     425.  00:88A7  03                  		INC BC
     426.  00:88A8  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     427.  00:88AB  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     428.  00:88AE  11 80 F0            		LD DE,NT_
     429.  00:88B1  DD 7E 06            		LD A,[IX+(CHNPRM_Note-12)]
     430.  00:88B4  DD 77 07            		LD [IX+(CHNPRM_SlToNt-12)],A
     431.  00:88B7  87                  		ADD A,A
     432.  00:88B8  6F                  		LD L,A
     433.  00:88B9  26 00               		LD H,0
     434.  00:88BB  19                  		ADD HL,DE
     435.  00:88BC  7E                  		LD A,[HL]
     436.  00:88BD  23                  		INC HL
     437.  00:88BE  66                  		LD H,[HL]
     438.  00:88BF  6F                  		LD L,A
     439.  00:88C0  E5                  		PUSH HL
     440.  00:88C1  3A 0F F0            		LD A,[PT3_PrNote]
     441.  00:88C4  DD 77 06            		LD [IX+(CHNPRM_Note-12)],A
     442.  00:88C7  87                  		ADD A,A
     443.  00:88C8  6F                  		LD L,A
     444.  00:88C9  26 00               		LD H,0
     445.  00:88CB  19                  		ADD HL,DE
     446.  00:88CC  5E                  		LD E,[HL]
     447.  00:88CD  23                  		INC HL
     448.  00:88CE  56                  		LD D,[HL]
     449.  00:88CF  E1                  		POP HL
     450.  00:88D0  ED 52               		SBC HL,DE
     451.  00:88D2  DD 75 0D            		LD [IX+(CHNPRM_TnDelt-12)],L
     452.  00:88D5  DD 74 0E            		LD [IX+(CHNPRM_TnDelt+1-12)],H
     453.  00:88D8  ED 5B 10 F0         		LD DE,[PT3_PrSlide]
     454.  00:88DC  DD 73 FA            		LD [IX+(CHNPRM_CrTnSl-12)],E
     455.  00:88DF  DD 72 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],D
     456.  00:88E2  0A                  		LD A,[BC] ;SIGNED TONE STEP
     457.  00:88E3  03                  		INC BC
     458.  00:88E4  08                  		EX AF,AF'
     459.  00:88E5  0A                  		LD A,[BC]
     460.  00:88E6  03                  		INC BC
     461.  00:88E7  A7                  		AND A
     462.  00:88E8  28 01               		JR Z,.NOSIG
     463.  00:88EA  EB                  		EX DE,HL
     464.  00:88EB  ED 52               .NOSIG:	SBC HL,DE
     465.  00:88ED  F2 F5 88            		JP P,SET_STP
     466.  00:88F0  2F                  		CPL
     467.  00:88F1  08                  		EX AF,AF'
     468.  00:88F2  ED 44               		NEG
     469.  00:88F4  08                  		EX AF,AF'
     470.  00:88F5  DD 77 0C            SET_STP:	LD [IX+(CHNPRM_TSlStp+1-12)],A
     471.  00:88F8  08                  		EX AF,AF'
     472.  00:88F9  DD 77 0B            		LD [IX+(CHNPRM_TSlStp-12)],A
     473.  00:88FC  DD 36 FE 00         		LD [IX+(CHNPRM_COnOff-12)],0
     474.  00:8900  C9                  		RET
     475.  00:8901                      
     476.  00:8901  DD CB 09 D6         C_GLISS:	SET 2,[IX+(CHNPRM_Flags-12)]
     477.  00:8905  0A                  		LD A,[BC]
     478.  00:8906  03                  		INC BC
     479.  00:8907  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     480.  00:890A  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     481.  00:890D  0A                  		LD A,[BC]
     482.  00:890E  03                  		INC BC
     483.  00:890F  08                  		EX AF,AF'
     484.  00:8910  0A                  		LD A,[BC]
     485.  00:8911  03                  		INC BC
     486.  00:8912  18 E1               		JR SET_STP
     487.  00:8914                      
     488.  00:8914  0A                  C_SMPOS:	LD A,[BC]
     489.  00:8915  03                  		INC BC
     490.  00:8916  DD 77 F5            		LD [IX+(CHNPRM_PsInSm-12)],A
     491.  00:8919  C9                  		RET
     492.  00:891A                      
     493.  00:891A  0A                  C_ORPOS:	LD A,[BC]
     494.  00:891B  03                  		INC BC
     495.  00:891C  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     496.  00:891F  C9                  		RET
     497.  00:8920                      
     498.  00:8920  0A                  C_VIBRT:	LD A,[BC]
     499.  00:8921  03                  		INC BC
     500.  00:8922  DD 77 FF            		LD [IX+(CHNPRM_OnOffD-12)],A
     501.  00:8925  DD 77 FE            		LD [IX+(CHNPRM_COnOff-12)],A
     502.  00:8928  0A                  		LD A,[BC]
     503.  00:8929  03                  		INC BC
     504.  00:892A  DD 77 00            		LD [IX+(CHNPRM_OffOnD-12)],A
     505.  00:892D  AF                  		XOR A
     506.  00:892E  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     507.  00:8931  DD 77 FA            		LD [IX+(CHNPRM_CrTnSl-12)],A
     508.  00:8934  DD 77 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],A
     509.  00:8937  C9                  		RET
     510.  00:8938                      
     511.  00:8938  0A                  C_ENGLS:	LD A,[BC]
     512.  00:8939  03                  		INC BC
     513.  00:893A  32 1E F0            		LD [PT3_Env_Del],A
     514.  00:893D  32 7D F0            		LD [CurEDel],A
     515.  00:8940  0A                  		LD A,[BC]
     516.  00:8941  03                  		INC BC
     517.  00:8942  6F                  		LD L,A
     518.  00:8943  0A                  		LD A,[BC]
     519.  00:8944  03                  		INC BC
     520.  00:8945  67                  		LD H,A
     521.  00:8946  22 1F F0            		LD [PT3_ESldAdd],HL
     522.  00:8949  C9                  		RET
     523.  00:894A                      
     524.  00:894A  0A                  C_DELAY:	LD A,[BC]
     525.  00:894B  03                  		INC BC
     526.  00:894C  32 1C F0            		LD [PT3_Delay],A
     527.  00:894F  C9                  		RET
     528.  00:8950                      	
     529.  00:8950  DD 73 08            SETENV:		LD [IX+(CHNPRM_Env_En-12)],E
     530.  00:8953  32 4D F1            		LD [AYREGS+AR_EnvTp],A
     531.  00:8956  0A                  		LD A,[BC]
     532.  00:8957  03                  		INC BC
     533.  00:8958  67                  		LD H,A
     534.  00:8959  0A                  		LD A,[BC]
     535.  00:895A  03                  		INC BC
     536.  00:895B  6F                  		LD L,A
     537.  00:895C  22 4E F1            		LD [EnvBase],HL
     538.  00:895F  AF                  		XOR A
     539.  00:8960  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     540.  00:8963  32 7D F0            		LD [CurEDel],A
     541.  00:8966  67                  		LD H,A
     542.  00:8967  6F                  		LD L,A
     543.  00:8968  22 7B F0            		LD [CurESld],HL
     544.  00:896B  C9                  C_NOP:		RET
     545.  00:896C                      
     546.  00:896C  87                  SETORN:		ADD A,A
     547.  00:896D  5F                  		LD E,A
     548.  00:896E  16 00               		LD D,0
     549.  00:8970  DD 72 F4            		LD [IX+(CHNPRM_PsInOr-12)],D
     550.  00:8973  2A 07 F0            		LD HL,[PT3_OrnPtrs]
     551.  00:8976  19                  		ADD HL,DE
     552.  00:8977  5E                  		LD E,[HL]
     553.  00:8978  23                  		INC HL
     554.  00:8979  56                  		LD D,[HL]
     555.  00:897A  2A 01 F0            		LD HL,[PT3_MODADDR]
     556.  00:897D  19                  		ADD HL,DE
     557.  00:897E  DD 75 01            		LD [IX+(CHNPRM_OrnPtr-12)],L
     558.  00:8981  DD 74 02            		LD [IX+(CHNPRM_OrnPtr+1-12)],H
     559.  00:8984  C9                  		RET
     560.  00:8985                      
     561.  00:8985                      		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     562.  00:8985  6B 89               SPCCOMS:	dw C_NOP
     563.  00:8987  01 89               		dw C_GLISS
     564.  00:8989  A0 88               		dw C_PORTM
     565.  00:898B  14 89               		dw C_SMPOS
     566.  00:898D  1A 89               		dw C_ORPOS
     567.  00:898F  20 89               		dw C_VIBRT
     568.  00:8991  6B 89               		dw C_NOP
     569.  00:8993  6B 89               		dw C_NOP
     570.  00:8995  38 89               		dw C_ENGLS
     571.  00:8997  4A 89               		dw C_DELAY
     572.  00:8999  6B 89               		dw C_NOP
     573.  00:899B  6B 89               		dw C_NOP
     574.  00:899D  6B 89               		dw C_NOP
     575.  00:899F  6B 89               		dw C_NOP
     576.  00:89A1  6B 89               		dw C_NOP
     577.  00:89A3  6B 89               		dw C_NOP
     578.  00:89A5                      
     579.  00:89A5  AF                  CHREGS:		XOR A
     580.  00:89A6  32 4A F1            		LD [AYREGS+AR_AmplC],A
     581.  00:89A9  DD CB 15 46         		BIT 0,[IX+CHNPRM_Flags]
     582.  00:89AD  E5                  		PUSH HL
     583.  00:89AE  CA D4 8A            		JP Z,.CH_EXIT
     584.  00:89B1  ED 73 0B F0         		LD [PT3_CSP],SP
     585.  00:89B5  DD 6E 0D            		LD L,[IX+CHNPRM_OrnPtr]
     586.  00:89B8  DD 66 0E            		LD H,[IX+CHNPRM_OrnPtr+1]
     587.  00:89BB  F9                  		LD SP,HL
     588.  00:89BC  D1                  		POP DE
     589.  00:89BD  67                  		LD H,A
     590.  00:89BE  DD 7E 00            		LD A,[IX+CHNPRM_PsInOr]
     591.  00:89C1  6F                  		LD L,A
     592.  00:89C2  39                  		ADD HL,SP
     593.  00:89C3  3C                  		INC A
     594.  00:89C4  BA                  		CP D
     595.  00:89C5  38 01               		JR C,.CH_ORPS
     596.  00:89C7  7B                  		LD A,E
     597.  00:89C8  DD 77 00            .CH_ORPS:	LD [IX+CHNPRM_PsInOr],A
     598.  00:89CB  DD 7E 12            		LD A,[IX+CHNPRM_Note]
     599.  00:89CE  86                  		ADD A,[HL]
     600.  00:89CF  F2 D3 89            		JP P,.CH_NTP
     601.  00:89D2  AF                  		XOR A
     602.  00:89D3  FE 60               .CH_NTP:	CP 96
     603.  00:89D5  38 02               		JR C,.CH_NOK
     604.  00:89D7  3E 5F               		LD A,95
     605.  00:89D9  87                  .CH_NOK:	ADD A,A
     606.  00:89DA  08                  		EX AF,AF'
     607.  00:89DB  DD 6E 0F            		LD L,[IX+CHNPRM_SamPtr]
     608.  00:89DE  DD 66 10            		LD H,[IX+CHNPRM_SamPtr+1]
     609.  00:89E1  F9                  		LD SP,HL
     610.  00:89E2  D1                  		POP DE
     611.  00:89E3  26 00               		LD H,0
     612.  00:89E5  DD 7E 01            		LD A,[IX+CHNPRM_PsInSm]
     613.  00:89E8  47                  		LD B,A
     614.  00:89E9  87                  		ADD A,A
     615.  00:89EA  87                  		ADD A,A
     616.  00:89EB  6F                  		LD L,A
     617.  00:89EC  39                  		ADD HL,SP
     618.  00:89ED  F9                  		LD SP,HL
     619.  00:89EE  78                  		LD A,B
     620.  00:89EF  3C                  		INC A
     621.  00:89F0  BA                  		CP D
     622.  00:89F1  38 01               		JR C,.CH_SMPS
     623.  00:89F3  7B                  		LD A,E
     624.  00:89F4  DD 77 01            .CH_SMPS:	LD [IX+CHNPRM_PsInSm],A
     625.  00:89F7  C1                  		POP BC
     626.  00:89F8  E1                  		POP HL
     627.  00:89F9  DD 5E 08            		LD E,[IX+CHNPRM_TnAcc]
     628.  00:89FC  DD 56 09            		LD D,[IX+CHNPRM_TnAcc+1]
     629.  00:89FF  19                  		ADD HL,DE
     630.  00:8A00  CB 70               		BIT 6,B
     631.  00:8A02  28 06               		JR Z,.CH_NOAC
     632.  00:8A04  DD 75 08            		LD [IX+CHNPRM_TnAcc],L
     633.  00:8A07  DD 74 09            		LD [IX+CHNPRM_TnAcc+1],H
     634.  00:8A0A  EB                  .CH_NOAC:	EX DE,HL
     635.  00:8A0B  08                  		EX AF,AF'
     636.  00:8A0C  6F                  		LD L,A
     637.  00:8A0D  26 00               		LD H,0
     638.  00:8A0F  31 80 F0            		LD SP,NT_
     639.  00:8A12  39                  		ADD HL,SP
     640.  00:8A13  F9                  		LD SP,HL
     641.  00:8A14  E1                  		POP HL
     642.  00:8A15  19                  		ADD HL,DE
     643.  00:8A16  DD 5E 06            		LD E,[IX+CHNPRM_CrTnSl]
     644.  00:8A19  DD 56 07            		LD D,[IX+CHNPRM_CrTnSl+1]
     645.  00:8A1C  19                  		ADD HL,DE
     646.  00:8A1D  ED 7B 0B F0         		LD SP,[PT3_CSP]
     647.  00:8A21  E3                  		EX [SP],HL
     648.  00:8A22  AF                  		XOR A
     649.  00:8A23  DD B6 05            		OR [IX+CHNPRM_TSlCnt]
     650.  00:8A26  28 3E               		JR Z,.CH_AMP
     651.  00:8A28  DD 35 05            		DEC [IX+CHNPRM_TSlCnt]
     652.  00:8A2B  20 39               		JR NZ,.CH_AMP
     653.  00:8A2D  DD 7E 16            		LD A,[IX+CHNPRM_TnSlDl]
     654.  00:8A30  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     655.  00:8A33  DD 6E 17            		LD L,[IX+CHNPRM_TSlStp]
     656.  00:8A36  DD 66 18            		LD H,[IX+CHNPRM_TSlStp+1]
     657.  00:8A39  7C                  		LD A,H
     658.  00:8A3A  19                  		ADD HL,DE
     659.  00:8A3B  DD 75 06            		LD [IX+CHNPRM_CrTnSl],L
     660.  00:8A3E  DD 74 07            		LD [IX+CHNPRM_CrTnSl+1],H
     661.  00:8A41  DD CB 15 56         		BIT 2,[IX+CHNPRM_Flags]
     662.  00:8A45  20 1F               		JR NZ,.CH_AMP
     663.  00:8A47  DD 5E 19            		LD E,[IX+CHNPRM_TnDelt]
     664.  00:8A4A  DD 56 1A            		LD D,[IX+CHNPRM_TnDelt+1]
     665.  00:8A4D  A7                  		AND A
     666.  00:8A4E  28 01               		JR Z,.CH_STPP
     667.  00:8A50  EB                  		EX DE,HL
     668.  00:8A51  ED 52               .CH_STPP:	SBC HL,DE
     669.  00:8A53  FA 66 8A            		JP M,.CH_AMP
     670.  00:8A56  DD 7E 13            		LD A,[IX+CHNPRM_SlToNt]
     671.  00:8A59  DD 77 12            		LD [IX+CHNPRM_Note],A
     672.  00:8A5C  AF                  		XOR A
     673.  00:8A5D  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     674.  00:8A60  DD 77 06            		LD [IX+CHNPRM_CrTnSl],A
     675.  00:8A63  DD 77 07            		LD [IX+CHNPRM_CrTnSl+1],A
     676.  00:8A66  DD 7E 02            .CH_AMP:	LD A,[IX+CHNPRM_CrAmSl]
     677.  00:8A69  CB 79               		BIT 7,C
     678.  00:8A6B  28 13               		JR Z,.CH_NOAM
     679.  00:8A6D  CB 71               		BIT 6,C
     680.  00:8A6F  28 07               		JR Z,.CH_AMIN
     681.  00:8A71  FE 0F               		CP 15
     682.  00:8A73  28 0B               		JR Z,.CH_NOAM
     683.  00:8A75  3C                  		INC A
     684.  00:8A76  18 05               		JR .CH_SVAM
     685.  00:8A78  FE F1               .CH_AMIN:	CP -15
     686.  00:8A7A  28 04               		JR Z,.CH_NOAM
     687.  00:8A7C  3D                  		DEC A
     688.  00:8A7D  DD 77 02            .CH_SVAM:	LD [IX+CHNPRM_CrAmSl],A
     689.  00:8A80  6F                  .CH_NOAM:	LD L,A
     690.  00:8A81  78                  		LD A,B
     691.  00:8A82  E6 0F               		AND 15
     692.  00:8A84  85                  		ADD A,L
     693.  00:8A85  F2 89 8A            		JP P,.CH_APOS
     694.  00:8A88  AF                  		XOR A
     695.  00:8A89  FE 10               .CH_APOS:	CP 16
     696.  00:8A8B  38 02               		JR C,.CH_VOL
     697.  00:8A8D  3E 0F               		LD A,15
     698.  00:8A8F  DD B6 1C            .CH_VOL:	OR [IX+CHNPRM_Volume]
     699.  00:8A92  6F                  		LD L,A
     700.  00:8A93  26 00               		LD H,0
     701.  00:8A95  11 40 F1            		LD DE,VT_
     702.  00:8A98  19                  		ADD HL,DE
     703.  00:8A99  7E                  		LD A,[HL]
     704.  00:8A9A  CB 41               .CH_ENV:	BIT 0,C
     705.  00:8A9C  20 03               		JR NZ,.CH_NOEN
     706.  00:8A9E  DD B6 14            		OR [IX+CHNPRM_Env_En]
     707.  00:8AA1  32 4A F1            .CH_NOEN:	LD [AYREGS+AR_AmplC],A
     708.  00:8AA4  CB 78               		BIT 7,B
     709.  00:8AA6  79                  		LD A,C
     710.  00:8AA7  28 19               		JR Z,.NO_ENSL
     711.  00:8AA9  17                  		RLA
     712.  00:8AAA  17                  		RLA
     713.  00:8AAB  CB 2F               		SRA A
     714.  00:8AAD  CB 2F               		SRA A
     715.  00:8AAF  CB 2F               		SRA A
     716.  00:8AB1  DD 86 04            		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     717.  00:8AB4  CB 68               		BIT 5,B
     718.  00:8AB6  28 03               		JR Z,.NO_ENAC
     719.  00:8AB8  DD 77 04            		LD [IX+CHNPRM_CrEnSl],A
     720.  00:8ABB  21 1D F0            .NO_ENAC:	LD HL,PT3_AddToEn
     721.  00:8ABE  86                  		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
     722.  00:8ABF                      			   ;FIX IT IN NEXT VERSION?
     723.  00:8ABF  77                  		LD [HL],A
     724.  00:8AC0  18 0E               		JR .CH_MIX
     725.  00:8AC2  1F                  .NO_ENSL:	RRA
     726.  00:8AC3  DD 86 03            		ADD A,[IX+CHNPRM_CrNsSl]
     727.  00:8AC6  32 7F F0            		LD [AddToNs],A
     728.  00:8AC9  CB 68               		BIT 5,B
     729.  00:8ACB  28 03               		JR Z,.CH_MIX
     730.  00:8ACD  DD 77 03            		LD [IX+CHNPRM_CrNsSl],A
     731.  00:8AD0  78                  .CH_MIX:	LD A,B
     732.  00:8AD1  1F                  		RRA
     733.  00:8AD2  E6 48               		AND $48
     734.  00:8AD4  21 47 F1            .CH_EXIT:	LD HL,AYREGS+AR_Mixer
     735.  00:8AD7  B6                  		OR [HL]
     736.  00:8AD8  0F                  		RRCA
     737.  00:8AD9  77                  		LD [HL],A
     738.  00:8ADA  E1                  		POP HL
     739.  00:8ADB  AF                  		XOR A
     740.  00:8ADC  DD B6 0A            		OR [IX+CHNPRM_COnOff]
     741.  00:8ADF  C8                  		RET Z
     742.  00:8AE0  DD 35 0A            		DEC [IX+CHNPRM_COnOff]
     743.  00:8AE3  C0                  		RET NZ
     744.  00:8AE4  DD AE 15            		XOR [IX+CHNPRM_Flags]
     745.  00:8AE7  DD 77 15            		LD [IX+CHNPRM_Flags],A
     746.  00:8AEA  1F                  		RRA
     747.  00:8AEB  DD 7E 0B            		LD A,[IX+CHNPRM_OnOffD]
     748.  00:8AEE  38 03               		JR C,.CH_ONDL
     749.  00:8AF0  DD 7E 0C            		LD A,[IX+CHNPRM_OffOnD]
     750.  00:8AF3  DD 77 0A            .CH_ONDL:	LD [IX+CHNPRM_COnOff],A
     751.  00:8AF6  C9                  		RET
     752.  00:8AF7                      
     753.  00:8AF7  AF                  PT3_PLAY:	XOR A
     754.  00:8AF8  32 1D F0            		LD [PT3_AddToEn],A
     755.  00:8AFB  32 47 F1            		LD [AYREGS+AR_Mixer],A
     756.  00:8AFE  3D                  		DEC A
     757.  00:8AFF  32 4D F1            		LD [AYREGS+AR_EnvTp],A
     758.  00:8B02  21 7A F0            		LD HL,DelyCnt
     759.  00:8B05  35                  		DEC [HL]
     760.  00:8B06  C2 8D 8B            		JP NZ,.PL2
     761.  00:8B09  21 3E F0            		LD HL,ChanA+CHNPRM_NtSkCn
     762.  00:8B0C  35                  		DEC [HL]
     763.  00:8B0D  20 4E               		JR NZ,.PL1B
     764.  00:8B0F  ED 4B 12 F0         		LD BC,[PT3_AdInPtA]
     765.  00:8B13  0A                  		LD A,[BC]
     766.  00:8B14  A7                  		AND A
     767.  00:8B15  20 3B               		JR NZ,.PL1A
     768.  00:8B17  57                  		LD D,A
     769.  00:8B18  32 7E F0            		LD [Ns_Base],A
     770.  00:8B1B  2A 03 F0            		LD HL,[PT3_CrPsPtr]
     771.  00:8B1E  23                  		INC HL
     772.  00:8B1F  7E                  		LD A,[HL]
     773.  00:8B20  3C                  		INC A
     774.  00:8B21  20 08               		JR NZ,.PLNLP
     775.  00:8B23  CD 8D 86            		CALL CHECKLP
     776.  00:8B26  2A 18 F0            		LD HL,[PT3_LPosPtr]
     777.  00:8B29  7E                  		LD A,[HL]
     778.  00:8B2A  3C                  		INC A
     779.  00:8B2B  22 03 F0            .PLNLP:	LD [PT3_CrPsPtr],HL
     780.  00:8B2E  3D                  		DEC A
     781.  00:8B2F  87                  		ADD A,A
     782.  00:8B30  5F                  		LD E,A
     783.  00:8B31  CB 12               		RL D
     784.  00:8B33  2A 1A F0            		LD HL,[PT3_PatsPtr]
     785.  00:8B36  19                  		ADD HL,DE
     786.  00:8B37  ED 5B 01 F0         		LD DE,[PT3_MODADDR]
     787.  00:8B3B  ED 73 0D F0         		LD [PT3_PSP],SP
     788.  00:8B3F  F9                  		LD SP,HL
     789.  00:8B40  E1                  		POP HL
     790.  00:8B41  19                  		ADD HL,DE
     791.  00:8B42  44                  		LD B,H
     792.  00:8B43  4D                  		LD C,L
     793.  00:8B44  E1                  		POP HL
     794.  00:8B45  19                  		ADD HL,DE
     795.  00:8B46  22 14 F0            		LD [PT3_AdInPtB],HL
     796.  00:8B49  E1                  		POP HL
     797.  00:8B4A  19                  		ADD HL,DE
     798.  00:8B4B  22 16 F0            		LD [PT3_AdInPtC],HL
     799.  00:8B4E  ED 7B 0D F0         		LD SP,[PT3_PSP]
     800.  00:8B52                      
     801.  00:8B52  DD 21 2F F0         .PL1A:		LD IX,ChanA+12
     802.  00:8B56  CD 35 88            		CALL PTDECOD
     803.  00:8B59  ED 43 12 F0         		LD [PT3_AdInPtA],BC
     804.  00:8B5D                      
     805.  00:8B5D  21 5B F0            .PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     806.  00:8B60  35                  		DEC [HL]
     807.  00:8B61  20 0F               		JR NZ,.PL1C
     808.  00:8B63  DD 21 4C F0         		LD IX,ChanB+12
     809.  00:8B67  ED 4B 14 F0         		LD BC,[PT3_AdInPtB]
     810.  00:8B6B  CD 35 88            		CALL PTDECOD
     811.  00:8B6E  ED 43 14 F0         		LD [PT3_AdInPtB],BC
     812.  00:8B72                      
     813.  00:8B72  21 78 F0            .PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     814.  00:8B75  35                  		DEC [HL]
     815.  00:8B76  20 0F               		JR NZ,.PL1D
     816.  00:8B78  DD 21 69 F0         		LD IX,ChanC+12
     817.  00:8B7C  ED 4B 16 F0         		LD BC,[PT3_AdInPtC]
     818.  00:8B80  CD 35 88            		CALL PTDECOD
     819.  00:8B83  ED 43 16 F0         		LD [PT3_AdInPtC],BC
     820.  00:8B87                      
     821.  00:8B87  3A 1C F0            .PL1D:		LD A,[PT3_Delay]
     822.  00:8B8A  32 7A F0            		LD [DelyCnt],A
     823.  00:8B8D                      
     824.  00:8B8D  DD 21 23 F0         .PL2:		LD IX,ChanA
     825.  00:8B91  2A 40 F1            		LD HL,[AYREGS+AR_TonA]
     826.  00:8B94  CD A5 89            		CALL CHREGS
     827.  00:8B97  22 40 F1            		LD [AYREGS+AR_TonA],HL
     828.  00:8B9A  3A 4A F1            		LD A,[AYREGS+AR_AmplC]
     829.  00:8B9D  32 48 F1            		LD [AYREGS+AR_AmplA],A
     830.  00:8BA0  DD 21 40 F0         		LD IX,ChanB
     831.  00:8BA4  2A 42 F1            		LD HL,[AYREGS+AR_TonB]
     832.  00:8BA7  CD A5 89            		CALL CHREGS
     833.  00:8BAA  22 42 F1            		LD [AYREGS+AR_TonB],HL
     834.  00:8BAD  3A 4A F1            		LD A,[AYREGS+AR_AmplC]
     835.  00:8BB0  32 49 F1            		LD [AYREGS+AR_AmplB],A
     836.  00:8BB3  DD 21 5D F0         		LD IX,ChanC
     837.  00:8BB7  2A 44 F1            		LD HL,[AYREGS+AR_TonC]
     838.  00:8BBA  CD A5 89            		CALL CHREGS
     839.  00:8BBD  22 44 F1            		LD [AYREGS+AR_TonC],HL
     840.  00:8BC0                      
     841.  00:8BC0  2A 7E F0            		LD HL,[Ns_Base_AddToNs]
     842.  00:8BC3  7C                  		LD A,H
     843.  00:8BC4  85                  		ADD A,L
     844.  00:8BC5  32 46 F1            		LD [AYREGS+AR_Noise],A
     845.  00:8BC8                      
     846.  00:8BC8  3A 1D F0            		LD A,[PT3_AddToEn]
     847.  00:8BCB  5F                  		LD E,A
     848.  00:8BCC  87                  		ADD A,A
     849.  00:8BCD  9F                  		SBC A,A
     850.  00:8BCE  57                  		LD D,A
     851.  00:8BCF  2A 4E F1            		LD HL,[EnvBase]
     852.  00:8BD2  19                  		ADD HL,DE
     853.  00:8BD3  ED 5B 7B F0         		LD DE,[CurESld]
     854.  00:8BD7  19                  		ADD HL,DE
     855.  00:8BD8  22 4B F1            		LD [AYREGS+AR_Env],HL
     856.  00:8BDB                      
     857.  00:8BDB  AF                  		XOR A
     858.  00:8BDC  21 7D F0            		LD HL,CurEDel
     859.  00:8BDF  B6                  		OR [HL]
     860.  00:8BE0  C8                  		RET Z
     861.  00:8BE1  35                  		DEC [HL]
     862.  00:8BE2  C0                  		RET NZ
     863.  00:8BE3  3A 1E F0            		LD A,[PT3_Env_Del]
     864.  00:8BE6  77                  		LD [HL],A
     865.  00:8BE7  2A 1F F0            		LD HL,[PT3_ESldAdd]
     866.  00:8BEA  19                  		ADD HL,DE
     867.  00:8BEB  22 7B F0            		LD [CurESld],HL
     868.  00:8BEE  C9                  		RET
     869.  00:8BEF                      
     870.  00:8BEF  AF                  PT3_ROUT:	XOR A
     871.  00:8BF0                      	
     872.  00:8BF0                      ROUT_A0:	; --- FIXES BITS 6 AND 7 OF MIXER ---
     873.  00:8BF0  21 47 F1            		LD	HL,AYREGS+AR_Mixer
     874.  00:8BF3  CB FE               		set	7,[hl]
     875.  00:8BF5  CB B6               		res	6,[hl]
     876.  00:8BF7                      
     877.  00:8BF7  0E A0               		LD C,$A0
     878.  00:8BF9  21 40 F1            		LD HL,AYREGS
     879.  00:8BFC  ED 79               .LOUT:		OUT [C],A
     880.  00:8BFE  0C                  		INC C
     881.  00:8BFF  ED A3               		OUTI 
     882.  00:8C01  0D                  		DEC C
     883.  00:8C02  3C                  		INC A
     884.  00:8C03  FE 0D               		CP 13
     885.  00:8C05  20 F5               		JR NZ,.LOUT
     886.  00:8C07  ED 79               		OUT [C],A
     887.  00:8C09  7E                  		LD A,[HL]
     888.  00:8C0A  A7                  		AND A
     889.  00:8C0B  F8                  		RET M
     890.  00:8C0C  0C                  		INC C
     891.  00:8C0D  ED 79               		OUT [C],A
     892.  00:8C0F  C9                  		RET
     893.  00:8C10                      
     894.  00:8C10  64                  NT_DATA:	db (T_NEW_0-T1_)*2
     895.  00:8C11  2A                  		db TCNEW_0-T_
     896.  00:8C12  65                  		db (T_OLD_0-T1_)*2+1
     897.  00:8C13  00                  		db TCOLD_0-T_
     898.  00:8C14  01                  		db (T_NEW_1-T1_)*2+1
     899.  00:8C15  0C                  		db TCNEW_1-T_
     900.  00:8C16  01                  		db (T_OLD_1-T1_)*2+1
     901.  00:8C17  0C                  		db TCOLD_1-T_
     902.  00:8C18  94                  		db (T_NEW_2-T1_)*2
     903.  00:8C19  35                  		db TCNEW_2-T_
     904.  00:8C1A  30                  		db (T_OLD_2-T1_)*2
     905.  00:8C1B  0E                  		db TCOLD_2-T_
     906.  00:8C1C  60                  		db (T_NEW_3-T1_)*2
     907.  00:8C1D  20                  		db TCNEW_3-T_
     908.  00:8C1E  60                  		db (T_OLD_3-T1_)*2
     909.  00:8C1F  21                  		db TCOLD_3-T_
     910.  00:8C20                      
     911.  00:8C20                      T_:
     912.  00:8C20                      
     913.  00:8C20                      TCOLD_0:	db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
     913.  00:8C20  01 05 09 0B 0D 0F 13 15 
     914.  00:8C28  19 25 3D 00         		db $18+1,$24+1,$3C+1,0
     915.  00:8C2C                      TCNEW_1:	
     916.  00:8C2C  5D 00               TCOLD_1:	db $5C+1,0
     917.  00:8C2E                      TCOLD_2:	db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
     917.  00:8C2E  31 37 4D 53 5F 71 82 8C 9C 
     918.  00:8C37                      		db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
     918.  00:8C37  9E A0 A6 A8 AA AC AE AE 00 
     919.  00:8C40  57                  TCNEW_3:	db $56+1
     920.  00:8C41                      TCOLD_3:	db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
     920.  00:8C41  1F 23 25 29 2D 2F 33 BF 00 
     921.  00:8C4A                      TCNEW_0:	db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
     921.  00:8C4A  1D 21 23 27 2B 2D 31 55 
     922.  00:8C52  BD BF 00            		db $BC+1,$BE+1,0
     923.  00:8C55                      TCNEW_2:	db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
     923.  00:8C55  1B 21 25 29 2B 3B 4D 5F 
     924.  00:8C5D  BB BD BF            		db $BA+1,$BC+1,$BE+1
     925.  00:8C60                      
     926.  00:8C60  00 01 00 90         EMPTYSAMORN: 	db 0,1,0,$90 ;delete $90 if you don't need default sample
     927.  00:8C64                      
     928.  00:8C64                      T_PACK:		; First 12 values of tone tables (packed)
     929.  00:8C64  0D                  		db ($06EC*2)/256
     930.  00:8C65  D8                  		db #d8
     931.  00:8C66  69                  		db $0755-$06EC
     932.  00:8C67  70                  		db $07C5-$0755
     933.  00:8C68  76                  		db $083B-$07C5
     934.  00:8C69  7D                  		db $08B8-$083B
     935.  00:8C6A  85                  		db $093D-$08B8
     936.  00:8C6B  8D                  		db $09CA-$093D
     937.  00:8C6C  95                  		db $0A5F-$09CA
     938.  00:8C6D  9D                  		db $0AFC-$0A5F
     939.  00:8C6E  A8                  		db $0BA4-$0AFC
     940.  00:8C6F  B1                  		db $0C55-$0BA4
     941.  00:8C70  BB                  		db $0D10-$0C55
     942.  00:8C71  0C                  		db ($066D*2)/256
     943.  00:8C72  DA                  		db #da
     944.  00:8C73  62                  		db $06CF-$066D
     945.  00:8C74  68                  		db $0737-$06CF
     946.  00:8C75  6D                  		db $07A4-$0737
     947.  00:8C76  75                  		db $0819-$07A4
     948.  00:8C77  7B                  		db $0894-$0819
     949.  00:8C78  83                  		db $0917-$0894
     950.  00:8C79  8A                  		db $09A1-$0917
     951.  00:8C7A  92                  		db $0A33-$09A1
     952.  00:8C7B  9C                  		db $0ACF-$0A33
     953.  00:8C7C  A4                  		db $0B73-$0ACF
     954.  00:8C7D  AF                  		db $0C22-$0B73
     955.  00:8C7E  B8                  		db $0CDA-$0C22
     956.  00:8C7F  0E                  		db ($0704*2)/256
     957.  00:8C80  08                  		db #08
     958.  00:8C81  6A                  		db $076E-$0704
     959.  00:8C82  72                  		db $07E0-$076E
     960.  00:8C83  78                  		db $0858-$07E0
     961.  00:8C84  7E                  		db $08D6-$0858
     962.  00:8C85  86                  		db $095C-$08D6
     963.  00:8C86  90                  		db $09EC-$095C
     964.  00:8C87  96                  		db $0A82-$09EC
     965.  00:8C88  A0                  		db $0B22-$0A82
     966.  00:8C89  AA                  		db $0BCC-$0B22
     967.  00:8C8A  B4                  		db $0C80-$0BCC
     968.  00:8C8B  BE                  		db $0D3E-$0C80
     969.  00:8C8C  0F                  		db ($07E0*2)/256
     970.  00:8C8D  C0                  		db #c0
     971.  00:8C8E  78                  		db $0858-$07E0
     972.  00:8C8F  88                  		db $08E0-$0858
     973.  00:8C90  80                  		db $0960-$08E0
     974.  00:8C91  90                  		db $09F0-$0960
     975.  00:8C92  98                  		db $0A88-$09F0
     976.  00:8C93  A0                  		db $0B28-$0A88
     977.  00:8C94  B0                  		db $0BD8-$0B28
     978.  00:8C95  A8                  		db $0C80-$0BD8
     979.  00:8C96  E0                  		db $0D60-$0C80
     980.  00:8C97  B0                  		db $0E10-$0D60
     981.  00:8C98  E8                  		db $0EF8-$0E10
     176   00:8C99                      	include "ayFX-ROM_sjasm.asm"
       1.  00:8C99                      		; --- ayFX REPLAYER v1.31 ---
       2.  00:8C99                      
       3.  00:8C99                      		; --- v1.31	Fixed bug on previous version, only PSG channel C worked
       4.  00:8C99                      		; --- v1.3	Fixed volume and Relative volume versions on the same file, conditional compilation
       5.  00:8C99                      		; ---		Support for dynamic or fixed channel allocation
       6.  00:8C99                      		; --- v1.2f/r	ayFX bank support
       7.  00:8C99                      		; --- v1.11f/r	If a frame volume is zero then no AYREGS update
       8.  00:8C99                      		; --- v1.1f/r	Fixed volume for all ayFX streams
       9.  00:8C99                      		; --- v1.1	Explicit priority (as suggested by AR)
      10.  00:8C99                      		; --- v1.0f	Bug fixed (error when using noise)
      11.  00:8C99                      		; --- v1.0	Initial release
      12.  00:8C99                      
      13.  00:8C99                      		; --- DEFINE AYFXRELATIVE AS 0 FOR FIXED VOLUME VERSION ---
      14.  00:8C99                      		; --- DEFINE AYFXRELATIVE AS 1 FOR RELATIVE VOLUME VERSION ---
      15.  00:8C99  (00:0000)           AYFXRELATIVE equ 0
      16.  00:8C99                      
      17.  00:8C99                      ayFX_SETUP:	; ---          ayFX replayer setup          ---
      18.  00:8C99                      		; --- INPUT: HL -> pointer to the ayFX bank ---
      19.  00:8C99  22 41 F2            		ld	[ayFX_BANK],hl			; Current ayFX bank
      20.  00:8C9C  3E 01               		ld	a,1				; a:=0
      21.  00:8C9E  32 40 F2            		ld	[ayFX_MODE],a			; Initial mode: fixed channel
      22.  00:8CA1  3C                  		inc	a				; Starting channel (=1)
      23.  00:8CA2  32 4A F2            		ld	[ayFX_CHANNEL],a		; Updated
      24.  00:8CA5                      ayFX_END:	; --- End of an ayFX stream ---
      25.  00:8CA5  3E FF               		ld	a,255				; Lowest ayFX priority
      26.  00:8CA7  32 43 F2            		ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      27.  00:8CAA  C9                  		ret					; Return
      28.  00:8CAB                      
      29.  00:8CAB                      ayFX_INIT:	; ---     INIT A NEW ayFX STREAM     ---
      30.  00:8CAB                      		; --- INPUT: A -> sound to be played ---
      31.  00:8CAB                      		; ---        C -> sound priority     ---
      32.  00:8CAB  C5                  		push	bc				; Store bc in stack
      33.  00:8CAC  D5                  		push	de				; Store de in stack
      34.  00:8CAD  E5                  		push	hl				; Store hl in stack
      35.  00:8CAE                      		; --- Check if the index is in the bank ---
      36.  00:8CAE  47                  		ld	b,a				; b:=a (new ayFX stream index)
      37.  00:8CAF  2A 41 F2            		ld	hl,[ayFX_BANK]			; Current ayFX BANK
      38.  00:8CB2  7E                  		ld	a,[hl]				; Number of samples in the bank
      39.  00:8CB3  B7                  		or	a				; If zero (means 256 samples)...
      40.  00:8CB4  28 06               		jr	z,.CHECK_PRI			; ...goto .CHECK_PRI
      41.  00:8CB6                      		; The bank has less than 256 samples
      42.  00:8CB6  78                  		ld	a,b				; a:=b (new ayFX stream index)
      43.  00:8CB7  BE                  		cp	[hl]				; If new index is not in the bank...
      44.  00:8CB8  3E 02               		ld	a,2				; a:=2 (error 2: Sample not in the bank)
      45.  00:8CBA  30 21               		jr	nc,.INIT_END			; ...we can't init it
      46.  00:8CBC                      .CHECK_PRI:	; --- Check if the new priority is lower than the current one ---
      47.  00:8CBC                      		; ---   Remember: 0 = highest priority, 15 = lowest priority  ---
      48.  00:8CBC  78                  		ld	a,b				; a:=b (new ayFX stream index)
      49.  00:8CBD  3A 43 F2            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
      50.  00:8CC0  B9                  		cp	c				; If new ayFX stream priority is lower than current one...
      51.  00:8CC1  3E 01               		ld	a,1				; a:=1 (error 1: A sample with higher priority is being played)
      52.  00:8CC3  38 18               		jr	c,.INIT_END			; ...we don't start the new ayFX stream
      53.  00:8CC5                      		; --- Set new priority ---
      54.  00:8CC5  79                  		ld	a,c				; a:=New priority
      55.  00:8CC6  E6 0F               		and	$0F				; We mask the priority
      56.  00:8CC8  32 43 F2            		ld	[ayFX_PRIORITY],a		; new ayFX stream priority saved in RAM
      57.  00:8CCB                      
      58.  00:8CCB                      		IF ( AYFXRELATIVE == 1 )
      59.  00:8CCB                    ~ 			; --- Volume adjust using PT3 volume table ---
      60.  00:8CCB                    ~ 			ld	c,a				; c:=New priority (fixed)
      61.  00:8CCB                    ~ 			ld	a,15				; a:=15
      62.  00:8CCB                    ~ 			sub	c				; a:=15-New priority = relative volume
      63.  00:8CCB                    ~ 			jr	z,.INIT_NOSOUND		; If priority is 15 -> no sound output (volume is zero)
      64.  00:8CCB                    ~ 			add	a,a				; a:=a*2
      65.  00:8CCB                    ~ 			add	a,a				; a:=a*4
      66.  00:8CCB                    ~ 			add	a,a				; a:=a*8
      67.  00:8CCB                    ~ 			add	a,a				; a:=a*16
      68.  00:8CCB                    ~ 			ld	e,a				; e:=a
      69.  00:8CCB                    ~ 			ld	d,0				; de:=a
      70.  00:8CCB                    ~ 			ld	hl,VT_				; hl:=PT3 volume table
      71.  00:8CCB                    ~ 			add	hl,de				; hl is a pointer to the relative volume table
      72.  00:8CCB                    ~ 			ld	[ayFX_VT],hl			; Save pointer
      73.  00:8CCB                    ~ 		ENDIF
      74.  00:8CCB                      
      75.  00:8CCB                      		; --- Calculate the pointer to the new ayFX stream ---
      76.  00:8CCB  ED 5B 41 F2         		ld	de,[ayFX_BANK]			; de:=Current ayFX bank
      77.  00:8CCF  13                  		inc	de				; de points to the increments table of the bank
      78.  00:8CD0  68                  		ld	l,b				; l:=b (new ayFX stream index)
      79.  00:8CD1  26 00               		ld	h,0				; hl:=b (new ayFX stream index)
      80.  00:8CD3  29                  		add	hl,hl				; hl:=hl*2
      81.  00:8CD4  19                  		add	hl,de				; hl:=hl+de (hl points to the correct increment)
      82.  00:8CD5  5E                  		ld	e,[hl]				; e:=lower byte of the increment
      83.  00:8CD6  23                  		inc	hl				; hl points to the higher byte of the correct increment
      84.  00:8CD7  56                  		ld	d,[hl]				; de:=increment
      85.  00:8CD8  19                  		add	hl,de				; hl:=hl+de (hl points to the new ayFX stream)
      86.  00:8CD9  22 44 F2            		ld	[ayFX_POINTER],hl		; Pointer saved in RAM
      87.  00:8CDC  AF                  		xor	a				; a:=0 (no errors)
      88.  00:8CDD  E1                  .INIT_END:	pop	hl				; Retrieve hl from stack
      89.  00:8CDE  D1                  		pop	de				; Retrieve de from stack
      90.  00:8CDF  C1                  		pop	bc				; Retrieve bc from stack
      91.  00:8CE0  C9                  		ret					; Return
      92.  00:8CE1                      
      93.  00:8CE1                      		IF ( AYFXRELATIVE == 1 )
      94.  00:8CE1                    ~ .INIT_NOSOUND:	; --- Init a sample with relative volume zero -> no sound output ---
      95.  00:8CE1                    ~ 			ld	a,255				; Lowest ayFX priority
      96.  00:8CE1                    ~ 			ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      97.  00:8CE1                    ~ 			jr	.INIT_END			; Jumps to .INIT_END
      98.  00:8CE1                    ~ 		ENDIF
      99.  00:8CE1                      
     100.  00:8CE1                      ayFX_PLAY:	; --- PLAY A FRAME OF AN ayFX STREAM ---
     101.  00:8CE1  3A 43 F2            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
     102.  00:8CE4  B7                  		or	a				; If priority has bit 7 on...
     103.  00:8CE5  F8                  		ret	m				; ...return
     104.  00:8CE6                      		; --- Calculate next ayFX channel (if needed) ---
     105.  00:8CE6  3A 40 F2            		ld	a,[ayFX_MODE]			; ayFX mode
     106.  00:8CE9  E6 01               		and	1				; If bit0=0 (fixed channel)...
     107.  00:8CEB  28 08               		jr	z,.TAKECB			; ...skip channel changing
     108.  00:8CED  21 4A F2            		ld	hl,ayFX_CHANNEL			; Old ayFX playing channel
     109.  00:8CF0  35                  		dec	[hl]				; New ayFX playing channel
     110.  00:8CF1  20 02               		jr	nz,.TAKECB			; If not zero jump to .TAKECB
     111.  00:8CF3  36 03               		ld	[hl],3				; If zero -> set channel 3
     112.  00:8CF5                      .TAKECB:	; --- Extract control byte from stream ---
     113.  00:8CF5  2A 44 F2            		ld	hl,[ayFX_POINTER]		; Pointer to the current ayFX stream
     114.  00:8CF8  4E                  		ld	c,[hl]				; c:=Control byte
     115.  00:8CF9  23                  		inc	hl				; Increment pointer
     116.  00:8CFA                      		; --- Check if there's new tone on stream ---
     117.  00:8CFA  CB 69               		bit	5,c				; If bit 5 c is off...
     118.  00:8CFC  28 08               		jr	z,.CHECK_NN			; ...jump to .CHECK_NN (no new tone)
     119.  00:8CFE                      		; --- Extract new tone from stream ---
     120.  00:8CFE  5E                  		ld	e,[hl]				; e:=lower byte of new tone
     121.  00:8CFF  23                  		inc	hl				; Increment pointer
     122.  00:8D00  56                  		ld	d,[hl]				; d:=higher byte of new tone
     123.  00:8D01  23                  		inc	hl				; Increment pointer
     124.  00:8D02  ED 53 46 F2         		ld	[ayFX_TONE],de			; ayFX tone updated
     125.  00:8D06                      .CHECK_NN:	; --- Check if there's new noise on stream ---
     126.  00:8D06  CB 71               		bit	6,c				; if bit 6 c is off...
     127.  00:8D08  28 09               		jr	z,.SETPOINTER			; ...jump to .SETPOINTER (no new noise)
     128.  00:8D0A                      		; --- Extract new noise from stream ---
     129.  00:8D0A  7E                  		ld	a,[hl]				; a:=New noise
     130.  00:8D0B  23                  		inc	hl				; Increment pointer
     131.  00:8D0C  FE 20               		cp	$20				; If it's an illegal value of noise (used to mark end of stream)...
     132.  00:8D0E  28 95               		jr.	z,ayFX_END			; ...jump to ayFX_END
     133.  00:8D10  32 48 F2            		ld	[ayFX_NOISE],a			; ayFX noise updated
     134.  00:8D13                      .SETPOINTER:	; --- Update ayFX pointer ---
     135.  00:8D13  22 44 F2            		ld	[ayFX_POINTER],hl		; Update ayFX stream pointer
     136.  00:8D16                      		; --- Extract volume ---
     137.  00:8D16  79                  		ld	a,c				; a:=Control byte
     138.  00:8D17  E6 0F               		and	$0F				; lower nibble
     139.  00:8D19                      
     140.  00:8D19                      		IF ( AYFXRELATIVE == 1 )
     141.  00:8D19                    ~ 			; --- Fix the volume using PT3 Volume Table ---
     142.  00:8D19                    ~ 			ld	hl,[ayFX_VT]			; hl:=Pointer to relative volume table
     143.  00:8D19                    ~ 			ld	e,a				; e:=a (ayFX volume)
     144.  00:8D19                    ~ 			ld	d,0				; d:=0
     145.  00:8D19                    ~ 			add	hl,de				; hl:=hl+de (hl points to the relative volume of this frame
     146.  00:8D19                    ~ 			ld	a,[hl]				; a:=ayFX relative volume
     147.  00:8D19                    ~ 			or	a				; If relative volume is zero...
     148.  00:8D19                    ~ 		ENDIF
     149.  00:8D19                      
     150.  00:8D19  32 49 F2            		ld	[ayFX_VOLUME],a			; ayFX volume updated
     151.  00:8D1C  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     152.  00:8D1D                      		; -------------------------------------
     153.  00:8D1D                      		; --- COPY ayFX VALUES IN TO AYREGS ---
     154.  00:8D1D                      		; -------------------------------------
     155.  00:8D1D                      		; --- Set noise channel ---
     156.  00:8D1D  CB 79               		bit	7,c				; If noise is off...
     157.  00:8D1F  20 06               		jr	nz,.SETMASKS			; ...jump to .SETMASKS
     158.  00:8D21  3A 48 F2            		ld	a,[ayFX_NOISE]			; ayFX noise value
     159.  00:8D24  32 46 F1            		ld	[AYREGS+6],a			; copied in to AYREGS (noise channel)
     160.  00:8D27                      .SETMASKS:	; --- Set mixer masks ---
     161.  00:8D27  79                  		ld	a,c				; a:=Control byte
     162.  00:8D28  E6 90               		and	$90				; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     163.  00:8D2A  FE 90               		cp	$90				; If no noise and no tone...
     164.  00:8D2C  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     165.  00:8D2D                      		; --- Copy ayFX values in to ARYREGS ---
     166.  00:8D2D  0F                  		rrca					; Rotate a to the right (1 TIME)
     167.  00:8D2E  0F                  		rrca					; Rotate a to the right (2 TIMES) (OR mask)
     168.  00:8D2F  16 DB               		ld	d,$DB				; d:=Mask for psg mixer (AND mask)
     169.  00:8D31                      		; --- Dump to correct channel ---
     170.  00:8D31  21 4A F2            		ld	hl,ayFX_CHANNEL			; Next ayFX playing channel
     171.  00:8D34  46                  		ld	b,[hl]				; Channel counter
     172.  00:8D35                      .CHK1:		; --- Check if playing channel was 1 ---
     173.  00:8D35  10 0D               		djnz	.CHK2				; Decrement and jump if channel was not 1
     174.  00:8D37                      .PLAY_C:	; --- Play ayFX stream on channel C ---
     175.  00:8D37  CD 66 8D            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     176.  00:8D3A  32 4A F1            		ld	[AYREGS+10],a			; Volume copied in to AYREGS (channel C volume)
     177.  00:8D3D  CB 51               		bit	2,c				; If tone is off...
     178.  00:8D3F  C0                  		ret	nz				; ...return
     179.  00:8D40  22 44 F1            		ld	[AYREGS+4],hl			; copied in to AYREGS (channel C tone)
     180.  00:8D43  C9                  		ret					; Return
     181.  00:8D44                      .CHK2:		; --- Check if playing channel was 2 ---
     182.  00:8D44  CB 0A               		rrc	d				; Rotate right AND mask
     183.  00:8D46  0F                  		rrca					; Rotate right OR mask
     184.  00:8D47  10 0D               		djnz	.CHK3				; Decrement and jump if channel was not 2
     185.  00:8D49                      .PLAY_B:	; --- Play ayFX stream on channel B ---
     186.  00:8D49  CD 66 8D            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     187.  00:8D4C  32 49 F1            		ld	[AYREGS+9],a			; Volume copied in to AYREGS (channel B volume)
     188.  00:8D4F  CB 49               		bit	1,c				; If tone is off...
     189.  00:8D51  C0                  		ret	nz				; ...return
     190.  00:8D52  22 42 F1            		ld	[AYREGS+2],hl			; copied in to AYREGS (channel B tone)
     191.  00:8D55  C9                  		ret					; Return
     192.  00:8D56                      .CHK3:		; --- Check if playing channel was 3 ---
     193.  00:8D56  CB 0A               		rrc	d				; Rotate right AND mask
     194.  00:8D58  0F                  		rrca					; Rotate right OR mask
     195.  00:8D59                      .PLAY_A:	; --- Play ayFX stream on channel A ---
     196.  00:8D59  CD 66 8D            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     197.  00:8D5C  32 48 F1            		ld	[AYREGS+8],a			; Volume copied in to AYREGS (channel A volume)
     198.  00:8D5F  CB 41               		bit	0,c				; If tone is off...
     199.  00:8D61  C0                  		ret	nz				; ...return
     200.  00:8D62  22 40 F1            		ld	[AYREGS+0],hl			; copied in to AYREGS (channel A tone)
     201.  00:8D65  C9                  		ret					; Return
     202.  00:8D66                      .SETMIXER:	; --- Set PSG mixer value ---
     203.  00:8D66  4F                  		ld	c,a				; c:=OR mask
     204.  00:8D67  3A 47 F1            		ld	a,[AYREGS+7]			; a:=PSG mixer value
     205.  00:8D6A  A2                  		and	d				; AND mask
     206.  00:8D6B  B1                  		or	c				; OR mask
     207.  00:8D6C  32 47 F1            		ld	[AYREGS+7],a			; PSG mixer value updated
     208.  00:8D6F  3A 49 F2            		ld	a,[ayFX_VOLUME]			; a:=ayFX volume value
     209.  00:8D72  2A 46 F2            		ld	hl,[ayFX_TONE]			; ayFX tone value
     210.  00:8D75  C9                  		ret					; Return
     211.  00:8D76                      
     212.  00:8D76                      		IF ( AYFXRELATIVE == 1 )
     213.  00:8D76                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     214.  00:8D76                    ~ 		;VT_:	.INCBIN	"VT.BIN"
     215.  00:8D76                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     216.  00:8D76                    ~ 		ENDIF
     177   00:8D76                      	
     178   00:8D76                      ;;=====================================================
     179   00:8D76                      ;;DEFINICIÓN DE ESTRUCTURAS
     180   00:8D76                      ;;=====================================================		
     181   00:8D76                      	include "estructuras.asm"
       1.  00:8D76                      ;;=====================================================
       2.  00:8D76                      ;;DEFINICIÓN DE ESTRUCTURAS
       3.  00:8D76                      ;;=====================================================
       4.  00:8D76                      
       5.  00:8D76                      ;crear estructura
       6.  00:8D76                      
       7.  00:8D76                      	STRUCT ESTRUCTURA_PUNTOMIRA
       8.  00:8D76                    < posx			DB		100
       9.  00:8D76                    < posy			DB		100
      10.  00:8D76                    < escena			DB		0	;valores porsibles 0 (blanco+rojo en punto de mira) y NEG 0 (al revés)
      11.  00:8D76                    < velocidad		DB		0
      12.  00:8D76                    < boton2_pressed  DB		0
      13.  00:8D76                    < ; al final he decidido (ya que el punto de mira es el prota) que lo relacionado con el prota vaya en esta estructura
      14.  00:8D76                    < pm_aux1			DB		0	;para llegar a los 16 campos
      15.  00:8D76                    < pm_aux2			DB		0	;para llegar a los 16 campos
      16.  00:8D76                    < pm_aux3			DB		0	;para llegar a los 16 campos
      17.  00:8D76                    < pm_aux4			DB		0	;para llegar a los 16 campos
      18.  00:8D76                    < pm_aux5			DB		0	;para llegar a los 16 campos
      19.  00:8D76                    < pm_aux6			DB		0	;para llegar a los 16 campos
      20.  00:8D76                    < pm_aux7			DB		0	;para llegar a los 16 campos
      21.  00:8D76                    < pm_aux8			DB		0	;para llegar a los 16 campos
      22.  00:8D76                    < pm_aux9			DB		0	;para llegar a los 16 campos
      23.  00:8D76                    < pm_aux10		DB		0	;para llegar a los 16 campos
      24.  00:8D76                    < pm_aux11		DB		0	;para llegar a los 16 campos
      25.  00:8D76                    < 	ENDSTRUCT;ESTRUCTURA_PUNTOMIRA
      26.  00:8D76                      
      27.  00:8D76                      	
      28.  00:8D76                      	STRUCT ESTRUCTURA_ENEMIGO
      29.  00:8D76                    < tipo				DB		0	;(0 serpiente por ejemplo) #FF muerto o no existe
      30.  00:8D76                    < posx				DB		5
      31.  00:8D76                    < posy				DB		50
      32.  00:8D76                    < color				DB		5
      33.  00:8D76                    < escena				DB		0
      34.  00:8D76                    < contador_siguiente_escena	DB	0
      35.  00:8D76                    < reset_contador		DB		0
      36.  00:8D76                    < dano				DB		0	;daño
      37.  00:8D76                    < energia				DB		0	;energía del enemigo... si llega a 0 => existe <- 0
      38.  00:8D76                    < ;indica el nº de sprite a mostrar y si está compuesto por uno o dos sprites y si están en horizontal o vertical
      39.  00:8D76                    < ver_hor				DB		0
      40.  00:8D76                    < manejador_dibujo 	DW		0
      41.  00:8D76                    < en_aux3				DB		0
      42.  00:8D76                    < en_aux4				DB		0
      43.  00:8D76                    < 	ENDSTRUCT;ESTRUCTURA_ENEMIGO
      44.  00:8D76                      	
      45.  00:8D76                      	STRUCT ESTRUCTURA_EXTRA		;vidas extra, plantas de curación de energía, reliquias	
      46.  00:8D76                    < tipo				DB		0	;#FF muerto/usado o no existe
      47.  00:8D76                    < posx				DB		50
      48.  00:8D76                    < posy				DB		50
      49.  00:8D76                    < color				DB		5
      50.  00:8D76                    < contador			DB		0	;por si doy dos reliquias en vez de una, por ejemplo
      51.  00:8D76                    < en_aux1				DB		0	;para llegar a los 16 campos
      52.  00:8D76                    < en_aux2				DB		0
      53.  00:8D76                    < en_aux3				DB		0
      54.  00:8D76                    < en_aux4				DB		0
      55.  00:8D76                    < en_aux5				DB		0
      56.  00:8D76                    < en_aux6				DB		0
      57.  00:8D76                    < en_aux7				DB		0
      58.  00:8D76                    < en_aux8				DB		0
      59.  00:8D76                    < en_aux9				DB		0
      60.  00:8D76                    < en_aux10			DB		0
      61.  00:8D76                    < en_aux11			DB		0
      62.  00:8D76                    < 	ENDSTRUCT;ESTRUCTURA_EXTRA
      63.  00:8D76                      
      64.  00:8D76                      
      65.  00:8D76                      
      66.  00:8D76                      
      67.  00:8D76                      
      68.  00:8D76                      
      69.  00:8D76                      
     182   00:8D76                      	
     183   00:8D76                      ;;=====================================================
     184   00:8D76                      ;;DEFINICIÓN DE VARIABLES
     185   00:8D76                      ;;=====================================================		
     186   00:8D76                      	include "sprites.asm"
       1.  00:8D76                      ;;=====================================================
       2.  00:8D76                      ;;DEFINICIÓN DE SPRITES
       3.  00:8D76                      ;;=====================================================	
       4.  00:8D76                      sprites_pantantalla:
       5.  00:8D76                      
       6.  00:8D76                      sprite_punto_mira_1:	;color 8
       7.  00:8D76                      	db #FF,#FF,#C0,#C0,#C0,#C0,#C0,#C0
       7.  00:8D76  FF FF C0 C0 C0 C0 C0 C0 
       8.  00:8D7E                      	db #C0,#C0,#C0,#C0,#C0,#C0,#FF,#FF
       8.  00:8D7E  C0 C0 C0 C0 C0 C0 FF FF 
       9.  00:8D86                      	db #FF,#FF,#03,#03,#03,#03,#03,#03
       9.  00:8D86  FF FF 03 03 03 03 03 03 
      10.  00:8D8E                      	db #03,#03,#03,#03,#03,#03,#FF,#FF
      10.  00:8D8E  03 03 03 03 03 03 FF FF 
      11.  00:8D96                      	
      12.  00:8D96                      sprite_punto_mira_2: 	;color 15
      13.  00:8D96                      	db #00,#00,#00,#00,#0F,#0F,#0C,#0C
      13.  00:8D96  00 00 00 00 0F 0F 0C 0C 
      14.  00:8D9E                      	db #0C,#0C,#0F,#0F,#00,#00,#00,#00
      14.  00:8D9E  0C 0C 0F 0F 00 00 00 00 
      15.  00:8DA6                      	db #00,#00,#00,#00,#F0,#F0,#30,#30
      15.  00:8DA6  00 00 00 00 F0 F0 30 30 
      16.  00:8DAE                      	db #30,#30,#F0,#F0,#00,#00,#00,#00
      16.  00:8DAE  30 30 F0 F0 00 00 00 00 
      17.  00:8DB6                      	
      18.  00:8DB6                      sprite_punto_mira_1_mejorado:
      19.  00:8DB6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      19.  00:8DB6  FF FF FF FF FF FF FF FF 
      20.  00:8DBE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      20.  00:8DBE  FF FF FF FF FF FF FF FF 
      21.  00:8DC6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      21.  00:8DC6  FF FF FF FF FF FF FF FF 
      22.  00:8DCE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      22.  00:8DCE  FF FF FF FF FF FF FF FF 
      23.  00:8DD6                      
      24.  00:8DD6                      sprite_punto_mira_2_mejorado:
      25.  00:8DD6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      25.  00:8DD6  FF FF FF FF FF FF FF FF 
      26.  00:8DDE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      26.  00:8DDE  FF FF FF FF FF FF FF FF 
      27.  00:8DE6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      27.  00:8DE6  FF FF FF FF FF FF FF FF 
      28.  00:8DEE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      28.  00:8DEE  FF FF FF FF FF FF FF FF 
      29.  00:8DF6                      	
      30.  00:8DF6                      sprite_reliquia:
      31.  00:8DF6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      31.  00:8DF6  FF FF FF FF FF FF FF FF 
      32.  00:8DFE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      32.  00:8DFE  FF FF FF FF FF FF FF FF 
      33.  00:8E06                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      33.  00:8E06  FF FF FF FF FF FF FF FF 
      34.  00:8E0E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      34.  00:8E0E  FF FF FF FF FF FF FF FF 
      35.  00:8E16                      	
      36.  00:8E16                      sprite_vida_extra:
      37.  00:8E16                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      37.  00:8E16  FF FF FF FF FF FF FF FF 
      38.  00:8E1E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      38.  00:8E1E  FF FF FF FF FF FF FF FF 
      39.  00:8E26                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      39.  00:8E26  FF FF FF FF FF FF FF FF 
      40.  00:8E2E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      40.  00:8E2E  FF FF FF FF FF FF FF FF 
      41.  00:8E36                      	
      42.  00:8E36                      sprite_planta:
      43.  00:8E36                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      43.  00:8E36  FF FF FF FF FF FF FF FF 
      44.  00:8E3E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      44.  00:8E3E  FF FF FF FF FF FF FF FF 
      45.  00:8E46                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      45.  00:8E46  FF FF FF FF FF FF FF FF 
      46.  00:8E4E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      46.  00:8E4E  FF FF FF FF FF FF FF FF 
      47.  00:8E56                      	
      48.  00:8E56                      sprite_ballesta_mejorada:
      49.  00:8E56                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      49.  00:8E56  FF FF FF FF FF FF FF FF 
      50.  00:8E5E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      50.  00:8E5E  FF FF FF FF FF FF FF FF 
      51.  00:8E66                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      51.  00:8E66  FF FF FF FF FF FF FF FF 
      52.  00:8E6E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF	
      52.  00:8E6E  FF FF FF FF FF FF FF FF 
      53.  00:8E76                      	
      54.  00:8E76                      sprite_ciempies1:
      55.  00:8E76                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      55.  00:8E76  FF FF FF FF FF FF FF FF 
      56.  00:8E7E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      56.  00:8E7E  FF FF FF FF FF FF FF FF 
      57.  00:8E86                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      57.  00:8E86  FF FF FF FF FF FF FF FF 
      58.  00:8E8E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      58.  00:8E8E  FF FF FF FF FF FF FF FF 
      59.  00:8E96                      	
      60.  00:8E96                      sprite_ciempies2:
      61.  00:8E96                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      61.  00:8E96  FF FF FF FF FF FF FF FF 
      62.  00:8E9E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      62.  00:8E9E  FF FF FF FF FF FF FF FF 
      63.  00:8EA6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      63.  00:8EA6  FF FF FF FF FF FF FF FF 
      64.  00:8EAE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      64.  00:8EAE  FF FF FF FF FF FF FF FF 
      65.  00:8EB6                      	
      66.  00:8EB6                      sprite_arana1:
      67.  00:8EB6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      67.  00:8EB6  FF FF FF FF FF FF FF FF 
      68.  00:8EBE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      68.  00:8EBE  FF FF FF FF FF FF FF FF 
      69.  00:8EC6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      69.  00:8EC6  FF FF FF FF FF FF FF FF 
      70.  00:8ECE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      70.  00:8ECE  FF FF FF FF FF FF FF FF 
      71.  00:8ED6                      	
      72.  00:8ED6                      sprite_arana2:
      73.  00:8ED6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      73.  00:8ED6  FF FF FF FF FF FF FF FF 
      74.  00:8EDE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      74.  00:8EDE  FF FF FF FF FF FF FF FF 
      75.  00:8EE6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      75.  00:8EE6  FF FF FF FF FF FF FF FF 
      76.  00:8EEE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      76.  00:8EEE  FF FF FF FF FF FF FF FF 
      77.  00:8EF6                      	
      78.  00:8EF6                      sprite_serpiente1:
      79.  00:8EF6                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      79.  00:8EF6  FF FF FF FF FF FF FF FF 
      80.  00:8EFE                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      80.  00:8EFE  FF FF FF FF FF FF FF FF 
      81.  00:8F06                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      81.  00:8F06  FF FF FF FF FF FF FF FF 
      82.  00:8F0E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      82.  00:8F0E  FF FF FF FF FF FF FF FF 
      83.  00:8F16                      	
      84.  00:8F16                      sprite_serpiente2:
      85.  00:8F16                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      85.  00:8F16  FF FF FF FF FF FF FF FF 
      86.  00:8F1E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      86.  00:8F1E  FF FF FF FF FF FF FF FF 
      87.  00:8F26                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      87.  00:8F26  FF FF FF FF FF FF FF FF 
      88.  00:8F2E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      88.  00:8F2E  FF FF FF FF FF FF FF FF 
      89.  00:8F36                      	
      90.  00:8F36                      sprite_murcielago1:
      91.  00:8F36                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      91.  00:8F36  FF FF FF FF FF FF FF FF 
      92.  00:8F3E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      92.  00:8F3E  FF FF FF FF FF FF FF FF 
      93.  00:8F46                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      93.  00:8F46  FF FF FF FF FF FF FF FF 
      94.  00:8F4E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      94.  00:8F4E  FF FF FF FF FF FF FF FF 
      95.  00:8F56                      	
      96.  00:8F56                      sprite_murcielago2:
      97.  00:8F56                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      97.  00:8F56  FF FF FF FF FF FF FF FF 
      98.  00:8F5E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      98.  00:8F5E  FF FF FF FF FF FF FF FF 
      99.  00:8F66                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
      99.  00:8F66  FF FF FF FF FF FF FF FF 
     100.  00:8F6E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF	
     100.  00:8F6E  FF FF FF FF FF FF FF FF 
     101.  00:8F76                      
     102.  00:8F76                      sprite_explosion:
     103.  00:8F76                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
     103.  00:8F76  FF FF FF FF FF FF FF FF 
     104.  00:8F7E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
     104.  00:8F7E  FF FF FF FF FF FF FF FF 
     105.  00:8F86                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
     105.  00:8F86  FF FF FF FF FF FF FF FF 
     106.  00:8F8E                      	db  #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
     106.  00:8F8E  FF FF FF FF FF FF FF FF 
     107.  00:8F96                      	
     108.  00:8F96                      	
     109.  00:8F96                      	
     187   00:8F96                      	
     188   00:8F96                      	include "habitaciones.asm"
       1.  00:8F96                      ;;=====================================================
       2.  00:8F96                      ;;DEFINICIÓN DE HABITACIONES x NIVEL
       3.  00:8F96                      ;;=====================================================	
       4.  00:8F96                      
       5.  00:8F96                      ; sólo voy a usar 7x7 pero como los arrays son lineales y voy a trabajar con matrices
       6.  00:8F96                      ; me interesa que seande  8x8 aunque sólo trabaje con 7x7
       7.  00:8F96                      
       8.  00:8F96                      ; ojo... la primera linea corresponderá a la primera linea del castillo no a la última
       9.  00:8F96                      
      10.  00:8F96                      ;; definición de estructura de bits
      11.  00:8F96                      ;16 bits por habitación
      12.  00:8F96                      ;~ 0000 - nº puertas 1 arriba 1 derecha 1 abajo 1 izquierda
      13.  00:8F96                      ;~ 1 - hay reliquia?
      14.  00:8F96                      ;~ 1 - hay vida extra
      15.  00:8F96                      ;~ 1 - hay arma extra (durará 6 pantallas - sonido distinto)
      16.  00:8F96                      ;~ 1 - hay energía? (sobran bits ... se puede usar otro como carga energía +)
      17.  00:8F96                      ;~ 1 - es pantalla de mostruo fin de fase?
      18.  00:8F96                      ;~ 1 - es pantalla inicial (equivaldría a la puerta de un castillo)?
      19.  00:8F96                      ;~ 1 - es pantalla final?
      20.  00:8F96                      
      21.  00:8F96                      
      22.  00:8F96                      ;importante: el byte de la columna 15 indicará con 1 y 0 habitaciones por las que se haya pasado
      23.  00:8F96                      ;cuando se inicie la partida todos se pondrán a 0
      24.  00:8F96                      
      25.  00:8F96                      habitacion_actual:
      26.  00:8F96  00 00               	db  #00,#00		;habitación donde se encuentre el prota. Se mete en una varible par traer todos los datos de golpe y no buscrlos varias veces
      27.  00:8F98                      
      28.  00:8F98                      habitaciones_juego:
      29.  00:8F98                      habitaciones_nivel0:
      30.  00:8F98                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      30.  00:8F98  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      31.  00:8FA8                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      31.  00:8FA8  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      32.  00:8FB8                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      32.  00:8FB8  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      33.  00:8FC8                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      33.  00:8FC8  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      34.  00:8FD8                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      34.  00:8FD8  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      35.  00:8FE8                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      35.  00:8FE8  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      36.  00:8FF8                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      36.  00:8FF8  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      37.  00:9008                      	
      38.  00:9008                      habitaciones_nivel1:
      39.  00:9008                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      39.  00:9008  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      40.  00:9018                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      40.  00:9018  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      41.  00:9028                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      41.  00:9028  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      42.  00:9038                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      42.  00:9038  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      43.  00:9048                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      43.  00:9048  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      44.  00:9058                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      44.  00:9058  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      45.  00:9068                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      45.  00:9068  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      46.  00:9078                      	
      47.  00:9078                      habitaciones_nivel2:
      48.  00:9078                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      48.  00:9078  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      49.  00:9088                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      49.  00:9088  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      50.  00:9098                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      50.  00:9098  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      51.  00:90A8                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      51.  00:90A8  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      52.  00:90B8                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      52.  00:90B8  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      53.  00:90C8                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      53.  00:90C8  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      54.  00:90D8                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      54.  00:90D8  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      55.  00:90E8                      	
      56.  00:90E8                      habitaciones_nivel3:
      57.  00:90E8                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      57.  00:90E8  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      58.  00:90F8                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      58.  00:90F8  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      59.  00:9108                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      59.  00:9108  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      60.  00:9118                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      60.  00:9118  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      61.  00:9128                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      61.  00:9128  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      62.  00:9138                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      62.  00:9138  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      63.  00:9148                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      63.  00:9148  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      64.  00:9158                      	
      65.  00:9158                      habitaciones_nivel4:
      66.  00:9158                      	db  00000001b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      66.  00:9158  01 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      67.  00:9168                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      67.  00:9168  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      68.  00:9178                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      68.  00:9178  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      69.  00:9188                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      69.  00:9188  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      70.  00:9198                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      70.  00:9198  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      71.  00:91A8                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      71.  00:91A8  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      72.  00:91B8                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      72.  00:91B8  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      73.  00:91C8                      	
      74.  00:91C8                      habitaciones_nivel5:
      75.  00:91C8                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      75.  00:91C8  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      76.  00:91D8                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      76.  00:91D8  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      77.  00:91E8                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      77.  00:91E8  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      78.  00:91F8                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      78.  00:91F8  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      79.  00:9208                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      79.  00:9208  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      80.  00:9218                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      80.  00:9218  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      81.  00:9228                      	db  00000000b,#00,00000001b,#01,00001010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      81.  00:9228  00 00 01 01 0A 02 03 03 08 04 09 05 0C 06 FF 00 
      82.  00:9238                      	
      83.  00:9238                      habitaciones_nivel6:
      84.  00:9238                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00 ;primera fila
      84.  00:9238  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      85.  00:9248                      	db  #17,#10,#11,#11,#12,#12,#13,#13,#14,#14,#15,#15,#16,#16,#FF,#00
      85.  00:9248  17 10 11 11 12 12 13 13 14 14 15 15 16 16 FF 00 
      86.  00:9258                      	db  #20,#20,#21,#21,#22,#22,#23,#23,#24,#24,#25,#25,#26,#26,#FF,#00
      86.  00:9258  20 20 21 21 22 22 23 23 24 24 25 25 26 26 FF 00 
      87.  00:9268                      	db  #30,#30,#31,#31,#32,#32,#33,#33,#34,#34,#35,#35,#36,#36,#FF,#00
      87.  00:9268  30 30 31 31 32 32 33 33 34 34 35 35 36 36 FF 00 
      88.  00:9278                      	db  00000000b,#00,00000001b,#01,00001111b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00
      88.  00:9278  00 00 01 01 0F 02 03 03 08 04 09 05 0C 06 FF 00 
      89.  00:9288                      	db  #50,#50,#51,#51,#52,#52,#53,#53,#54,#54,#55,#55,#56,#56,#FF,#00
      89.  00:9288  50 50 51 51 52 52 53 53 54 54 55 55 56 56 FF 00 
      90.  00:9298                      	db  00000000b,#00,00000001b,#01,00000010b,#02,00000011b,#03,00001000b,#04,00001001b,#05,00001100b,#06,#FF,#00	;ultima fila
      90.  00:9298  00 00 01 01 02 02 03 03 08 04 09 05 0C 06 FF 00 
      91.  00:92A8                      
      92.  00:92A8                      
      93.  00:92A8                      
     189   00:92A8                      	
     190   00:92A8                      	include "variables.asm"
       1.  00:92A8                      ;;=====================================================
       2.  00:92A8                      ;;DEFINICIÓN DE VARIABLES
       3.  00:92A8                      ;;=====================================================
       4.  00:92A8                      
       5.  00:92A8                      ;Colores base de la pantalla
       6.  00:92A8                      color_base:
       7.  00:92A8  01 01 01            			DB		COLNEGRO,COLNEGRO,COLNEGRO	
       8.  00:92AB                      ;colores de pantalla cuando se tira bomba
       9.  00:92AB                      color_bomba1:
      10.  00:92AB  08 08 08            			DB		COLROJO,COLROJO,COLROJO
      11.  00:92AE                      color_bomba2:
      12.  00:92AE  06 06 06            			DB		COLROJOOSC,COLROJOOSC,COLROJOOSC
      13.  00:92B1                      
      14.  00:92B1                      ;definicion de variable del prota usando la estructura del punto de mira
      15.  00:92B1                      prota:		ESTRUCTURA_PUNTOMIRA
      15.  00:92B1  64 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      16.  00:92C1                      ;variables globales del prota
      17.  00:92C1                      prota_nivel:			;nivel del castillo donde está 0-6
      18.  00:92C1  00                  			DB		0
      19.  00:92C2                      prota_vidas:
      20.  00:92C2  00                  			DB		0
      21.  00:92C3                      prota_reliquias:
      22.  00:92C3  03                  			DB		3
      23.  00:92C4                      prota_pos_mapx:
      24.  00:92C4  00                  			DB		0	;pos columna
      25.  00:92C5                      prota_pos_mapy:
      26.  00:92C5  00                  			DB		0	;pos fila
      27.  00:92C6                      prota_energia:
      28.  00:92C6  FA                  			DB		250
      29.  00:92C7                      
      30.  00:92C7                      ;array para pintar de golpe el marcador de vidas
      31.  00:92C7                      array_aux_vidas: 		
      32.  00:92C7                      			DB		0,0,0,0,0,0,0,0
      32.  00:92C7  00 00 00 00 00 00 00 00 
      33.  00:92CF                      
      34.  00:92CF                      ;array para pintar de golpe el marcador de reliquias
      35.  00:92CF                      array_aux_reliquias:	
      36.  00:92CF                      			DB		0,0,0,0,0,0,0,0
      36.  00:92CF  00 00 00 00 00 00 00 00 
      37.  00:92D7                      
      38.  00:92D7                      array_aux_energia:					;array para pintar de golpe el marcador de energía
      39.  00:92D7                      			DB		16,0,0,0,0,0,0 	;el 16 primero es porque siempre estará pintado el cuadro primero rojo
      39.  00:92D7  10 00 00 00 00 00 00 
      40.  00:92DE                      ultimo_pos_array_aux_energia:
      41.  00:92DE  00                  			DB		0				;el array completo es de 8 pero para posicionar sin niecesidad de cálculos  etiqueto este aparte
      42.  00:92DF                      			
      43.  00:92DF                      array_aux_mapa_limpiar:	;es por facilitar el reseteo del mapa (pinto 7 lineas en negro con bios) la otra opción es más larga en código y complicada aunque más rápida
      44.  00:92DF                      			DB		0,0,0,0,0,0,0
      44.  00:92DF  00 00 00 00 00 00 00 
      45.  00:92E6                      elemento_pintar_mapa:
      46.  00:92E6  00                  			DB		0	;TILEPROTAM = 19, ;TILEGRISM = 9
      47.  00:92E7                      			
      48.  00:92E7                      ;; nota importante: cada vez que se cambie de nivel se actualizará el contenido
      49.  00:92E7                      ;; arrays con mapa de tiles de las puertas
      50.  00:92E7                      array_puerta_arriba:
      51.  00:92E7  03 01 01 03         array_puerta_arriba1:		DB	3,1,1,3
      52.  00:92EB  01 01 01 01         array_puerta_arriba2:		DB	1,1,1,1
      53.  00:92EF  01 01 01 01         array_puerta_arriba3:		DB	1,1,1,1
      54.  00:92F3  01 01 01 01         array_puerta_arriba4:		DB	1,1,1,1
      55.  00:92F7  01 01 01 01         array_puerta_arriba5:		DB	1,1,1,1
      56.  00:92FB                      
      57.  00:92FB                      array_puerta_derecha:
      58.  00:92FB  01 03 03            array_puerta_derecha1:		DB	1,3,3
      59.  00:92FE  01 01 03            array_puerta_derecha2:		DB	1,1,3
      60.  00:9301  01 01 01            array_puerta_derecha3:		DB	1,1,1
      61.  00:9304  01 01 01            array_puerta_derecha4:		DB	1,1,1
      62.  00:9307  01 01 01            array_puerta_derecha5:		DB	1,1,1
      63.  00:930A  02 01 01            array_puerta_derecha6:		DB	2,1,1
      64.  00:930D  04 02 01            array_puerta_derecha7:		DB	4,2,1
      65.  00:9310                      	
      66.  00:9310  01 01 01 01         array_puerta_abajo:			DB	1,1,1,1
      67.  00:9314                      
      68.  00:9314                      array_puerta_izquierda:
      69.  00:9314  03 03 01            array_puerta_izquierda1:	DB	3,3,1
      70.  00:9317  03 01 01            array_puerta_izquierda2:	DB	3,1,1
      71.  00:931A  01 01 01            array_puerta_izquierda3:	DB	1,1,1
      72.  00:931D  01 01 01            array_puerta_izquierda4:	DB	1,1,1
      73.  00:9320  01 01 01            array_puerta_izquierda5:	DB	1,1,1
      74.  00:9323  01 01 02            array_puerta_izquierda6:	DB	1,1,2
      75.  00:9326  01 02 04            array_puerta_izquierda7:	DB	1,2,4
      76.  00:9329                      
      77.  00:9329                      
      78.  00:9329                      ;array de 4 bytes x 32 sprites posibles en pantalla que sobreescribirá la tabla de sprites actualizando VRAM
      79.  00:9329                      array_sprites:
      80.  00:9329  00 (8)              array_sprites_pm:				DS	2 * 4
      81.  00:9331  00 (120)            array_sprites_enem:				DS	30 * 4
      82.  00:93A9  00 (140)            lista_enemigos:					DS	10 * ESTRUCTURA_ENEMIGO
      83.  00:9435                      ; puntero al array a pintar en VRAM
      84.  00:9435  00 00               puntero_array_atrib_array_VRAM: DW	0	;ARRAYSPTRIES + 8
      85.  00:9437                      
      86.  00:9437                      
     191   00:9437                      	
     192   00:9437                      ;;=====================================================
     193   00:9437                      ;;DEFINICIÓN DE PANTALLAS
     194   00:9437                      ;;=====================================================		
     195   00:9437                      	include "pantallas.asm"
       1.  00:9437                      ;;=====================================================
       2.  00:9437                      ;;DEFINICIÓN DE PANTALLAS
       3.  00:9437                      ;;=====================================================		
       4.  00:9437                      
       5.  00:9437                      ; bancos 1 y 2 y de pantalla 1 (en realidad es una pantalla de pruebas)
       6.  00:9437                      tiles_patrones_pantalla11:	
       7.  00:9437  (0023)              tiles_patrones_pantalla12:	incbin "pan1_23.bank1.bin.chr.pletter"
       8.  00:945A                      tiles_color_pantalla11:		
       9.  00:945A  (0018)              tiles_color_pantalla12:		incbin "pan1_23.bank1.bin.clr.pletter"
      10.  00:9472  (001A)              tiles_mapa_pantalla11:		incbin "pan1_23.bank0.bin.map.pletter"
      11.  00:948C  (002A)              tiles_mapa_pantalla12:		incbin "pan1_23.bank1.bin.map.pletter"
      12.  00:94B6                      
      13.  00:94B6                      
      14.  00:94B6                      
      15.  00:94B6                      
      16.  00:94B6                      
      17.  00:94B6                      
      18.  00:94B6                      ; 3º banco que es la parte de puntos, vidas, mapas, etc... es común
      19.  00:94B6  (0146)              tiles_patrones_pantalla3:	incbin "pan_33.bin.chr.pletter"
      20.  00:95FC  (0035)              tiles_color_pantalla3:		incbin "pan_33.bin.clr.pletter"
      21.  00:9631  (006F)              tiles_mapa_pantalla3:		incbin "pan_33.bin.map.pletter"
      22.  00:96A0                      
      23.  00:96A0                      ;NOTA: FALTARÍAN PANTALLAS ESPECIALES (POR DEFINIR)
     196   00:96A0                      
     197   00:96A0                      ;;=====================================================
     198   00:96A0                      ;;DEFINICIÓN DE CANTIONES Y EFECTOS DE SONIDO
     199   00:96A0                      ;;=====================================================		
     200   00:96A0                      song:
     201   00:96A0  (0968)              	incbin "bloodytears_castlevania.99"
     202   00:A008                      	
     203   00:A008                      sfx_bank:
     204   00:A008  (004B)              	incbin "demo.afb"
     205   00:A053                      	
     206   00:A053                      END:

    LABELS
-------------------------------------------------
00:000000D8 X GTTRIG
00:000000D5 X GTSTCK
00:0000F3DB   CLIKSW
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000005C   LDIRVM
00:00000059 X LDIRMV
00:0000005F   CHGMOD
00:00000041 X DISSCR
00:00000044 X ENASCR
00:00000062   CHGCLR
00:0000F3E9   FORCLR
00:0000F3EA   BAKCLR
00:0000F3EB   BDRCLR
00:000000C3   CLS
00:0000F3DF X RG0SAV
00:0000F3E0   RG1SAV
00:0000F3E1 X RG2SAV
00:0000F3E2 X RG3SAV
00:0000F3E3 X RG4SAV
00:0000F3E4 X RG5SAV
00:0000F3E5 X RG6SAV
00:0000F3E6 X RG7SAV
00:0000F3E7 X STATFL
00:00000099   REGEST
00:00000098   REGESCVDP
00:000000A0   PSG_A
00:000000A1   PSG_W
00:000000A2   PSG_R
00:00000000   CHRTBL
00:00001800   TILMAP
00:00001B00   SPRART
00:00002000   CLRTBL
00:00003800 X SPRTBL
00:00000001 X SI
00:00000000 X NO
00:00000000 X COLTRASP
00:00000001   COLNEGRO
00:00000002 X COLVERDE
00:00000003 X COLVERCLA
00:00000004 X COLAZULOSC
00:00000005 X COLAZULLA
00:00000006   COLROJOOSC
00:00000007 X COLCYAN
00:00000008   COLROJO
00:00000009 X COLROJOCLA
00:0000000A X COLAMAROSC
00:0000000B X COLAMARCLA
00:0000000C X COLVERDOSC
00:0000000D X COLMAGENTA
00:0000000E X COLGRIS
00:0000000F   COLBLANCO
00:000002F8   POSMAPLIN1
00:000002D8   POSMAPLIN2
00:000002B8   POSMAPLIN3
00:00000298   POSMAPLIN4
00:00000278   POSMAPLIN5
00:00000258   POSMAPLIN6
00:00000238   POSMAPLIN7
00:0000000D   POSCARAMAP
00:00000248   POSVIDAS
00:00000011   POSRELIMAP
00:000002C8   POSRELIQ
00:00000288   POSENERG
00:000002B4   POSNIVEL
00:00000238   POSMAPA
00:000001EE   POSPUERABAJ
00:0000008E   POSPUERARRI
00:000000FC   POSPUERDERE
00:000000E1   POSPUERIZQU
00:00000013   TILEPROTAM
00:00000009   TILEGRISM
00:00000010   TILEMAPROJO
00:0000000F   TILEMAPAMAR
00:0000000E   TILEMAPVERD
00:00000008   NMAXVIDREL
00:00000007   NHABNIVEL
00:000000F8 X MAXENERGIA
00:000000D9   TILEENERG8
00:000000BA   TILEENERG7
00:0000009B   TILEENERG6
00:0000007C   TILEENERG5
00:0000005D   TILEENERG4
00:0000003E   TILEENERG3
00:0000001F   TILEENERG2
00:00000000   TILENEGRO
00:00000000 X LIMPANTIZQ
00:000000FF   LIMPANTDER
00:00000000 X LIMPANTARR
00:00000080   LIMPANTABA
00:00000006 X BASEMAPY
00:00000003 X BASEMAPX
00:0000FD9A X H.KEYI
00:0000FD9F   H.TIMI
00:0000F000   PT3_SETUP
00:0000F001   PT3_MODADDR
00:0000F003   PT3_CrPsPtr
00:0000F005   PT3_SAMPTRS
00:0000F007   PT3_OrnPtrs
00:0000F009   PT3_PDSP
00:0000F00B   PT3_CSP
00:0000F00D   PT3_PSP
00:0000F00F   PT3_PrNote
00:0000F010   PT3_PrSlide
00:0000F012   PT3_AdInPtA
00:0000F014   PT3_AdInPtB
00:0000F016   PT3_AdInPtC
00:0000F018   PT3_LPosPtr
00:0000F01A   PT3_PatsPtr
00:0000F01C   PT3_Delay
00:0000F01D   PT3_AddToEn
00:0000F01E   PT3_Env_Del
00:0000F01F   PT3_ESldAdd
00:0000F021   PT3_NTL3
00:0000F023   VARS
00:0000F023   ChanA
00:0000F040   ChanB
00:0000F05D   ChanC
00:0000F07A   DelyCnt
00:0000F07B   CurESld
00:0000F07D   CurEDel
00:0000F07E   Ns_Base_AddToNs
00:0000F07E   Ns_Base
00:0000F07F   AddToNs
00:0000F080   NT_
00:0000F140   AYREGS
00:0000F140   VT_
00:0000F14E   EnvBase
00:0000F150   VAR0END
00:0000F150   T1_
00:0000F150   T_NEW_1
00:0000F150   T_OLD_1
00:0000F168   T_OLD_2
00:0000F180   T_NEW_3
00:0000F180   T_OLD_3
00:0000F182   T_OLD_0
00:0000F182   T_NEW_0
00:0000F19A   T_NEW_2
00:0000F240   ayFX_MODE
00:0000F241   ayFX_BANK
00:0000F243   ayFX_PRIORITY
00:0000F244   ayFX_POINTER
00:0000F246   ayFX_TONE
00:0000F248   ayFX_NOISE
00:0000F249   ayFX_VOLUME
00:0000F24A   ayFX_CHANNEL
00:00008000   START
00:00008029   loop_principal
00:00008036 X fin_programa_principal
00:00008036   inicializa_replayer_efectos_interrupciones
00:0000804F X fin_inicializa_replayer_efectos_interrupciones
00:00008050   nuestra_isr
00:00008059 X fin_nuestra_isr
00:00008059   inicializa_variables_pruebas
00:00008077 X fin_inicializa_variables_pruebas
00:00008078   inicializa_niveles
00:00008087   inicializa_niveles.bucle_borra_hab
00:0000808C X fin_iniciliza_niveles
00:0000808D   actualiza_marcador_vidas
00:00008092   loop_marcador_caras_negro
00:00008097 X fin_loop_marcador_caras_negro
00:000080A0   loop_marcador_caras
00:000080A5 X fin_loop_marcador_caras
00:000080A5 X fin_actualiza_marcador_vidas
00:000080A6   actualiza_buffer_reliquias
00:000080AC   loop_buffer_reliquias_negro
00:000080B9   loop_buffer_reliquias
00:000080BE X fin_actualiza_buffer_reliquias
00:000080BF   localiza_info_habitacion
00:000080C2 X localiza_info_habitacion.situo_columna
00:000080CB X localiza_info_habitacion.situo_fila
00:000080D4   localiza_info_habitacion.loop_suma_fila
00:000080DC   localiza_info_habitacion.situo_nivel
00:000080EB   localiza_info_habitacion.loop_suma_nivel
00:000080F0   localiza_info_habitacion.actualiza_valiable_habitacion
00:000080F4 X fin_localiza_info_habitacion
00:000080F5   color_pantalla
00:00008106 X fin_color_pantalla
00:00008106   sub_preparapantalla
00:00008106 X elimina_clic
00:0000810A X fin_elimina_clic
00:0000810A X limpia_pantalla
00:0000810E X fin_limpia_pantalla
00:00008114 X screen2
00:00008119 X sprites_16_16
00:00008127 X fin_sub_preparapantalla
00:00008127   pinta_pantalla_completa
00:0000812D X fin_pinta_pantalla_completa
00:0000812E   pinta_parte_superior_pantalla
00:00008164 X fin_pinta_parte_superior_pantalla
00:00008165   pinta_parte_inferior_pantalla
00:00008180 X fin_pinta_parte_inferior_pantalla
00:00008180   pinta_vidas
00:0000818F X fin_pinta_vidas
00:0000818F   pinta_reliquias
00:0000819E X fin_pinta_reliquias
00:0000819E   pinta_nivel
00:000081AA X fin_pinta_nivel
00:000081AB   pinta_tile_suelto
00:000081B8 X fin_pinta_tile_suelto
00:000081B9   mira_pinta_energia
00:000081BF X pinta_ener
00:000081BF X pinta_ener_tile_8
00:000081CB   pinta_ener_tile_8_negro
00:000081CC   pinta_ener_tile_7
00:000081D6   pinta_ener_tile_7_negro
00:000081D7   pinta_ener_tile_6
00:000081E1   pinta_ener_tile_6_negro
00:000081E2   pinta_ener_tile_5
00:000081EC   pinta_ener_tile_5_negro
00:000081ED   pinta_ener_tile_4
00:000081F7   pinta_ener_tile_4_negro
00:000081F8   pinta_ener_tile_3
00:00008202   pinta_ener_tile_3_negro
00:00008203   pinta_ener_tile_2
00:0000820D   pinta_ener_tile_2_negro
00:0000820E   fin_mira_pinta_energia
00:00008210   pinta_energia
00:0000821F X fin_pinta_energia
00:0000821F   borra_mapa
00:00008275 X fin_borra_mapa
00:00008276   pinta_array
00:00008284   pinta_array.pa_pinta_fila
00:00008285   pinta_array.pa_pinta_columnas
00:000082A8 X fin_pinta_array
00:000082A9   wordaux1
00:000082AB   wordaux2
00:000082AD   pinta_puertas
00:000082CA X fin_pinta_puertas
00:000082CB   pinta_puerta_aba
00:000082E0 X fin_pinta_puerta_aba
00:000082E0   pinta_puerta_arr
00:000082F5 X fin_pinta_puerta_arr
00:000082F5   pinta_puerta_der
00:0000830A X fin_pinta_puerta_der
00:0000830A   pinta_puerta_izq
00:0000831F X fin_pinta_puerta_izq
00:0000831F   posiciona_en_mapa
00:00008322 X posiciona_en_mapa.sumar_fila
00:0000834C X posiciona_en_mapa.fila_0
00:00008353   posiciona_en_mapa.fila_1
00:0000835A   posiciona_en_mapa.fila_2
00:00008361   posiciona_en_mapa.fila_3
00:00008368   posiciona_en_mapa.fila_4
00:0000836F   posiciona_en_mapa.fila_5
00:00008376 X posiciona_en_mapa.fila_6
00:00008376   posiciona_en_mapa.sumar_columna
00:0000838C   pinta_pos_mapa_vacio
00:0000838E   fin_pinta_pos_mapa
00:00008391 X fin_posiciona_en_mapa
00:00008391   efecto_imagen_tira_reliquia
00:00008394   efecto_imagen_tira_reliquia.parpadea_fondo
00:000083AB X fin_efecto_imagen_tira_reliquia
00:000083AB   carga_patrones_sprites_nivel1
00:0000847B X fin_carga_patrones_sprites
00:0000847C   render_sprites
00:00008488 X fin_actualiza_array_sprites_vram
00:00008488   vuelca_resultado_puntomira_array
00:000084AD X vuelca_resultado_puntomira_array.codigo_color_1
00:000084B6   vuelca_resultado_puntomira_array.codigo_color_2
00:000084BF X fin_vuelca_resultado_puntomira_array
00:000084BF   check_player
00:000084DE X f
00:000084DF   mueve_arriba
00:000084EA   mueve_arriba.no_decrementa_y
00:000084EB X fin_mueve_arriba
00:000084EC   mueve_derecha
00:000084F9   mueve_derecha.no_incrementa_x
00:000084FA X fin_mueve_derecha
00:000084FB   mueve_abajo
00:00008508   mueve_abajo.no_incrementa_y
00:00008509 X fin_mueve_abajo
00:0000850A   mueve_izquierda
00:00008515   mueve_izquierda.no_decrementa_x
00:00008516 X fin_mueve_izquierda
00:00008517   mira_disparo
00:00008517 X mira_disparo.mira_boton_pulsado1
00:0000852B   mira_disparo.mira_boton_pulsado2
00:00008546 X fin_mira_disparo
00:00008546   update_controllers_status
00:0000857D   read_joy_0
00:00008591   check_8th_keyboard_row
00:0000859F   check_4th_keyboard_row
00:000085AD   depack_VRAM
00:000085DA   literal
00:000085DF   loop
00:000085E8 X getlen
00:000085EE   lus
00:0000860B   lenok
00:00008618   mode7
00:0000861E   mode6
00:00008624   mode5
00:0000862A   mode4
00:00008630   mode3
00:00008636   mode2
00:00008646   offsok
00:00008651   offsok.loop
00:00008673   getbit
00:00008677   getbitexx
00:0000867D   Depack_out
00:0000867F   modes
00:0000868D X subrutinas_sonido
00:00000000   CHNPRM_PsInOr
00:00000001   CHNPRM_PsInSm
00:00000002   CHNPRM_CrAmSl
00:00000003   CHNPRM_CrNsSl
00:00000004   CHNPRM_CrEnSl
00:00000005   CHNPRM_TSlCnt
00:00000006   CHNPRM_CrTnSl
00:00000008   CHNPRM_TnAcc
00:0000000A   CHNPRM_COnOff
00:0000000B   CHNPRM_OnOffD
00:0000000C   CHNPRM_OffOnD
00:0000000D   CHNPRM_OrnPtr
00:0000000F   CHNPRM_SamPtr
00:00000011   CHNPRM_NNtSkp
00:00000012   CHNPRM_Note
00:00000013   CHNPRM_SlToNt
00:00000014   CHNPRM_Env_En
00:00000015   CHNPRM_Flags
00:00000016   CHNPRM_TnSlDl
00:00000017   CHNPRM_TSlStp
00:00000019   CHNPRM_TnDelt
00:0000001B   CHNPRM_NtSkCn
00:0000001C   CHNPRM_Volume
00:0000001D X CHNPRM_Size
00:00000000   AR_TonA
00:00000002   AR_TonB
00:00000004   AR_TonC
00:00000006   AR_Noise
00:00000007   AR_Mixer
00:00000008   AR_AmplA
00:00000009   AR_AmplB
00:0000000A   AR_AmplC
00:0000000B   AR_Env
00:0000000D   AR_EnvTp
00:0000868D   CHECKLP
00:0000869E X PT3_MUTE
00:000086AA   PT3_INIT
00:000086E9   PT3_INIT.TP_0
00:000086F5   PT3_INIT.TP_1
00:000086FC   PT3_INIT.TP_2
00:0000876A   PT3_INIT.L1
00:00008777   PT3_INIT.L2
00:0000877B X PT3_INIT.L3
00:000087A2   PT3_INIT.CORR_1
00:000087B0   PT3_INIT.CORR_2
00:000087B7   PT3_INIT.TC_EXIT
00:000087C2   PT3_INIT.INITV1
00:000087CA   PT3_INIT.INITV2
00:000087DE   PT3_INIT.INITV3
00:000087E2   PD_OrSm
00:000087EC   PD_SAM
00:000087ED   PD_SAM_
00:00008803   PD_VOL
00:0000880C   PD_EOff
00:00008814   PD_SorE
00:0000881E   PD_ENV
00:00008823   PD_ORN
00:00008828   PD_ESAM
00:00008835   PTDECOD
00:00008844   PD_LOOP
00:00008847   PD_LP2
00:00008874   PD_NOIS
00:00008879   PD_REL
00:0000887F   PD_NOTE
00:00008887   PD_RES
00:00008899   PD_FIN
00:000088A0   C_PORTM
00:000088EB   C_PORTM.NOSIG
00:000088F5   SET_STP
00:00008901   C_GLISS
00:00008914   C_SMPOS
00:0000891A   C_ORPOS
00:00008920   C_VIBRT
00:00008938   C_ENGLS
00:0000894A   C_DELAY
00:00008950   SETENV
00:0000896B   C_NOP
00:0000896C   SETORN
00:00008985   SPCCOMS
00:000089A5   CHREGS
00:000089C8   CHREGS.CH_ORPS
00:000089D3   CHREGS.CH_NTP
00:000089D9   CHREGS.CH_NOK
00:000089F4   CHREGS.CH_SMPS
00:00008A0A   CHREGS.CH_NOAC
00:00008A51   CHREGS.CH_STPP
00:00008A66   CHREGS.CH_AMP
00:00008A78   CHREGS.CH_AMIN
00:00008A7D   CHREGS.CH_SVAM
00:00008A80   CHREGS.CH_NOAM
00:00008A89   CHREGS.CH_APOS
00:00008A8F   CHREGS.CH_VOL
00:00008A9A X CHREGS.CH_ENV
00:00008AA1   CHREGS.CH_NOEN
00:00008ABB   CHREGS.NO_ENAC
00:00008AC2   CHREGS.NO_ENSL
00:00008AD0   CHREGS.CH_MIX
00:00008AD4   CHREGS.CH_EXIT
00:00008AF3   CHREGS.CH_ONDL
00:00008AF7   PT3_PLAY
00:00008B2B   PT3_PLAY.PLNLP
00:00008B52   PT3_PLAY.PL1A
00:00008B5D   PT3_PLAY.PL1B
00:00008B72   PT3_PLAY.PL1C
00:00008B87   PT3_PLAY.PL1D
00:00008B8D   PT3_PLAY.PL2
00:00008BEF   PT3_ROUT
00:00008BF0   ROUT_A0
00:00008BFC   ROUT_A0.LOUT
00:00008C10   NT_DATA
00:00008C20   T_
00:00008C20   TCOLD_0
00:00008C2C   TCNEW_1
00:00008C2C   TCOLD_1
00:00008C2E   TCOLD_2
00:00008C40   TCNEW_3
00:00008C41   TCOLD_3
00:00008C4A   TCNEW_0
00:00008C55   TCNEW_2
00:00008C60   EMPTYSAMORN
00:00008C64   T_PACK
00:00000000 X AYFXRELATIVE
00:00008C99   ayFX_SETUP
00:00008CA5   ayFX_END
00:00008CAB   ayFX_INIT
00:00008CBC   ayFX_INIT.CHECK_PRI
00:00008CDD   ayFX_INIT.INIT_END
00:00008CE1   ayFX_PLAY
00:00008CF5   ayFX_PLAY.TAKECB
00:00008D06   ayFX_PLAY.CHECK_NN
00:00008D13   ayFX_PLAY.SETPOINTER
00:00008D27   ayFX_PLAY.SETMASKS
00:00008D35 X ayFX_PLAY.CHK1
00:00008D37 X ayFX_PLAY.PLAY_C
00:00008D44   ayFX_PLAY.CHK2
00:00008D49 X ayFX_PLAY.PLAY_B
00:00008D56   ayFX_PLAY.CHK3
00:00008D59 X ayFX_PLAY.PLAY_A
00:00008D66   ayFX_PLAY.SETMIXER
00:00000000 X ESTRUCTURA_PUNTOMIRA.posx
00:00000001 X ESTRUCTURA_PUNTOMIRA.posy
00:00000002 X ESTRUCTURA_PUNTOMIRA.escena
00:00000003 X ESTRUCTURA_PUNTOMIRA.velocidad
00:00000004 X ESTRUCTURA_PUNTOMIRA.boton2_pressed
00:00000005 X ESTRUCTURA_PUNTOMIRA.pm_aux1
00:00000006 X ESTRUCTURA_PUNTOMIRA.pm_aux2
00:00000007 X ESTRUCTURA_PUNTOMIRA.pm_aux3
00:00000008 X ESTRUCTURA_PUNTOMIRA.pm_aux4
00:00000009 X ESTRUCTURA_PUNTOMIRA.pm_aux5
00:0000000A X ESTRUCTURA_PUNTOMIRA.pm_aux6
00:0000000B X ESTRUCTURA_PUNTOMIRA.pm_aux7
00:0000000C X ESTRUCTURA_PUNTOMIRA.pm_aux8
00:0000000D X ESTRUCTURA_PUNTOMIRA.pm_aux9
00:0000000E X ESTRUCTURA_PUNTOMIRA.pm_aux10
00:0000000F X ESTRUCTURA_PUNTOMIRA.pm_aux11
00:00000010 X ESTRUCTURA_PUNTOMIRA
00:00000000 X ESTRUCTURA_ENEMIGO.tipo
00:00000001 X ESTRUCTURA_ENEMIGO.posx
00:00000002 X ESTRUCTURA_ENEMIGO.posy
00:00000003 X ESTRUCTURA_ENEMIGO.color
00:00000004 X ESTRUCTURA_ENEMIGO.escena
00:00000005 X ESTRUCTURA_ENEMIGO.contador_siguiente_escena
00:00000006 X ESTRUCTURA_ENEMIGO.reset_contador
00:00000007 X ESTRUCTURA_ENEMIGO.dano
00:00000008 X ESTRUCTURA_ENEMIGO.energia
00:00000009 X ESTRUCTURA_ENEMIGO.ver_hor
00:0000000A X ESTRUCTURA_ENEMIGO.manejador_dibujo
00:0000000C X ESTRUCTURA_ENEMIGO.en_aux3
00:0000000D X ESTRUCTURA_ENEMIGO.en_aux4
00:0000000E   ESTRUCTURA_ENEMIGO
00:00000000 X ESTRUCTURA_EXTRA.tipo
00:00000001 X ESTRUCTURA_EXTRA.posx
00:00000002 X ESTRUCTURA_EXTRA.posy
00:00000003 X ESTRUCTURA_EXTRA.color
00:00000004 X ESTRUCTURA_EXTRA.contador
00:00000005 X ESTRUCTURA_EXTRA.en_aux1
00:00000006 X ESTRUCTURA_EXTRA.en_aux2
00:00000007 X ESTRUCTURA_EXTRA.en_aux3
00:00000008 X ESTRUCTURA_EXTRA.en_aux4
00:00000009 X ESTRUCTURA_EXTRA.en_aux5
00:0000000A X ESTRUCTURA_EXTRA.en_aux6
00:0000000B X ESTRUCTURA_EXTRA.en_aux7
00:0000000C X ESTRUCTURA_EXTRA.en_aux8
00:0000000D X ESTRUCTURA_EXTRA.en_aux9
00:0000000E X ESTRUCTURA_EXTRA.en_aux10
00:0000000F X ESTRUCTURA_EXTRA.en_aux11
00:00000010 X ESTRUCTURA_EXTRA
00:00008D76 X sprites_pantantalla
00:00008D76   sprite_punto_mira_1
00:00008D96   sprite_punto_mira_2
00:00008DB6   sprite_punto_mira_1_mejorado
00:00008DD6   sprite_punto_mira_2_mejorado
00:00008DF6   sprite_reliquia
00:00008E16 X sprite_vida_extra
00:00008E36   sprite_planta
00:00008E56   sprite_ballesta_mejorada
00:00008E76   sprite_ciempies1
00:00008E96   sprite_ciempies2
00:00008EB6   sprite_arana1
00:00008ED6   sprite_arana2
00:00008EF6   sprite_serpiente1
00:00008F16   sprite_serpiente2
00:00008F36   sprite_murcielago1
00:00008F56   sprite_murcielago2
00:00008F76   sprite_explosion
00:00008F96   habitacion_actual
00:00008F98   habitaciones_juego
00:00008F98 X habitaciones_nivel0
00:00009008 X habitaciones_nivel1
00:00009078 X habitaciones_nivel2
00:000090E8 X habitaciones_nivel3
00:00009158 X habitaciones_nivel4
00:000091C8 X habitaciones_nivel5
00:00009238 X habitaciones_nivel6
00:000092A8   color_base
00:000092AB   color_bomba1
00:000092AE   color_bomba2
00:000092B1 X prota
00:000092B1   prota.posx
00:000092B2   prota.posy
00:000092B3   prota.escena
00:000092B4 X prota.velocidad
00:000092B5 X prota.boton2_pressed
00:000092B6 X prota.pm_aux1
00:000092B7 X prota.pm_aux2
00:000092B8 X prota.pm_aux3
00:000092B9 X prota.pm_aux4
00:000092BA X prota.pm_aux5
00:000092BB X prota.pm_aux6
00:000092BC X prota.pm_aux7
00:000092BD X prota.pm_aux8
00:000092BE X prota.pm_aux9
00:000092BF X prota.pm_aux10
00:000092C0 X prota.pm_aux11
00:000092C1   prota_nivel
00:000092C2   prota_vidas
00:000092C3   prota_reliquias
00:000092C4   prota_pos_mapx
00:000092C5   prota_pos_mapy
00:000092C6   prota_energia
00:000092C7   array_aux_vidas
00:000092CF   array_aux_reliquias
00:000092D7   array_aux_energia
00:000092DE   ultimo_pos_array_aux_energia
00:000092DF   array_aux_mapa_limpiar
00:000092E6   elemento_pintar_mapa
00:000092E7   array_puerta_arriba
00:000092E7 X array_puerta_arriba1
00:000092EB X array_puerta_arriba2
00:000092EF X array_puerta_arriba3
00:000092F3 X array_puerta_arriba4
00:000092F7 X array_puerta_arriba5
00:000092FB   array_puerta_derecha
00:000092FB X array_puerta_derecha1
00:000092FE X array_puerta_derecha2
00:00009301 X array_puerta_derecha3
00:00009304 X array_puerta_derecha4
00:00009307 X array_puerta_derecha5
00:0000930A X array_puerta_derecha6
00:0000930D X array_puerta_derecha7
00:00009310   array_puerta_abajo
00:00009314   array_puerta_izquierda
00:00009314 X array_puerta_izquierda1
00:00009317 X array_puerta_izquierda2
00:0000931A X array_puerta_izquierda3
00:0000931D X array_puerta_izquierda4
00:00009320 X array_puerta_izquierda5
00:00009323 X array_puerta_izquierda6
00:00009326 X array_puerta_izquierda7
00:00009329   array_sprites
00:00009329   array_sprites_pm
00:00009331 X array_sprites_enem
00:000093A9 X lista_enemigos
00:00009435 X puntero_array_atrib_array_VRAM
00:00009437   tiles_patrones_pantalla11
00:00009437   tiles_patrones_pantalla12
00:0000945A   tiles_color_pantalla11
00:0000945A   tiles_color_pantalla12
00:00009472   tiles_mapa_pantalla11
00:0000948C   tiles_mapa_pantalla12
00:000094B6   tiles_patrones_pantalla3
00:000095FC   tiles_color_pantalla3
00:00009631   tiles_mapa_pantalla3
00:000096A0   song
00:0000A008   sfx_bank
00:0000A053   END


 Output: t4.out
-------------------------------------------------

 Page: 00
  Org: 00008000  Size: *  Used: 00000000

    No output

 Output: t4.bin
-------------------------------------------------

 Page: 00
  Org: 00008000  Size: *  Used: 0000205A

   Address   Length Align   Label
   00008000    8282         START
